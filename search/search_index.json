{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Informaci\u00f3n importante","text":""},{"location":"index.html#informacion-importante","title":"\ud83d\ude80 Informaci\u00f3n importante","text":""},{"location":"index.html#denominacion-del-curso","title":"\ud83d\udcdb Denominaci\u00f3n del curso","text":"<p>\ud83d\udcda Ciclo formativo de Grado Superior en Desarrollo de Aplicaciones Multiplataforma</p> <p>\u2615 Programaci\u00f3n (PRG)</p>"},{"location":"index.html#contenidos","title":"\ud83d\udccb Contenidos","text":"Horas Bloque P R I M E R   TRIMESTRE 89 B1 UD01: Elementos de un programa inform\u00e1tico 19 B2 UD02: Utilizaci\u00f3n de Objetos 20 PRUEBA UNIDADES 1 Y 2 6 B3 UD03: Estructuras de control y Excepciones 20 B4 UD04: Estructuras de datos Arrays y matrices. Recursividad 18 1<sup>a</sup> EVALUACI\u00d3N 6 S E G U N D O   TRIMESTRE 77 B5 UD05: Desarrollo de clases 25 B6 UD06: Lectura y escritura de informaci\u00f3n 25 B4 UD07: Colecciones y Funciones Lambda 21 2<sup>a</sup> EVALUACI\u00d3N 6 T E R C E R   TRIMESTRE 90 B8 UD08: Composici\u00f3n, Herencia y Polimorfismo 20 B9 UD09: Creaci\u00f3n de interfaces gr\u00e1ficas 20 B10 UD10: Acceso a Bases de datos 24 B11 UD11: BBDD OO 16 3<sup>a</sup> EVALUACI\u00d3N 6 CONVOCAT\u00d2RIA ORDIN\u00c0RIA 4 T O T A L 256"},{"location":"index.html#resultados-de-aprendizaje-ra","title":"\ud83c\udfaf Resultados de Aprendizaje (RA)","text":"Descripci\u00f3 Pes UNITAT Avaluaci\u00f3 RA1 Reconoce la estructura de un programa inform\u00e1tico, identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado. 10% A Se han identificado los bloques que componen la estructura de un programa inform\u00e1tico. 11% 1 =[[1AVA]] B Se han creado proyectos de desarrollo de aplicaciones 11% 2 =[[1AVA]] C Se han utilizado entornos integrados de desarrollo. 11% 2 =([[1AVA]]*0,5)+([[FEE]]*0,5) D Se han identificado los distintos tipos de variables y la utilidad espec\u00edfica de cada uno. 11% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) E Se ha modificado el c\u00f3digo de un programa para crear y utilizar variables. 11% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) F Se han creado y utilizado constantes y literales. 11% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) G Se han clasificado, reconocido y utilizado en expresiones los operadores del lenguaje. 11% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) H Se ha comprobado el funcionamiento de las conversiones de tipo expl\u00edcitas e impl\u00edcitas. 11% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) I Se han introducido comentarios en el c\u00f3digo. 11% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) Descripci\u00f3 Pes UNITAT Avaluaci\u00f3 RA2 Escribe y prueba programas sencillos, reconociendo y aplicando los fundamentos de la programaci\u00f3n orientada a objetos. 10% A Se han identificado los fundamentos de la programaci\u00f3n orientada a objetos. 11% 2 =[[1AVA]] B Se han escrito programas simples. 11% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) C Se han instanciado objetos a partir de clases predefinidas. 11% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) D Se han utilizado m\u00e9todos y propiedades de los objetos. 11% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) E Se han escrito llamadas a m\u00e9todos est\u00e1ticos. 11% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) F Se han utilizado par\u00e1metros en la llamada a m\u00e9todos. 11% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) G Se han incorporado y utilizado librer\u00edas de objetos. 11% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) H Se han utilizado constructores. 11% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) I Se ha utilizado el entorno integrado de desarrollo en la creaci\u00f3n y compilaci\u00f3n de programas simples. 11% 2 =([[1AVA]]*0,05)+([[2AVA]]*0,15)+([[3AVA]]*0,30)+([[FEE]]*0,50) Descripci\u00f3 Pes UNITAT Avaluaci\u00f3 RA3 Escribe y depura c\u00f3digo, analizando y utilizando las estructuras de control del lenguaje. 10% A Se ha escrito y probado c\u00f3digo que haga uso de estructuras de selecci\u00f3n. 11% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) B Se han utilizado estructuras de repetici\u00f3n. 11% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) C Se han reconocido las posibilidades de las sentencias de salto. 11% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) D Se ha escrito c\u00f3digo utilizando control de excepciones. 11% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) E Se han creado programas ejecutables utilizando diferentes estructuras de control. 11% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) F Se han probado y depurado los programas. 11% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) G Se ha comentado y documentado el c\u00f3digo. 11% 3 =([[1AVA]]*0,05)+([[2AVA]]*0,15)+([[3AVA]]*0,30)+([[FEE]]*0,50) H Se han creado excepciones. 11% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) I Se han utilizado aserciones para la detecci\u00f3n y correcci\u00f3n de errores durante la fase de desarrollo. 11% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) Descripci\u00f3 Pes UNITAT Avaluaci\u00f3 RA4 Desarrolla programas organizados en clases analizando y aplicando los principios de la programaci\u00f3n orientada a objetos. 10% A Se ha reconocido la sintaxis, estructura y componentes t\u00edpicos de una clase. 11% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) B Se han definido clases. 11% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) C Se han definido propiedades y m\u00e9todos. 11% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) D Se han creado constructores. 11% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) E Se han desarrollado programas que instancien y utilicen objetos de las clases creadas anteriormente. 11% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) F Se han utilizado mecanismos para controlar la visibilidad de las clases y de sus miembros. 11% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) G Se han definido y utilizado clases heredadas. 11% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) H Se han creado y utilizado m\u00e9todos est\u00e1ticos. 11% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) I Se han creado y utilizado conjuntos y librer\u00edas de clases. 11% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) Descripci\u00f3 Pes UNITAT Avaluaci\u00f3 RA5 Realiza operaciones de entrada y salida de informaci\u00f3n, utilizando procedimientos espec\u00edficos del lenguaje y librer\u00edas de clases. 15% A Se ha utilizado la consola para realizar operaciones de entrada y salida de informaci\u00f3n. 10% 6 =([[1AVA]]*0,05)+([[2AVA]]*0,15)+([[3AVA]]*0,30)+([[FEE]]*0,50) B Se han aplicado formatos en la visualizaci\u00f3n de la informaci\u00f3n. 10% 6 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) C Se han reconocido las posibilidades de entrada / salida del lenguaje y las librer\u00edas asociadas. 10% 6 =([[2AVA]]*0,5)+([[3AVA]]*0,5) D Se han utilizado ficheros para almacenar y recuperar informaci\u00f3n. 10% 6 =([[2AVA]]*0,5)+([[3AVA]]*0,5) E Se han creado programas que utilicen diversos m\u00e9todos de acceso al contenido de los ficheros. 10% 6 =([[2AVA]]*0,5)+([[3AVA]]*0,5) F Se han utilizado las herramientas del entorno de desarrollo para crear interfaces gr\u00e1ficos de usuario simples. 20% 9 '=([[3AVA]]*0,25)+([[FEE]]*0,50)+(([[UD09_T01]]*0,25)+([[UD09_T02]]*0,25)+([[UD09_T03]]*0,5)*0,25) G Se han programado controladores de eventos. 15% 9 '=([[3AVA]]*0,4)+(([[UD09_T01]]*0,25)+([[UD09_T02]]*0,25)+([[UD09_T03]]*0,5)*0,6) H Se han escrito programas que utilicen interfaces gr\u00e1ficos para la entrada y salida de informaci\u00f3n. 15% 9 '=([[3AVA]]*0,4)+(([[UD09_T01]]*0,25)+([[UD09_T02]]*0,25)+([[UD09_T03]]*0,5)*0,6) Descripci\u00f3 Pes UNITAT Avaluaci\u00f3 RA6 Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos. 20% A Se han escrito programas que utilicen matrices (arrays). 50% 4 =([[2AVA]]*0,5)+([[3AVA]]*0,50) B Se han reconocido las librer\u00edas de clases relacionadas con tipos de datos avanzados. 5% 7 =[[3AVA]] C Se han utilizado listas para almacenar y procesar informaci\u00f3n. 5% 7 =[[3AVA]] D Se han utilizado iteradores para recorrer los elementos de las listas. 5% 7 =[[3AVA]] E Se han reconocido las caracter\u00edsticas y ventajas de cada una de la colecciones de datos disponibles. 10% 7 =[[3AVA]] F Se han creado clases y m\u00e9todos gen\u00e9ricos. 5% 7 =[[3AVA]] G Se han utilizado expresiones regulares en la b\u00fasqueda de patrones en cadenas de texto. 5% 7 =[[3AVA]] H Se han identificado las clases relacionadas con el tratamiento de documentos escritos en diferentes lenguajes de intercambio de datos. 5% 7 =([[UD08_T01]]*0,5)+([[UD08_T02]]*0,5) I Se han realizado programas que realicen manipulaciones sobre documentos escritos en diferentes lenguajes de intercambio de datos. 5% 7 =([[UD08_T01]]*0,5)+([[UD08_T02]]*0,5) J Se han utilizado operaciones agregadas para el manejo de informaci\u00f3n almacenada en colecciones. 5% 7 =[[3AVA]] Descripci\u00f3 Pes UNITAT Avaluaci\u00f3 RA7 Desarrolla programas aplicando caracter\u00edsticas avanzadas de los lenguajes orientados a objetos y del entorno de programaci\u00f3n. 10% A Se han identificado los conceptos de herencia, superclase y subclase. 10% 8 =[[3AVA]] B Se han utilizado modificadores para bloquear y forzar la herencia de clases y m\u00e9todos. 10% 8 =[[3AVA]] C Se ha reconocido la incidencia de los constructores en la herencia. 10% 8 =[[3AVA]] D Se han creado clases heredadas que sobrescriban la implementaci\u00f3n de m\u00e9todos de la superclase. 10% 8 =[[3AVA]] E Se han dise\u00f1ado y aplicado jerarqu\u00edas de clases. 10% 8 =[[3AVA]] F Se han probado y depurado las jerarqu\u00edas de clases. 10% 8 =[[3AVA]] G Se han realizado programas que implementen y utilicen jerarqu\u00edas de clases. 10% 8 =[[3AVA]] H Se ha comentado y documentado el c\u00f3digo. 10% 8 =([[3AVA]]*0,50)+([[FEE]]*0,50) I Se han identificado y evaluado los escenarios de uso de interfaces. 10% 8 =[[3AVA]] J Se han identificado y evaluado los escenarios de utilizaci\u00f3n de la herencia y la composici\u00f3n. 10% 8 =[[3AVA]] Descripci\u00f3 Pes UNITAT Avaluaci\u00f3 RA8 Utiliza bases de datos orientadas a objetos, analizando sus caracter\u00edsticas y aplicando t\u00e9cnicas para mantener la persistencia de la informaci\u00f3n. 5% A Se han identificado las caracter\u00edsticas de las bases de datos orientadas a objetos. 13% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) B Se ha analizado su aplicaci\u00f3n en el desarrollo de aplicaciones mediante lenguajes orientados a objetos. 13% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) C Se han instalado sistemas gestores de bases de datos orientados a objetos. 13% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) D Se han clasificado y analizado los distintos m\u00e9todos soportados por los sistemas gestores para la gesti\u00f3n de la informaci\u00f3n almacenada. 13% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) E Se han creado bases de datos y las estructuras necesarias para el almacenamiento de objetos. 13% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) F Se han programado aplicaciones que almacenen objetos en las bases de datos creadas. 13% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) G Se han realizado programas para recuperar, actualizar y eliminar objetos de las bases de datos. 13% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) H Se han realizado programas para almacenar y gestionar tipos de datos estructurados, compuestos y relacionados. 13% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) Descripci\u00f3 Pes UNITAT Avaluaci\u00f3 RA9 Gestiona informaci\u00f3n almacenada en bases de datos relacionales manteniendo la integridad y consistencia de los datos. 10% A Se han identificado las caracter\u00edsticas y m\u00e9todos de acceso a sistemas gestores de bases de datos relacionales. 14% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) B Se han programado conexiones con bases de datos. 14% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) C Se ha escrito c\u00f3digo para almacenar informaci\u00f3n en bases de datos. 14% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) D Se han creado programas para recuperar y mostrar informaci\u00f3n almacenada en bases de datos. 14% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) E Se han efectuado borrados y modificaciones sobre la informaci\u00f3n almacenada. 14% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) F Se han creado aplicaciones que muestren la informaci\u00f3n almacenada en bases de datos. 14% 10 =([[UD10_T1]]*0,05)+([[UD10_T2]]*0,15)+([[UD10_T3]]*0,3)+([[FEE]]*0,5) G Se han creado aplicaciones para gestionar la informaci\u00f3n presente en bases de datos relacionales. 14% 10 =([[UD10_T1]]*0,05)+([[UD10_T2]]*0,15)+([[UD10_T3]]*0,3)+([[FEE]]*0,5)"},{"location":"index.html#legislacion-vigente","title":"\ud83d\udcdc Legislaci\u00f3n vigente","text":"<ul> <li>\ud83d\udcc4 RD 450/2010, BOE 20-05-2010 (Antigua ley)</li> <li>\ud83d\udcc4 RD 405/2023 29-05-2023</li> <li>\ud83d\udcc4 RD 500/2024, BOE 21-05-2024</li> <li>\ud83d\udcc4 Curr\u00edculum C.V.: ORDE 58/2012, de 5 de setembre (DOGV n\u00fam. 6868, 24.09.2012) (Antiguo)</li> <li>\ud83d\udcc4 Propuesta de Decreto del Consell</li> <li>\ud83d\udd52 Horario (Antigua ley)</li> <li>\ud83d\udd52 Horario</li> </ul>"},{"location":"index.html#evaluacion","title":"\ud83d\udcdd Evaluaci\u00f3n","text":"<ul> <li> <p>\ud83d\udd0d La evaluaci\u00f3n del m\u00f3dulo se realizar\u00e1 con base en los Resultados de Aprendizaje (RA) definidos en el curr\u00edculo del ciclo formativo de Grado Superior en Desarrollo de Aplicaciones Multiplataforma. Cada RA estar\u00e1 asociado a criterios de evaluaci\u00f3n (CE) que ser\u00e1n los que determinen el grado de adquisici\u00f3n de las competencias previstas para el m\u00f3dulo.</p> </li> <li> <p>\ud83d\udcca La nota final del m\u00f3dulo se obtendr\u00e1 a partir de la ponderaci\u00f3n de los RA, como se mencion\u00f3 anteriormente. Cada RA ser\u00e1 evaluado de forma independiente, con calificaciones en una escala de 0 a 10.</p> </li> <li> <p>\u2705 El alumno debe obtener al menos una nota de 5 en cada RA para aprobar el m\u00f3dulo.</p> </li> <li> <p>\ud83d\udd04 Si un alumno obtiene menos de un 5 en alg\u00fan RA, tendr\u00e1 que recuperarlo mediante las actividades/ex\u00e1menes de recuperaci\u00f3n dise\u00f1adas espec\u00edficamente para esos resultados de aprendizaje.</p> </li> <li> <p>\ud83d\udccaEn programaci\u00f3n los primeros RA\u2019s se distribuyen entre las 3 evaluaciones, as\u00ed que tener una buena nota en la primera evaluaci\u00f3n no quiere decir que has aprobado los RA de esa evaluaci\u00f3n.</p> </li> <li> <p>\u2757NUEVO SISTEMA DUAL!! \u2192 Busca tu empresa! 120H (aproximadamente en el mes de mayo, tambi\u00e9n a partir del 2\u00ba trimestre por las ma\u00f1anas)</p> </li> </ul> <p>\u26a0\ufe0f IMPORTANTE:</p> <ul> <li>\u2757 Aprobar las distintas evaluaciones no garantiza aprobar el curso.</li> <li>\ud83d\udccc Puedes aprobar (y con muy buena nota) las dos evaluaciones, tener un <code>RA</code> suspendido y por tanto suspender el m\u00f3dulo.</li> </ul>"},{"location":"fuentes.html","title":"Fuentes de informaci\u00f3n","text":""},{"location":"fuentes.html#fuentes-de-informacion","title":"Fuentes de informaci\u00f3n","text":"<ul> <li>Wikipedia</li> <li>Programaci\u00f3n (Grado Superior) - Juan Carlos Moreno P\u00e9rez (Ed. Ra-ma)</li> <li>Apuntes IES Henri Matisse (Javi Garc\u00eda Jimenez?)</li> <li>Apuntes AulaCampus</li> <li>Apuntes Jos\u00e9 Luis Comesa\u00f1a</li> <li>Apuntes IOC Programaci\u00f3 b\u00e0sica (Joan Arnedo Moreno)</li> <li>Apuntes IOC Programaci\u00f3 Orientada a Objectes (Joan Arnedo Moreno)</li> <li>https://www.jetbrains.com</li> <li>ChatGPT</li> <li>DeepSeek</li> </ul>"},{"location":"indextabs.html","title":"\ud83d\ude80 Informaci\u00f3n importante","text":""},{"location":"indextabs.html#informacion-importante","title":"\ud83d\ude80 Informaci\u00f3n importante","text":""},{"location":"indextabs.html#denominacion-del-curso","title":"\ud83d\udcdb Denominaci\u00f3n del curso","text":"<p>\ud83d\udcda Ciclo formativo de Grado Superior en Desarrollo de Aplicaciones Multiplataforma</p> <p>\u2615 Programaci\u00f3n (PRG)</p>"},{"location":"indextabs.html#contenidos","title":"\ud83d\udccb Contenidos","text":"Horas Bloque P R I M E R   TRIMESTRE 92 B1 UD01: Elementos de un programa inform\u00e1tico 20 B2 UD02: Utilizaci\u00f3n de Objetos 18 PRUEBA UNIDADES 1 Y 2 4 B3 UD03: Estructuras de control y Excepciones 20 B4 UD04: Estructuras de datos Arrays y matrices. Recursividad 26 1<sup>a</sup> EVALUACI\u00d3N 4 S E G U N D O   TRIMESTRE 80 B5 UD05: Desarrollo de clases 26 B6 UD06: Lectura y escritura de informaci\u00f3n 24 B4 UD07: Colecciones y Funciones Lambda 26 2\u00aa EVALUACI\u00d3N 4 T E R C E R   TRIMESTRE 84 B8 UD08: Composici\u00f3n, Herencia y Polimorfismo 24 B9 UD09: Creaci\u00f3n de interfaces gr\u00e1ficas 10 B10 UD10: Acceso a Bases de datos 24 B11 UD11: BBDD OO 18 3\u00aa EVALUACI\u00d3N 4 CONVOCAT\u00d2RIA ORDIN\u00c0RIA 4 T O T A L 256"},{"location":"indextabs.html#resultados-de-aprendizaje-ra","title":"\ud83c\udfaf Resultados de Aprendizaje (RA)","text":"RA1RA2RA3RA4RA5RA6RA7RA8RA9 Descripci\u00f3 Pes AVA1 AVA2 AVA3 FEE T UNITAT Avaluaci\u00f3 RA1 Reconoce la estructura de un programa inform\u00e1tico, identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado. 10% A Se han identificado los bloques que componen la estructura de un programa inform\u00e1tico. 11% 100% 1 =[[1AVA]] B Se han creado proyectos de desarrollo de aplicaciones 11% 100% 2 =[[1AVA]] C Se han utilizado entornos integrados de desarrollo. 11% 50% 50% 2 =([[1AVA]]*0,5)+([[FEE]]*0,5) D Se han identificado los distintos tipos de variables y la utilidad espec\u00edfica de cada uno. 11% 20% 30% 50% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) E Se ha modificado el c\u00f3digo de un programa para crear y utilizar variables. 11% 20% 30% 50% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) F Se han creado y utilizado constantes y literales. 11% 20% 30% 50% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) G Se han clasificado, reconocido y utilizado en expresiones los operadores del lenguaje. 11% 20% 30% 50% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) H Se ha comprobado el funcionamiento de las conversiones de tipo expl\u00edcitas e impl\u00edcitas. 11% 20% 30% 50% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) I Se han introducido comentarios en el c\u00f3digo. 11% 20% 30% 50% 1 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) Descripci\u00f3 Pes AVA1 AVA2 AVA3 FEE T UNITAT Avaluaci\u00f3 RA2 Escribe y prueba programas sencillos, reconociendo y aplicando los fundamentos de la programaci\u00f3n orientada a objetos. 10% A Se han identificado los fundamentos de la programaci\u00f3n orientada a objetos. 11% 100% 2 =[[1AVA]] B Se han escrito programas simples. 11% 20% 30% 50% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) C Se han instanciado objetos a partir de clases predefinidas. 11% 20% 30% 50% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) D Se han utilizado m\u00e9todos y propiedades de los objetos. 11% 20% 30% 50% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) E Se han escrito llamadas a m\u00e9todos est\u00e1ticos. 11% 20% 30% 50% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) F Se han utilizado par\u00e1metros en la llamada a m\u00e9todos. 11% 20% 30% 50% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) G Se han incorporado y utilizado librer\u00edas de objetos. 11% 20% 30% 50% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) H Se han utilizado constructores. 11% 20% 30% 50% 2 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) I Se ha utilizado el entorno integrado de desarrollo en la creaci\u00f3n y compilaci\u00f3n de programas simples. 11% 5% 15% 30% 50% 2 =([[1AVA]]*0,05)+([[2AVA]]*0,15)+([[3AVA]]*0,30)+([[FEE]]*0,50) Descripci\u00f3 Pes AVA1 AVA2 AVA3 FEE T UNITAT Avaluaci\u00f3 RA3 Escribe y depura c\u00f3digo, analizando y utilizando las estructuras de control del lenguaje. 10% A Se ha escrito y probado c\u00f3digo que haga uso de estructuras de selecci\u00f3n. 11% 20% 30% 50% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) B Se han utilizado estructuras de repetici\u00f3n. 11% 20% 30% 50% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) C Se han reconocido las posibilidades de las sentencias de salto. 11% 20% 30% 50% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) D Se ha escrito c\u00f3digo utilizando control de excepciones. 11% 20% 30% 50% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) E Se han creado programas ejecutables utilizando diferentes estructuras de control. 11% 20% 30% 50% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) F Se han probado y depurado los programas. 11% 20% 30% 50% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) G Se ha comentado y documentado el c\u00f3digo. 11% 5% 15% 30% 50% 3 =([[1AVA]]*0,05)+([[2AVA]]*0,15)+([[3AVA]]*0,30)+([[FEE]]*0,50) H Se han creado excepciones. 11% 20% 30% 50% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) I Se han utilizado aserciones para la detecci\u00f3n y correcci\u00f3n de errores durante la fase de desarrollo. 11% 20% 30% 50% 3 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) Descripci\u00f3 Pes AVA1 AVA2 AVA3 FEE T UNITAT Avaluaci\u00f3 RA4 Desarrolla programas organizados en clases analizando y aplicando los principios de la programaci\u00f3n orientada a objetos. 10% A Se ha reconocido la sintaxis, estructura y componentes t\u00edpicos de una clase. 11% 50% 50% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) B Se han definido clases. 11% 50% 50% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) C Se han definido propiedades y m\u00e9todos. 11% 50% 50% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) D Se han creado constructores. 11% 50% 50% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) E Se han desarrollado programas que instancien y utilicen objetos de las clases creadas anteriormente. 11% 50% 50% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) F Se han utilizado mecanismos para controlar la visibilidad de las clases y de sus miembros. 11% 50% 50% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) G Se han definido y utilizado clases heredadas. 11% 50% 50% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) H Se han creado y utilizado m\u00e9todos est\u00e1ticos. 11% 50% 50% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) I Se han creado y utilizado conjuntos y librer\u00edas de clases. 11% 50% 50% 5 =([[2AVA]]*0,5)+([[3AVA]]*0,5) Descripci\u00f3 Pes AVA1 AVA2 AVA3 FEE T UNITAT Avaluaci\u00f3 RA5 Realiza operaciones de entrada y salida de informaci\u00f3n, utilizando procedimientos espec\u00edficos del lenguaje y librer\u00edas de clases. 15% A Se ha utilizado la consola para realizar operaciones de entrada y salida de informaci\u00f3n. 10% 5% 15% 30% 50% 6 =([[1AVA]]*0,05)+([[2AVA]]*0,15)+([[3AVA]]*0,30)+([[FEE]]*0,50) B Se han aplicado formatos en la visualizaci\u00f3n de la informaci\u00f3n. 10% 20% 30% 50% 6 =([[1AVA]]*0,2)+([[2AVA]]*0,3)+([[3AVA]]*0,5) C Se han reconocido las posibilidades de entrada / salida del lenguaje y las librer\u00edas asociadas. 10% 50% 50% 6 =([[2AVA]]*0,5)+([[3AVA]]*0,5) D Se han utilizado ficheros para almacenar y recuperar informaci\u00f3n. 10% 50% 50% 6 =([[2AVA]]*0,5)+([[3AVA]]*0,5) E Se han creado programas que utilicen diversos m\u00e9todos de acceso al contenido de los ficheros. 10% 50% 50% 6 =([[2AVA]]*0,5)+([[3AVA]]*0,5) F Se han utilizado las herramientas del entorno de desarrollo para crear interfaces gr\u00e1ficos de usuario simples. 20% 25% 50% 25% 9 '=([[3AVA]]*0,25)+([[FEE]]*0,50)+(([[UD09_T01]]*0,25)+([[UD09_T02]]*0,25)+([[UD09_T03]]*0,5)*0,25) G Se han programado controladores de eventos. 15% 40% 60% 9 '=([[3AVA]]*0,4)+(([[UD09_T01]]*0,25)+([[UD09_T02]]*0,25)+([[UD09_T03]]*0,5)*0,6) H Se han escrito programas que utilicen interfaces gr\u00e1ficos para la entrada y salida de informaci\u00f3n. 15% 40% 60% 9 '=([[3AVA]]*0,4)+(([[UD09_T01]]*0,25)+([[UD09_T02]]*0,25)+([[UD09_T03]]*0,5)*0,6) Descripci\u00f3 Pes AVA1 AVA2 AVA3 FEE T UNITAT Avaluaci\u00f3 RA6 Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos. 20% A Se han escrito programas que utilicen matrices (arrays). 50% 75% 25% 4 =([[2AVA]]*0,5)+([[3AVA]]*0,50) B Se han reconocido las librer\u00edas de clases relacionadas con tipos de datos avanzados. 5% 100% 7 =[[3AVA]] C Se han utilizado listas para almacenar y procesar informaci\u00f3n. 5% 100% 7 =[[3AVA]] D Se han utilizado iteradores para recorrer los elementos de las listas. 5% 100% 7 =[[3AVA]] E Se han reconocido las caracter\u00edsticas y ventajas de cada una de la colecciones de datos disponibles. 10% 100% 7 =[[3AVA]] F Se han creado clases y m\u00e9todos gen\u00e9ricos. 5% 100% 7 =[[3AVA]] G Se han utilizado expresiones regulares en la b\u00fasqueda de patrones en cadenas de texto. 5% 100% 7 =[[3AVA]] H Se han identificado las clases relacionadas con el tratamiento de documentos escritos en diferentes lenguajes de intercambio de datos. 5% 100% 7 =([[UD08_T01]]*0,5)+([[UD08_T02]]*0,5) I Se han realizado programas que realicen manipulaciones sobre documentos escritos en diferentes lenguajes de intercambio de datos. 5% 100% 7 =([[UD08_T01]]*0,5)+([[UD08_T02]]*0,5) J Se han utilizado operaciones agregadas para el manejo de informaci\u00f3n almacenada en colecciones. 5% 100% 7 =[[3AVA]] Descripci\u00f3 Pes AVA1 AVA2 AVA3 FEE T UNITAT Avaluaci\u00f3 RA7 Desarrolla programas aplicando caracter\u00edsticas avanzadas de los lenguajes orientados a objetos y del entorno de programaci\u00f3n. 10% A Se han identificado los conceptos de herencia, superclase y subclase. 10% 100% 8 =[[3AVA]] B Se han utilizado modificadores para bloquear y forzar la herencia de clases y m\u00e9todos. 10% 100% 8 =[[3AVA]] C Se ha reconocido la incidencia de los constructores en la herencia. 10% 100% 8 =[[3AVA]] D Se han creado clases heredadas que sobrescriban la implementaci\u00f3n de m\u00e9todos de la superclase. 10% 100% 8 =[[3AVA]] E Se han dise\u00f1ado y aplicado jerarqu\u00edas de clases. 10% 100% 8 =[[3AVA]] F Se han probado y depurado las jerarqu\u00edas de clases. 10% 100% 8 =[[3AVA]] G Se han realizado programas que implementen y utilicen jerarqu\u00edas de clases. 10% 100% 8 =[[3AVA]] H Se ha comentado y documentado el c\u00f3digo. 10% 50% 50% 8 =([[3AVA]]*0,50)+([[FEE]]*0,50) I Se han identificado y evaluado los escenarios de uso de interfaces. 10% 100% 8 =[[3AVA]] J Se han identificado y evaluado los escenarios de utilizaci\u00f3n de la herencia y la composici\u00f3n. 10% 100% 8 =[[3AVA]] Descripci\u00f3 Pes AVA1 AVA2 AVA3 FEE T UNITAT Avaluaci\u00f3 RA8 Utiliza bases de datos orientadas a objetos, analizando sus caracter\u00edsticas y aplicando t\u00e9cnicas para mantener la persistencia de la informaci\u00f3n. 5% A Se han identificado las caracter\u00edsticas de las bases de datos orientadas a objetos. 13% 100% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) B Se ha analizado su aplicaci\u00f3n en el desarrollo de aplicaciones mediante lenguajes orientados a objetos. 13% 100% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) C Se han instalado sistemas gestores de bases de datos orientados a objetos. 13% 100% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) D Se han clasificado y analizado los distintos m\u00e9todos soportados por los sistemas gestores para la gesti\u00f3n de la informaci\u00f3n almacenada. 13% 100% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) E Se han creado bases de datos y las estructuras necesarias para el almacenamiento de objetos. 13% 100% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) F Se han programado aplicaciones que almacenen objetos en las bases de datos creadas. 13% 100% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) G Se han realizado programas para recuperar, actualizar y eliminar objetos de las bases de datos. 13% 100% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) H Se han realizado programas para almacenar y gestionar tipos de datos estructurados, compuestos y relacionados. 13% 100% 11 =([[UD11_T1]]*0,3)+([[UD11_T2]]*0,7) Descripci\u00f3 Pes AVA1 AVA2 AVA3 FEE T UNITAT Avaluaci\u00f3 RA9 Gestiona informaci\u00f3n almacenada en bases de datos relacionales manteniendo la integridad y consistencia de los datos. 10% A Se han identificado las caracter\u00edsticas y m\u00e9todos de acceso a sistemas gestores de bases de datos relacionales. 14% 100% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) B Se han programado conexiones con bases de datos. 14% 100% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) C Se ha escrito c\u00f3digo para almacenar informaci\u00f3n en bases de datos. 14% 100% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) D Se han creado programas para recuperar y mostrar informaci\u00f3n almacenada en bases de datos. 14% 100% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) E Se han efectuado borrados y modificaciones sobre la informaci\u00f3n almacenada. 14% 100% 10 =([[UD10_T1]]*0,2)+([[UD10_T2]]*0,3)+([[UD10_T3]]*0,5) F Se han creado aplicaciones que muestren la informaci\u00f3n almacenada en bases de datos. 14% 50% 50% 10 =([[UD10_T1]]*0,05)+([[UD10_T2]]*0,15)+([[UD10_T3]]*0,3)+([[FEE]]*0,5) G Se han creado aplicaciones para gestionar la informaci\u00f3n presente en bases de datos relacionales. 14% 50% 50% 10 =([[UD10_T1]]*0,05)+([[UD10_T2]]*0,15)+([[UD10_T3]]*0,3)+([[FEE]]*0,5)"},{"location":"indextabs.html#legislacion-vigente","title":"\ud83d\udcdc Legislaci\u00f3n vigente","text":"<ul> <li>\ud83d\udcc4 RD 450/2010, BOE 20-05-2010 (Antigua ley)</li> <li>\ud83d\udcc4 RD 405/2023 29-05-2023</li> <li>\ud83d\udcc4 RD 500/2024, BOE 21-05-2024</li> <li>\ud83d\udcc4 Curr\u00edculum C.V.: ORDE 58/2012, de 5 de setembre (DOGV n\u00fam. 6868, 24.09.2012) (Antiguo)</li> <li>\ud83d\udcc4 Propuesta de Decreto del Consell</li> <li>\ud83d\udd52 Horario (Antigua ley)</li> <li>\ud83d\udd52 Horario</li> </ul>"},{"location":"indextabs.html#evaluacion","title":"\ud83d\udcdd Evaluaci\u00f3n","text":"<ul> <li> <p>\ud83d\udd0d La evaluaci\u00f3n del m\u00f3dulo se realizar\u00e1 con base en los Resultados de Aprendizaje (RA) definidos en el curr\u00edculo del ciclo formativo de Grado Superior en Desarrollo de Aplicaciones Multiplataforma. Cada RA estar\u00e1 asociado a criterios de evaluaci\u00f3n (CE) que ser\u00e1n los que determinen el grado de adquisici\u00f3n de las competencias previstas para el m\u00f3dulo.</p> </li> <li> <p>\ud83d\udcca La nota final del m\u00f3dulo se obtendr\u00e1 a partir de la ponderaci\u00f3n de los RA, como se mencion\u00f3 anteriormente. Cada RA ser\u00e1 evaluado de forma independiente, con calificaciones en una escala de 0 a 10.</p> </li> <li> <p>\u2705 El alumno debe obtener al menos una nota de 5 en cada RA para aprobar el m\u00f3dulo.</p> </li> <li> <p>\ud83d\udd04 Si un alumno obtiene menos de un 5 en alg\u00fan RA, tendr\u00e1 que recuperarlo mediante las actividades/ex\u00e1menes de recuperaci\u00f3n dise\u00f1adas espec\u00edficamente para esos resultados de aprendizaje.</p> </li> <li> <p>\ud83d\udccaEn programaci\u00f3n los primeros RA\u2019s se distribuyen entre las 3 evaluaciones, as\u00ed que tener una buena nota en la primera evaluaci\u00f3n no quiere decir que has aprobado los RA de esa evaluaci\u00f3n.</p> </li> <li> <p>\u2757NUEVO SISTEMA DUAL!! \u2192 Busca tu empresa! 120H (aproximadamente en el mes de mayo, tambi\u00e9n a partir del 2\u00ba trimestre por las ma\u00f1anas)</p> </li> </ul> <p>\u26a0\ufe0f IMPORTANTE:</p> <ul> <li>\u2757 Aprobar las distintas evaluaciones no garantiza aprobar el curso.</li> <li>\ud83d\udccc Puedes aprobar (y con muy buena nota) las dos evaluaciones, tener un <code>RA</code> suspendido y por tanto suspender el m\u00f3dulo.</li> </ul>"},{"location":"sobremi.html","title":"Sobre mi","text":""},{"location":"sobremi.html#sobre-mi","title":"\ud83d\udc4b Sobre m\u00ed...","text":""},{"location":"sobremi.html#david-martinez-pena","title":"\ud83e\uddd1\u200d\ud83d\udcbb David Martinez Pe\u00f1a","text":""},{"location":"sobremi.html#contacto","title":"\ud83d\udcec Contacto:","text":"<ul> <li>\ud83d\udce7 d.martinezpena@edu.gva.es</li> <li>\u25b6\ufe0f Youtube</li> <li>\ud83d\udcbc LinkedIn</li> <li>\ud83d\udc19 GitHub</li> </ul> <p>\ud83d\udc68\u200d\ud83c\udfeb Profesor de Secundaria, especialidad de Inform\u00e1tica.</p> <p>\ud83c\udfeb Actualmente con destino en IES Eduardo Primo Marqu\u00e9s de Carlet</p> <p>\ud83e\udd16 Modelos de Inteligencia Artificial \u00a9 2025   by  David Mart\u00ednez  is licensed under CC BY-NC-SA 4.0   </p>"},{"location":"UD01/UD01_ES.html","title":"Elementos de un programa inform\u00e1tico","text":""},{"location":"UD01/UD01_ES.html#elementos-de-un-programa-informatico","title":"Elementos de un programa inform\u00e1tico","text":""},{"location":"UD01/UD01_ES.html#piensa-como-un-programador","title":"Piensa como un programador","text":"<p>Una de las acepciones que trae el Diccionario de Real Academia de la Lengua Espa\u00f1ola (RAE) respecto a la palabra Problema es \u201cPlanteamiento de una situaci\u00f3n cuya respuesta desconocida debe obtenerse a trav\u00e9s de m\u00e9todos cient\u00edficos\u201d. Con miras a lograr esa respuesta, un problema se puede definir como una situaci\u00f3n en la cual se trata de alcanzar una meta y para lograrlo se deben hallar y utilizar unos medios y unas estrategias.</p> <p>La mayor\u00eda de problemas tienen algunos elementos en com\u00fan: un estado inicial; una meta, lo que se pretende lograr; un conjunto de recursos, lo que est\u00e1 permitido hacer y/o utilizar; y un dominio, el estado actual de conocimientos, habilidades y energ\u00eda de quien va a resolverlo (Moursund, 1999).</p> <p>Casi todos los problemas requieren, que quien los resuelve, los divida en submetas que, cuando son dominadas (por lo regular en orden), llevan a alcanzar el objetivo. La soluci\u00f3n de problemas tambi\u00e9n requiere que se realicen operaciones durante el estado inicial y las submetas, actividades (conductuales, cognoscitivas) que alteran la naturaleza de tales estados (Schunk, 1997).</p> <p>Cada disciplina dispone de estrategias espec\u00edficas para resolver problemas de su \u00e1mbito; por ejemplo, resolver problemas matem\u00e1ticos implica utilizar estrategias propias de las matem\u00e1ticas. Sin embargo, algunos psic\u00f3logos opinan que es posible utilizar con \u00e9xito estrategias generales, \u00fatiles para resolver problemas en muchas \u00e1reas. A trav\u00e9s del tiempo, la humanidad ha utilizado diversas estrategias generales para resolver problemas. Schunk (1997), Woolfolk (1999) y otros, destacan los siguientes m\u00e9todos o estrategias de tipo general:</p> <ul> <li>Ensayo y error : Consiste en actuar hasta que algo funcione. Puede tomar mucho tiempo y no es seguro que se llegue a una soluci\u00f3n. Es una estrategia apropiada cuando las soluciones posibles son pocas y se pueden probar todas, empezando por la que ofrece mayor probabilidad de resolver el problema.</li> </ul> <p>Por ejemplo, una bombilla que no prende: revisar la bombilla, verificar la corriente el\u00e9ctrica, verificar el interruptor.</p> <ul> <li>Iluminaci\u00f3n : Implica la s\u00fabita conciencia de una soluci\u00f3n que sea viable. Es muy utilizado el modelo de cuatro pasos formulado por Wallas (1921): preparaci\u00f3n, incubaci\u00f3n, iluminaci\u00f3n y verificaci\u00f3n.</li> </ul> <p>Estos cuatro momentos tambi\u00e9n se conocen como proceso creativo. Algunas investigaciones han determinado que cuando en el periodo de incubaci\u00f3n se incluye una interrupci\u00f3n en el trabajo sobre un problema se logran mejores resultados desde el punto de vista de la creatividad. La incubaci\u00f3n ayuda a \"olvidar\" falsas pistas, mientras que no hacer interrupciones o descansos puede hacer que la persona que trata de encontrar una soluci\u00f3n creativa se estanque en estrategias inapropiadas.</p> <p>Ejemplos: </p> <ul> <li> <p>Dispones de 6 lapices/palillos/cerillas igual de largos, \u00bfcomo puedes formar 4 tri\u00e1ngulos iguales y equil\u00e1teros?</p> </li> <li> <p>Mueve 2 cerillas para seguir teniendo una copa pero con la cereza fuera:</p> <p></p> </li> <li> <p>Heur\u00edstica : Se basa en la utilizaci\u00f3n de reglas emp\u00edricas para llegar a una soluci\u00f3n. El m\u00e9todo heur\u00edstico conocido como \u201cIDEAL\u201d, formulado por Bransford y Stein (1984), incluye cinco pasos:   Identificar el problema; definir y presentar el problema; explorar las estrategias viables; avanzar en las estrategias; y lograr la soluci\u00f3n y volver para evaluar los efectos de las actividades (Bransford &amp; Stein, 1984). </p> </li> </ul> <p>El matem\u00e1tico Polya (1957) tambi\u00e9n formul\u00f3 un m\u00e9todo heur\u00edstico para resolver problemas que se aproxima mucho al ciclo utilizado para programar computadores. A lo largo de esta Gu\u00eda se utilizar\u00e1 este m\u00e9todo propuesto por Polya.</p> <ul> <li> <p>Algoritmos : Consiste en aplicar adecuadamente una serie de pasos detallados que aseguran una soluci\u00f3n correcta. Por lo general, cada algoritmo es espec\u00edfico de un dominio del conocimiento. La programaci\u00f3n de computadores se apoya en este m\u00e9todo.</p> </li> <li> <p>Modelo de procesamiento de informaci\u00f3n : El modelo propuesto por Newell y Simon (1972) se basa en plantear varios momentos para un problema (estado inicial, estado final y v\u00edas de soluci\u00f3n). Las posibles soluciones avanzan por subtemas y requieren que se realicen operaciones en cada uno de ellos.</p> </li> <li> <p>An\u00e1lisis de medios y fines : Se funda en la comparaci\u00f3n del estado inicial con la meta que se pretende alcanzar para identificar las diferencias. </p> </li> </ul> <p>Luego se establecen submetas y se aplican las operaciones necesarias para alcanzar cada submeta hasta que se alcance la meta global. Con este m\u00e9todo se puede proceder en retrospectiva (desde la meta hacia el estado inicial) o en prospectiva (desde el estado inicial hacia la meta).</p> <ul> <li> <p>Razonamiento anal\u00f3gico : Se apoya en el establecimiento de una analog\u00eda entre una situaci\u00f3n que resulte familiar y la situaci\u00f3n problema. Requiere conocimientos suficientes de ambas situaciones.</p> </li> <li> <p>Lluvia de ideas : Consiste en formular soluciones viables a un problema. El modelo propuesto por Mayer (1992) plantea: definir el problema; generar muchas soluciones (sin evaluarlas); decidir los criterios para estimar las soluciones generadas; y emplear esos criterios para seleccionar la mejor soluci\u00f3n. Requiere que los estudiantes no emitan juicios con respecto a las posibles soluciones hasta que terminen de formularlas.</p> </li> <li> <p>Sistemas de producci\u00f3n : Se basa en la aplicaci\u00f3n de una red de secuencias de condici\u00f3n y acci\u00f3n (Anderson, 1990). </p> </li> <li> <p>Pensamiento lateral : Se apoya en el pensamiento creativo, formulado por Edwar de Bono (1970), el cual difiere completamente del pensamiento lineal (l\u00f3gico). El pensamiento lateral requiere que se exploren y consideren la mayor cantidad posible de alternativas para solucionar un problema. Su importancia para la educaci\u00f3n radica en permitir que el estudiante: explore (escuche y acepte puntos de vista diferentes, busque alternativas); avive (promueva el uso de la fantas\u00eda y del humor); libere (use la discontinuidad y escape de ideas preestablecidas); y contrarreste la rigidez (vea las cosas desde diferentes \u00e1ngulos y evite dogmatismos). Este es un m\u00e9todo adecuado cuando el problema que se desea resolver no requiere informaci\u00f3n adicional, sino un reordenamiento de la informaci\u00f3n disponible; cuando hay ausencia del problema y es necesario apercibirse de que hay un problema; o cuando se debe reconocer la posibilidad de perfeccionamiento y redefinir esa posibilidad como un problema (De Bono, 1970).</p> </li> </ul> <p>Ejemplos:</p> <ul> <li> <p>El dilema del n\u00e1ufrago. Un n\u00e1ufrago necesita trasladar a su isla de residencia algunos restos del naufragio de su barco, que afloraron en la orilla de la isla de enfrente. All\u00ed tiene un zorro, un conejo y un racimo de zanahorias, que en su bote puede llevar a raz\u00f3n de uno por viaje. \u00bfC\u00f3mo puede llevarlo todo a su isla, sin que el zorro se coma al conejo, ni \u00e9ste a las zanahorias?</p> <p>Respuesta: Deber\u00e1 llevar primero al conejo y dejar al zorro con las zanahorias. Luego volver y llevarse al zorro, que dejar\u00e1 a solas en su isla, tomar al conejo y llevarlo de vuelta a la de enfrente. Despu\u00e9s llevar\u00e1 las zanahorias, dejando al conejo solo y deposit\u00e1ndolas junto al zorro. Finalmente regresar\u00e1 para hacer un \u00faltimo viaje con el conejo.</p> </li> <li> <p>El dilema del ascensor. Un hombre que vive en el d\u00e9cimo piso de un edificio, toma todos los d\u00edas el ascensor hasta la planta baja, para ir a trabajar. En la tarde, sin embargo, toma de nuevo el mismo ascensor, pero si no hay nadie con \u00e9l, baja en el s\u00e9ptimo piso y sube el resto de los pisos por la escalera. \u00bfPor qu\u00e9?</p> <p>Respuesta: El hombre es bajito y no logra presionar el bot\u00f3n del d\u00e9cimo piso.</p> </li> <li> <p>La paradoja del globo. \u00bfDe qu\u00e9 manera podemos pinchar un globo con una aguja, sin que se fugue el aire y sin que el globo estalle?</p> <p>Respuesta: Debemos pinchar el globo estando desinflado.</p> </li> <li> <p>El dilema del bar. Un hombre entra a un bar y le pide al barman un vaso de agua. El barman busca debajo de la barra y de golpe apunta al hombre con un arma. Este \u00faltimo da las gracias y se marcha. \u00bfQu\u00e9 acaba de ocurrir?</p> <p>Respuesta: El barman se percat\u00f3 de que el hombre ten\u00eda hipo, y decide cur\u00e1rselo d\u00e1ndole un buen susto.</p> </li> </ul> <p>Como se puede apreciar, hay muchas estrategias para solucionar problemas; sin embargo, esta Gu\u00eda se enfoca principalmente en dos de estas estrategias: Heur\u00edstica y Algor\u00edtmica.</p> <p>Seg\u00fan Polya (1957), cuando se resuelven problemas, intervienen cuatro operaciones mentales:</p> <ol> <li>Entender el problema;</li> <li>Trazar un plan;</li> <li>Ejecutar el plan (resolver);</li> <li>Revisar;</li> </ol> <p>Es importante notar que estas son flexibles y no una simple lista de pasos como a menudo se plantea en muchos de esos textos (Wilson, Fern\u00e1ndez &amp; Hadaway, 1993). Cuando estas etapas se siguen como un modelo lineal, resulta contraproducente para cualquier actividad encaminada a resolver problemas.</p> <p>Es necesario hacer \u00e9nfasis en la naturaleza din\u00e1mica y c\u00edclica de la soluci\u00f3n de problemas. En el intento de trazar un plan, los estudiantes pueden concluir que necesitan entender mejor el problema y deben regresar a la etapa anterior; O cuando han trazado un plan y tratan de ejecutarlo, no encuentran c\u00f3mo hacerlo; entonces, la actividad siguiente puede ser intentar con un nuevo plan o regresar y desarrollar una nueva comprensi\u00f3n del problema (Wilson, Fern\u00e1ndez &amp; Hadaway, 1993; Guzdial, 2000).</p> <p>La mayor\u00eda de los textos escolares de matem\u00e1ticas abordan la Soluci\u00f3n de Problemas bajo el enfoque planteado por Polya. Por ejemplo, en \u201cRecreo Matem\u00e1tico 5\u201d (D\u00edaz, 1993) y en \u201cDominios 5\u201d (Melo, 2001) se pueden identificar las siguientes sugerencias propuestas a los estudiantes para llegar a la soluci\u00f3n de un problema matem\u00e1tico:</p> <ol> <li> <p>COMPRENDER EL PROBLEMA.</p> <ul> <li>Leer el problema varias veces</li> <li>Establecer los datos del problema (\u00bfmarcarlos de alguna manera?)</li> <li>Aclarar lo que se va a resolver (\u00bfCu\u00e1l es la pregunta?)</li> <li>Precisar el resultado que se desea lograr</li> <li>Determinar la inc\u00f3gnita del problema</li> <li>Organizar la informaci\u00f3n</li> <li>Agrupar los datos en categor\u00edas</li> <li>Trazar una figura o diagrama.</li> </ul> </li> <li> <p>HACER EL PLAN.</p> <ul> <li>Escoger y decidir las operaciones a efectuar.</li> <li>Eliminar los datos in\u00fatiles.</li> <li>Descomponer el problema en otros m\u00e1s peque\u00f1os.</li> </ul> </li> <li> <p>EJECUTAR EL PLAN (Resolver).</p> <ul> <li>Ejecutar en detalle cada operaci\u00f3n.</li> <li>Simplificar antes de calcular.</li> <li>Realizar un dibujo o diagrama</li> </ul> </li> <li> <p>ANALIZAR LA SOLUCI\u00d3N (Revisar).</p> <ul> <li>Dar una respuesta completa</li> <li>Hallar el mismo resultado de otra manera.</li> <li>Verificar por apreciaci\u00f3n que la respuesta es adecuada.</li> </ul> </li> </ol> <p>Numerosos autores de libros sobre programaci\u00f3n, plantean cuatro fases para elaborar un procedimiento que realice una tarea espec\u00edfica. Estas fases concuerdan con las operaciones mentales descritas por Polya para resolver problemas:</p> <ol> <li>Analizar el problema (Entender el problema)</li> <li>Dise\u00f1ar un algoritmo (Trazar un plan)</li> <li>Traducir el algoritmo a un lenguaje de programaci\u00f3n (Ejecutar el plan)</li> <li>Depurar el programa (Revisar)</li> </ol> <p>Como se puede apreciar, hay una similitud entre las metodolog\u00edas propuestas para solucionar problemas matem\u00e1ticos (Clements &amp; Meredith, 1992; D\u00edaz, 1993; Melo, 2001; NAP, 2004) y las cuatro fases para solucionar problemas espec\u00edficos de \u00e1reas diversas, mediante la programaci\u00f3n de computadores.</p> <p>Problema de la Jirafa</p> <p>Primera pregunta: \u00bfC\u00f3mo podr\u00edamos meter una jirafa dentro de una nevera? Piensa que es un problema para ni\u00f1os y a ellos no se les pasar\u00eda por la cabeza trocear al bello animal para resolver un problema.</p> <p>Segunda pregunta: Repetimos la jugada con distinto protagonista. \u00bfC\u00f3mo metemos un elefante dentro de la nevera?</p> <p>Tercera pregunta: Imaginemos que el Rey Le\u00f3n est\u00e1 celebrando su cumplea\u00f1os y ha invitado a todos los animales del reino. Acuden todos excepto uno. \u00bfQui\u00e9n falta?</p> <p>Cuarta pregunta: Estamos frente a un r\u00edo que debemos cruzar como sea para continuar nuestro camino. El \u00fanico problema es que esa zona es el hogar de unos cocodrilos muy agresivos y no disponemos de ning\u00fan tipo de embarcaci\u00f3n para ir al otro lado. \u00bfC\u00f3mo har\u00edas para cruzar el r\u00edo sin morir en el intento?</p>"},{"location":"UD01/UD01_ES.html#problemas-algoritmos-y-programas","title":"Problemas, algoritmos y programas","text":""},{"location":"UD01/UD01_ES.html#problemas","title":"Problemas","text":"<p>Podr\u00edamos decir que la programaci\u00f3n es una forma de resoluci\u00f3n de problemas.</p> <p>Para que un problema pueda resolverse utilizando un programa inform\u00e1tico, \u00e9ste tiene que poder resolverse de forma mec\u00e1nica, es decir, mediante una secuencia de instrucciones u operaciones que se puedan llevar a cabo de manera autom\u00e1tica por un ordenador.</p> <p>Ejemplos de problemas resolubles mediante un ordenador:</p> <ul> <li>Determinar el producto de dos n\u00fameros a y b.</li> <li>Determinar la ra\u00edz cuadrada positiva del n\u00famero 2.</li> <li>Determinar la ra\u00edz cuadrada positiva de un n\u00famero n cualquiera.</li> <li>Determinar si el n\u00famero n, entero mayor que uno, es primo.</li> <li>Dada la lista de palabras, determinar las palabras repetidas.</li> <li>Determinar si la palabra p es del idioma castellano.</li> <li>Ordenar y listar alfab\u00e9ticamente todas las palabras del castellano.</li> <li>Dibujar en pantalla un c\u00edrculo de radio r.</li> <li>Separar las silabas de una palabra p.</li> <li>A partir de la fotograf\u00eda de un veh\u00edculo, reconocer y leer su matr\u00edcula.</li> <li>Traducir un texto de castellano a ingl\u00e9s.</li> <li>Detectar posibles tumores a partir de im\u00e1genes radiogr\u00e1ficas.</li> </ul> <p>Por otra parte, el cient\u00edfico Alan Turing, demostr\u00f3 que existen problemas irresolubles, de los que ning\u00fan ordenador ser\u00e1 capaz de obtener nunca su soluci\u00f3n.</p> <p>Los problemas deben definirse de forma general y precisa, evitando ambig\u00fcedades.</p> <p>Ejemplo: Ra\u00edz cuadrada.</p> <ul> <li>Determinar la ra\u00edz cuadrada de un n\u00famero n.</li> <li>Determinar la ra\u00edz cuadrada de un n\u00famero n, entero no negativo, cualquiera.</li> </ul> <p>Ejemplo: Dividir.</p> <ul> <li>Calcular la divisi\u00f3n de dos n\u00fameros de dos n\u00fameros a y b.</li> <li>Calcular el cociente entero de la divisi\u00f3n a/b, donde a y b son n\u00fameros enteros y b es   distinto de cero. (5/2 = 2).</li> <li>Calcular el cociente real de la divisi\u00f3n a/b, donde a y b son n\u00fameros reales y b es   distinto de cero (5/2 = 2.5).</li> </ul>"},{"location":"UD01/UD01_ES.html#algoritmos","title":"Algoritmos","text":"<p>Dado un problema P, un algoritmo es un conjunto de reglas o pasos que indican c\u00f3mo resolver P en un tiempo finito.</p> <p>Secuencias de reglas b\u00e1sicas que utilizamos para realizar operaciones aritm\u00e9ticas: sumas, restas, productos y divisiones.</p> <p>Algoritmo para desayunar</p> <pre><code>Begin\n   Sentarse\n   Servirse caf\u00e9 con leche\n   Servirse azucar\n   If tengo tiempo\n       While tenga apetito\n           Untar mantequilla en una tostada\n           A\u00f1adir mermelada\n           Comer la tostada\n       End While\n   End If\n   Beberse el caf\u00e9 con leche\n   Levantarse\nEnd\n</code></pre> <p>Un algoritmo, por tanto, no es m\u00e1s que la secuencia de pasos que se deben seguir para solucionar un problema espec\u00edfico. La descripci\u00f3n o nivel de detalle de la soluci\u00f3n de un problema en t\u00e9rminos algor\u00edtmicos depende de qu\u00e9 o qui\u00e9n debe entenderlo, interpretarlo y resolverlo.</p> <p>Los algoritmos son independientes de los lenguajes de programaci\u00f3n y de las computadoras donde se ejecutan. Un mismo algoritmo puede ser expresado en diferentes lenguajes de programaci\u00f3n y podr\u00eda ser ejecutado en diferentes dispositivos. Piensa en una receta de cocina, \u00e9sta puede ser expresada en castellano, ingl\u00e9s o franc\u00e9s, podr\u00eda ser cocinada en fog\u00f3n o vitrocer\u00e1mica, por un cocinero o m\u00e1s, etc. Pero independientemente de todas estas circunstancias, el plato se preparar\u00e1 siguiendo los mismos pasos.</p> <p>La diferencia fundamental entre algoritmo y programa es que, en el segundo, los pasos que permiten resolver el problema, deben escribirse en un determinado lenguaje de programaci\u00f3n para que puedan ser ejecutados en el ordenador y as\u00ed obtener la soluci\u00f3n.</p>"},{"location":"UD01/UD01_ES.html#caracteristicas-de-los-algoritmos","title":"Caracter\u00edsticas de los algoritmos","text":"<p>Un algoritmo, para que sea v\u00e1lido, tiene que tener ciertas caracter\u00edsticas fundamentales:</p> <ul> <li>Generalidad: han de definirse de forma general, utilizando identificadores o par\u00e1metros. Un algoritmo debe resolver toda una clase de problemas y no un problema aislado particular.</li> <li>Finitud: han de llevarse a cabo en un tiempo finito, es decir, el algoritmo ha de acabar necesariamente tras un n\u00famero finito de pasos.</li> <li>Definibilidad: han de estar definidos de forma exacta y precisa, sin ambig\u00fcedades.</li> <li>Eficiencia: han de resolver el problema de forma r\u00e1pida y eficiente.</li> </ul> <p>Juego de las monedas (Eduardo S\u00e1enz Cabez\u00f3n)</p> <p></p> <p>Desde el comienzo del enlace hasta 7 minutos despu\u00e9s.</p>"},{"location":"UD01/UD01_ES.html#representacion-de-algoritmos","title":"Representaci\u00f3n de algoritmos","text":"<p>Los m\u00e9todos m\u00e1s usuales para representar algoritmos son los diagramas de flujo y el pseudoc\u00f3digo. Ambos son sistemas de representaci\u00f3n independientes de cualquier lenguaje de programaci\u00f3n. Hay que tener en cuenta que el dise\u00f1o de un algoritmo constituye un paso previo a la codificaci\u00f3n de un programa en un lenguaje de programaci\u00f3n determinado (C, C++, Java, Pascal). La independencia del algoritmo del lenguaje de programaci\u00f3n facilita, precisamente, la posterior codificaci\u00f3n en el lenguaje elegido.</p> <p>Un Diagrama de flujo (Flowchart) es una de las t\u00e9cnicas de representaci\u00f3n de algoritmos m\u00e1s antiguas y m\u00e1s utilizadas, aunque su empleo disminuy\u00f3 considerablemente con los lenguajes de programaci\u00f3n estructurados. Un diagrama de flujo utiliza s\u00edmbolos est\u00e1ndar que contienen los pasos del algoritmo escritos en esos s\u00edmbolos, unidos por flechas denominadas l\u00edneas de flujo que indican la secuencia en que deben ejecutarse.</p> <p>Los s\u00edmbolos m\u00e1s utilizados son:</p> <p></p> <p>Ejemplo: Mostrar dos n\u00fameros ordenados de menor a mayor.</p> <p></p><pre><code>graph TD\n  A(Inicio)\n  A --&gt; B[a, b]\n  B --&gt; C{a &gt; b ?}\n  C --&gt;|Si| D[b, a]\n  C --&gt;|No| E[a, b]\n  D --&gt; F(Fin)\n  E --&gt; F</code></pre> O tambi\u00e9n en otra representaci\u00f3n: <p></p> <p>El pseudoc\u00f3digo es un lenguaje de descripci\u00f3n de algoritmos que est\u00e1 muy pr\u00f3ximo a la sintaxis que utilizan los lenguajes de programaci\u00f3n. Nace como medio para representar las estructuras de control de programaci\u00f3n estructurada.</p> <p>El pseudoc\u00f3digo no se puede ejecutar nunca en el ordenador, sino que tiene que traducirse a un lenguaje de programaci\u00f3n (codificaci\u00f3n). La ventaja del pseudoc\u00f3digo, frente a los diagramas de flujo, es que se puede modificar m\u00e1s f\u00e1cilmente si detecta un error en la l\u00f3gica del algoritmo, y puede ser traducido f\u00e1cilmente a los lenguajes estructurados como Pascal, C, fortran, Java, etc.</p> <p>El Pseudoc\u00f3digo utiliza palabras reservadas (en sus or\u00edgenes se escrib\u00edan en ingl\u00e9s) para representar las sucesivas acciones. Para mayor legibilidad utiliza la identaci\u00f3n (sangr\u00eda en el margen izquierdo) de sus l\u00edneas.</p> <p>Ejemplo: Mostrar dos n\u00fameros ordenados de menor a mayor.</p> <pre><code>Begin\n    Leer (A, B)\n    If (A&gt;B) then\n        Escribir (B, A)\n    Else\n        Escribir (A, B)\n    End If\nEnd\n</code></pre>"},{"location":"UD01/UD01_ES.html#programas","title":"Programas","text":"<p>La diferencia fundamental entre algoritmo y programa es que, en el segundo, los pasos que permiten resolver el problema, deben escribirse en un determinado lenguaje de programaci\u00f3n para que puedan ser ejecutados en el ordenador y as\u00ed obtener la soluci\u00f3n.</p> <p>Los lenguajes de programaci\u00f3n son s\u00f3lo un medio para expresar el algoritmo y el ordenador un procesador para ejecutarlo. El dise\u00f1o de los algoritmos ser\u00e1 una tarea que necesitar\u00e1 de la creatividad y conocimientos de las t\u00e9cnicas de programaci\u00f3n. Estilos distintos, de distintos programadores a la hora de obtener la soluci\u00f3n del problema, dar\u00e1n lugar a programas diferentes, igualmente v\u00e1lidos.</p> <p>Pero cuando los problemas son complejos, es necesario descomponer \u00e9stos en subproblemas m\u00e1s simples y, a su vez, en otros m\u00e1s peque\u00f1os. Estas estrategias reciben el nombre de dise\u00f1o descendente (Metodolog\u00eda de dise\u00f1o de programas, consistente en la descomposici\u00f3n del problema en problemas m\u00e1s sencillos de resolver) o dise\u00f1o modular (top\u2010down design) (Metodolog\u00eda de dise\u00f1o de programas, que consiste en dividir la soluci\u00f3n a un problema en m\u00f3dulos m\u00e1s peque\u00f1os o subprogramas. Las soluciones de los m\u00f3dulos se unir\u00e1n para obtener la soluci\u00f3n general del problema). Este sistema se basa en el lema divide y vencer\u00e1s.</p>"},{"location":"UD01/UD01_ES.html#java","title":"Java","text":""},{"location":"UD01/UD01_ES.html#que-y-como-es-java","title":"\u00bfQu\u00e9 y c\u00f3mo es Java?","text":"<p>Java es un lenguaje sencillo de aprender, con una sintaxis parecida a la de C++, pero en la que se han eliminado elementos complicados y que pueden originar errores. Java es orientado a objetos, con lo que elimina muchas preocupaciones al programador y permite la utilizaci\u00f3n de gran cantidad de bibliotecas ya definidas, evitando reescribir c\u00f3digo que ya existe. Es un lenguaje de programaci\u00f3n creado para satisfacer nuevas necesidades que los lenguajes existentes hasta el momento no eran capaces de solventar.</p> <p>Una de las principales virtudes de Java es su independencia del hardware, ya que el c\u00f3digo que se genera es v\u00e1lido para cualquier plataforma. Este c\u00f3digo ser\u00e1 ejecutado sobre una m\u00e1quina virtual denominada Maquina Virtual Java (MVJ o JVM \u2013 Java Virtual Machine), que interpretar\u00e1 el c\u00f3digo convirti\u00e9ndolo a c\u00f3digo espec\u00edfico de la plataforma que lo soporta. De este modo el programa se escribe una \u00fanica vez y puede hacerse funcionar en cualquier lugar. Lema del lenguaje: \"Write once, run everywhere\".</p> <p>Antes de que apareciera Java, el lenguaje C era uno de los m\u00e1s extendidos por su versatilidad. Pero cuando los programas escritos en C aumentaban de volumen, su manejo comenzaba a complicarse. Mediante las t\u00e9cnicas de programaci\u00f3n estructurada y programaci\u00f3n modular se consegu\u00edan reducir estas complicaciones, pero no era suficiente.</p> <p>Fue entonces cuando la Programaci\u00f3n Orientada a Objetos (POO) entra en escena, aproximando notablemente la construcci\u00f3n de programas al pensamiento humano y haciendo m\u00e1s sencillo todo el proceso. Los problemas se dividen en objetos que tienen propiedades e interact\u00faan con otros objetos, de este modo, el programador puede centrarse en cada objeto para programar internamente los elementos y funciones que lo componen.</p> <p>Las caracter\u00edsticas principales de lenguaje Java se resumen a continuaci\u00f3n:</p> <ul> <li>El c\u00f3digo generado por el compilador Java es independiente de la arquitectura.</li> <li>Est\u00e1 totalmente orientado a objetos.</li> <li>Su sintaxis es similar a C y C++.</li> <li>Es distribuido, preparado para aplicaciones TCP/IP.</li> <li>Dispone de un amplio conjunto de bibliotecas.</li> <li>Es robusto, realizando comprobaciones del c\u00f3digo en tiempo de compilaci\u00f3n y de ejecuci\u00f3n.</li> <li>La seguridad est\u00e1 garantizada, ya que las aplicaciones Java no acceden a zonas delicadas de   memoria o de sistema. (ejem, ejem!)</li> </ul>"},{"location":"UD01/UD01_ES.html#breve-historia","title":"Breve historia.","text":"<p>Java surgi\u00f3 en 1991 cuando un grupo de ingenieros de Sun Microsystems trataron de dise\u00f1ar un nuevo lenguaje de programaci\u00f3n destinado a programar peque\u00f1os dispositivos electr\u00f3nicos. La dificultad de estos dispositivos es que cambian continuamente y para que un programa funcione en el siguiente dispositivo aparecido, hay que reescribir el c\u00f3digo. Por eso la empresa Sun quer\u00eda crear un lenguaje independiente del dispositivo.</p> <p>Pero no fue hasta 1995 cuando pas\u00f3 a llamarse Java, d\u00e1ndose a conocer al p\u00fablico como lenguaje de programaci\u00f3n para computadores. Java pasa a ser un lenguaje totalmente independiente de la plataforma y a la vez potente y orientado a objetos. Esa filosof\u00eda y su facilidad para crear aplicaciones para redes TCP/IP ha hecho que sea uno de los lenguajes m\u00e1s utilizados en la actualidad.</p> <p>El factor determinante para su expansi\u00f3n fue la incorporaci\u00f3n de un int\u00e9rprete Java en la versi\u00f3n 2.0 del navegador Web Netscape Navigator, lo que supuso una gran revuelo en Internet. A principios de 1997 apareci\u00f3 Java 1.1 que proporcion\u00f3 sustanciales mejoras al lenguaje. Java 1.2, m\u00e1s tarde rebautizado como Java 2, naci\u00f3 a finales de 1998.</p> <p>El principal objetivo del lenguaje Java es llegar a ser el nexo universal que conecte a los usuarios con la informaci\u00f3n, est\u00e9 \u00e9sta situada en el ordenador local, en un servidor Web, en una base de datos o en cualquier otro lugar.</p> <p>Para el desarrollo de programas en lenguaje Java es necesario utilizar un entorno de desarrollo denominado JDK (Java Development Kit), que provee de un compilador y un entorno de ejecuci\u00f3n (JRE \u2013 Java RunEnvironment) para los bytecodes generados a partir del c\u00f3digo fuente. Al igual que las diferentes versiones del lenguaje han incorporado mejoras, el entorno de desarrollo y ejecuci\u00f3n tambi\u00e9n ha sido mejorado sucesivamente.</p> <p>Java 2 es la tercera versi\u00f3n del lenguaje, pero es algo m\u00e1s que un lenguaje de programaci\u00f3n, incluye los siguientes elementos:</p> <ul> <li>Un lenguaje de programaci\u00f3n: Java.</li> <li>Un conjunto de bibliotecas est\u00e1ndar que vienen incluidas en la plataforma y que son necesarias en todo entorno Java. Es el Java Core.</li> <li>Un conjunto de herramientas para el desarrollo de programas, como es el compilador de bytecodes, el generador de documentaci\u00f3n, un depurador, etc.</li> <li>Un entorno de ejecuci\u00f3n que en definitiva es una m\u00e1quina virtual que ejecuta los programas traducidos a bytecodes.</li> </ul>"},{"location":"UD01/UD01_ES.html#compilar-y-ejecutar-un-programa-java-uso-de-la-consola","title":"Compilar y ejecutar un programa <code>Java</code>. Uso de la consola.","text":"<p>Veamos los pasos para compilar e interpretar nuestro primer programa escrito en lenguaje Java.</p>"},{"location":"UD01/UD01_ES.html#estructura-y-bloques-fundamentales-de-un-programa","title":"Estructura y bloques fundamentales de un programa.","text":"<p>Ejemplo Holamundo.java</p> <pre><code>public class Holamundo {\n    // programa Hola Mundo\n    public static void main(String[] args) {\n        /* lo \u00fanico que hace este programa es mostrar\n            la cadena \"Hola Mundo!\" por pantalla */\n        System.out.println(\"Hola Mundo!\");\n    }\n}\n</code></pre> <p>En Java generalmente una clase lleva el identificador public y corresponde con un fichero. El nombre de la clase coincide con el del fichero <code>.java</code> respetando may\u00fasculas y min\u00fasculas.</p> <pre><code>public class Holamundo {\n    [...]\n}\n</code></pre> <p>El c\u00f3digo java en las clases se agrupa en funciones o m\u00e9todos. Cuando java ejecuta el c\u00f3digo de una clase busca la funci\u00f3n o m\u00e9todo <code>main()</code> para ejecutarla. Es p\u00fablico (<code>public</code>) est\u00e1tico (<code>static</code>) para llamarlo sin instanciar la clase. No devuelve ning\u00fan valor (<code>void</code>) y admite par\u00e1metros (<code>Strings[] args</code>) que en este caso no se han utilizado.</p> <pre><code>[...]\n    public static void main (String[] args)\n    {\n        [...]\n    }\n[...]\n</code></pre> <p>El c\u00f3digo de la funci\u00f3n <code>main</code> se escribe entre las llaves. Por ejemplo:</p> <pre><code>[...]\n        System.out.println(\"Hola Mundo\");\n[...]\n</code></pre> <p>Muestra por pantalla el mensaje <code>Hola Mundo</code>, ya que la clase <code>System</code> tiene un atributo <code>out</code> con dos m\u00e9todos: <code>print()</code> y <code>println()</code>. La diferencia es que <code>println</code> muestra mensaje e introduce un retorno de carro.</p> <p>Todas las instrucciones menos las llaves <code>{</code> <code>}</code> terminan con punto y coma ( <code>;</code> ) .</p>"},{"location":"UD01/UD01_ES.html#sangrado-o-tabulado","title":"Sangrado o tabulado","text":"<p>El sangrado (tambi\u00e9n conocido como tabulado) deber\u00e1 aplicarse a toda estructura que est\u00e9 l\u00f3gicamente contenida dentro de otra. El sangrado ser\u00e1 de un tabulador. Es suficiente entre 2 y 4 espacios. Para alguien que empieza a programar suele ser preferible unos 4 espacios, ya que se ve todo m\u00e1s claro.</p> <p>Las l\u00edneas no tendr\u00e1n en ning\u00fan caso demasiados caracteres que impidan que se pueda leer en una pantalla. Un n\u00famero m\u00e1ximo recomendable suele estar entre unos 70 y 90 caracteres, incluyendo los espacios de sangrado. Si una l\u00ednea debe ocupar m\u00e1s caracteres, tiene que dividirse en dos o m\u00e1s l\u00edneas, para ello utiliza los siguientes principios para realizar la divisi\u00f3n:</p> <ul> <li>Tras una coma.</li> <li>Antes de un operador, que pasar\u00e1 a la l\u00ednea siguiente.</li> <li>Una construcci\u00f3n de alto nivel (por ejemplo, una expresi\u00f3n con par\u00e9ntesis).</li> <li>La nueva l\u00ednea deber\u00e1 alinearse con un sangrado l\u00f3gico, respecto al punto de ruptura</li> </ul> <p>Unos pocos ejemplos, para comprender mejor:</p> <p>Dividir tras una coma:</p> <pre><code>funcion(expresionMuuuuyLarga1,\n         expresionMuuuyyyyLarga2, \n         expresionMuuuyyyLarga3);\n</code></pre> <p>Mantener la expresi\u00f3n entre par\u00e9ntesis en la misma l\u00ednea:</p> <pre><code>nombreLargo = nombreLargo2*\n              (nombreLargo3 + nombreLArgo4)+\n              4*nombreLargo5;\n</code></pre> <p>Siempre hay excepciones. Puede resultar que al aplicar estas reglas, en operaciones muy largas, o expresiones l\u00f3gicas enormes, el sangrado sea ilegible. En estos casos, el convenio se puede relajar.</p>"},{"location":"UD01/UD01_ES.html#paso-1-creacion-del-codigo-fuente","title":"PASO 1: Creaci\u00f3n del c\u00f3digo fuente","text":"<p>Abrimos un editor de texto (da igual cual sea, siempre que sea capaz de almacenar \"texto sin formato\" en c\u00f3digo ASCII). Una vez abierto escribiremos nuestro primer programa, que mostrar\u00e1 un texto \"Hola Mundo\" en la consola. De momento no te preocupes si no entiendes lo que escribes, m\u00e1s adelante le daremos sentido. Ahora solo queremos ver si podemos ejecutar java en nuestro equipo.</p> <p>El c\u00f3digo de nuestro programa en Java ser\u00e1 el siguiente:</p> <pre><code>/* Ejemplo Hola Mundo */\npublic class Ejemplo {\n    public static void main(String[ ] args) {\n        System.out.println(\"Hola Mundo\");\n    }\n}\n</code></pre> <p>A continuaci\u00f3n guardamos nuestro archivo y le ponemos como nombre <code>Ejemplo.java</code>. Debemos seguir una norma dictada por Java, hemos de hacer coincidir nombre del archivo y nombre del programa, tanto en may\u00fasculas como en min\u00fasculas, y la extensi\u00f3n del archivo habr\u00e1 de ser siempre <code>.java</code>.</p> <p></p> <p>Debemos recordar exactamente la ruta donde guardamos el archivo de ejemplo <code>Ejemplo.java</code>.</p>"},{"location":"UD01/UD01_ES.html#paso-2-compilacion-del-programa","title":"PASO 2: Compilaci\u00f3n del programa","text":"<p>Vamos a proceder a compilar e interpretar este peque\u00f1o programa Java (no te preocupes si todav\u00eda no entiendes el significado de las palabras compilar e interpretar, lo veras en la asignatura de <code>Entornos de Desarrollo</code>). Para ello usaremos la consola. Una vez en la consola debemos colocarnos en la ruta donde previamente guardamos el archivo <code>Ejemplo.java</code>.</p> <p>A continuaci\u00f3n daremos la instrucci\u00f3n para que se realice el proceso de compilaci\u00f3n del programa, para lo que escribiremos <code>javac Ejemplo.java</code>, donde <code>javac</code> es el nombre del compilador (<code>java c</code>ompiler) que transformar\u00e1 el programa que hemos escrito nosotros en lenguaje Java al lenguaje de la m\u00e1quina virtual Java (<code>bytecode</code>), dando como resultado un nuevo archivo <code>Ejemplo.class</code> que se crear\u00e1 en este mismo directorio. Comprueba que no aparezca ning\u00fan error y que <code>javac</code> est\u00e9 instalado en tu sistema (desde la consola lo puedes comprobar con el comando <code>javac --version</code> y deber\u00eda aparece el n\u00famero de versi\u00f3n que tienes instalada). Si aparecen los dos archivos tanto <code>Ejemplo.java</code> (c\u00f3digo fuente) como <code>Ejemplo.class</code> (bytecode creado por el compilador) puedes continuar.</p> <pre><code>$ javac Ejemplo.java\n</code></pre>"},{"location":"UD01/UD01_ES.html#paso-3-ejecucion-del-programa","title":"PASO 3: Ejecuci\u00f3n del programa","text":"<p>Finalmente, vamos a pedirle al int\u00e9rprete (JVM) que ejecute el programa, es decir, que transforme el c\u00f3digo de la m\u00e1quina virtual Java en c\u00f3digo m\u00e1quina interpretable por nuestro ordenador y lo ejecute. Para ello escribiremos en la ventana consola: <code>java Ejemplo</code>.</p> <p>El resultado ser\u00e1 que se nos muestra la cadena <code>Hola Mundo</code>. Si logramos visualizar este texto en pantalla, ya hemos desarrollado nuestro primer programa en Java.</p> <pre><code>$ java Ejemplo\nHola Mundo\n</code></pre> <p>Por qu\u00e9 no necesito compilar mi archivo <code>.java</code> antes de ejecutarlo y funciona directamente si me salto ese paso?</p> <p>https://stackoverflow.com/questions/54493058/running-a-java-program-without-compiling</p>"},{"location":"UD01/UD01_ES.html#componentes-del-lenguaje-java","title":"Componentes del lenguaje Java","text":""},{"location":"UD01/UD01_ES.html#variables-identificadores-convenciones","title":"Variables, identificadores, convenciones.","text":""},{"location":"UD01/UD01_ES.html#variables","title":"Variables","text":"<p>Una variable es una zona en la memoria del computador con un valor que puede ser almacenado para ser usado m\u00e1s tarde en el programa. Las variables vienen determinadas por:</p> <ul> <li>un nombre, que permite al programa acceder al valor que contiene en memoria. Debe ser un identificador v\u00e1lido.</li> <li> <p>un tipo de dato, que especifica qu\u00e9 clase de informaci\u00f3n guarda la variable en esa zona de memoria</p> </li> <li> <p>un rango de valores que puede admitir dicha variable.</p> </li> </ul> <p>Las variables declaradas dentro de un bloque <code>{ }</code> son accesibles solo dentro de ese bloque. Una variable local no puede ser declarada como <code>static</code>. Una variable no puede declararse fuera de la clase.</p> <p>Visibilidad, \u00e1mbito o scope de una variable es la parte de c\u00f3digo del programa donde la variable es accesible y utilizable. Las variables de un bloque son visibles y existen dentro de dicho bloque. Las funciones miembro de clase podr\u00e1n acceder a todas las variables miembro de dicha clase pero no a las variables locales de otra funci\u00f3n miembro.</p> <p>Al nombre que le damos a la variable se le llama identificador. Los identificadores permiten nombrar los elementos que se est\u00e1n manejando en un programa. Vamos a ver con m\u00e1s detalle ciertos aspectos sobre los identificadores que debemos tener en cuenta.</p>"},{"location":"UD01/UD01_ES.html#identificadores","title":"Identificadores","text":"<p>Un identificador en Java es una secuencia ilimitada sin espacios de letras y d\u00edgitos Unicode , de forma que el primer s\u00edmbolo de la secuencia debe ser una letra, un s\u00edmbolo de subrayado (<code>_</code>) o el s\u00edmbolo d\u00f3lar (<code>$</code>). Por ejemplo, son v\u00e1lidos los siguientes identificadores:</p> <ul> <li>x5</li> <li>\u03b1\u03c4\u03b7</li> <li>NUM_MAX</li> <li>numCuenta</li> </ul> <p>Unicode es un c\u00f3digo de caracteres o sistema de codificaci\u00f3n, un alfabeto que recoge los caracteres de pr\u00e1cticamente todos los idiomas importantes del mundo. Adem\u00e1s, el c\u00f3digo Unicode es \u201ccompatible\u201d con el c\u00f3digo ASCII, ya que para los caracteres del c\u00f3digo ASCII, Unicode asigna como c\u00f3digo los mismos 8 bits, a los que les a\u00f1ade a la izquierda otros 8 bits todos a cero. La conversi\u00f3n de un car\u00e1cter ASCII a Unicode es inmediata.</p>"},{"location":"UD01/UD01_ES.html#convenciones","title":"Convenciones","text":"<p>Normas de estilo para nombrar variables</p> <p>A la hora de nombrar un identificador existen una serie de normas de estilo de uso generalizado que, no siendo obligatorias, se usan en la mayor parte del c\u00f3digo Java. Estas reglas para la nomenclatura de variables son las siguientes:</p> <ul> <li>Java distingue las may\u00fasculas de las min\u00fasculas. Por ejemplo, <code>Alumno</code> y <code>alumno</code> son variables diferentes.</li> <li>No se suelen utilizar identificadores que comiencen con <code>$</code> o <code>_</code>, adem\u00e1s el s\u00edmbolo del d\u00f3lar, por convenio, no se utiliza nunca.</li> <li>No se puede utilizar el valor booleano (<code>true</code> o <code>false</code>) ni el valor nulo (<code>null</code>).</li> <li>Los identificadores deben ser lo m\u00e1s descriptivos posibles. Es mejor usar palabras completas en vez de abreviaturas cr\u00edpticas. As\u00ed nuestro c\u00f3digo ser\u00e1 m\u00e1s f\u00e1cil de leer y comprender. En muchos casos tambi\u00e9n har\u00e1 que nuestro c\u00f3digo se auto-documente. Por ejemplo, si tenemos que darle el nombre a una variable que almacena los datos de un cliente ser\u00eda recomendable que la misma se llamara algo as\u00ed como <code>FicheroClientes</code> o <code>ManejadorCliente</code>, y no algo poco descriptivo como <code>Cl33</code>.</li> </ul> <p>Adem\u00e1s de estas restricciones, en la siguiente tabla puedes ver otras convenciones, que no siendo obligatorias, s\u00ed son recomendables a la hora de crear identificadores en Java.</p> Identificador Convenci\u00f3n Ejemplo nombre de variable Comienza por letra min\u00fascula, y si tienen m\u00e1s de una palabra se colocan juntas y el resto comenzando por may\u00fasculas. A esto se le llama lowerCamelCase. numAlumnos, suma nombre de constante En letras may\u00fasculas, separando las palabras con el gui\u00f3n bajo, por convenio el gui\u00f3n bajo no se utiliza en ning\u00fan otro sitio TAM_MAX, PI nombre de una clase Comienza por letra may\u00fascula, y si tienen m\u00e1s de una palabra se colocan juntas y el resto comenzando por may\u00fasculas. A esto se le llama UpperCamelCase. String, MiTipo nombre de funci\u00f3n Comienza por letra min\u00fascula, y si tienen m\u00e1s de una palabra se colocan juntas y el resto comenzando por may\u00fasculas. A esto se le llama lowerCamelCase. modificaValor, obtieneValor <p>Puedes consultar estas y otras convenciones sobre c\u00f3digo Java en este enlace.</p> <p>Palabras reservadas Las palabras reservadas, a veces tambi\u00e9n llamadas palabras clave o keywords, son secuencias de caracteres formadas con letras ASCII cuyo uso se reserva al lenguaje y, por tanto, no pueden utilizarse para crear identificadores.</p> <p>Las palabras reservadas en Java son:</p> <pre><code>abstract, continue, for, new, switch, assert, default, goto, package, synchronized, boolean, do, if, private, this, break, double, implements, protected, throw, byte, else, import, public, throws, case, enum, instanceof, return, transient, catch, extends, int, short, try, char, final, interface, static, void, class, finally, long, strictfp, volatile, const, float, native, super, while.\n</code></pre>"},{"location":"UD01/UD01_ES.html#tipos-de-datos","title":"Tipos de datos.","text":"<p>Los tipos de datos se utilizan para declarar variables y el compilador sepa de antemano que tipo de informaci\u00f3n contendr\u00e1 la variable.</p> <p>Java dispone de los siguientes tipos de datos simples:</p> Tipo de dato Representaci\u00f3n Tama\u00f1o (Bytes) Rango de Valores Valor por defecto Clase Asociada byte Num\u00e9rico Entero con signo 1 -128 a 127 0 Byte short Num\u00e9rico Entero con signo 2 -32768 a 32767 0 Short int Num\u00e9rico Entero con signo 4 -2147483648 a 2147483647 0 Integer long Num\u00e9rico Entero con signo 8 -9223372036854775808 a 9223372036854775807 0 Long float Num\u00e9rico en Coma flotante de precisi\u00f3n simple Norma IEEE 754 4 -3.4x10<sup>-38</sup> a 3.4x10<sup>38</sup> 0.0 Float double Num\u00e9rico en Coma flotante de precisi\u00f3n doble Norma IEEE 754 8 -1.8x10<sup>-308</sup> a 1.8x10 <sup>308</sup> 0.0 Double char Car\u00e1cter Unicode 2 \\u0000 a \\uFFFF \\u0000 Character boolean Dato l\u00f3gico - true \u00f3 false false Boolean void - - - - Void <p>Sobre valores por defecto y inicializaci\u00f3n de variables: https://stackoverflow.com/questions/19131336/default-values-and-initialization-in-java</p> <p>Ejemplo de declaraci\u00f3n y asignaci\u00f3n de valores a variables:</p> Tipo de datos c\u00f3digo byte <code>byte a;</code> short <code>short b, c=3;</code> int <code>int d=-30;</code><code>int e=0xC125; //la 0x significa Hexadecimal</code> long <code>long b=46240;</code><code>long b=5L; // La L en este caso indica Long</code> char <code>char car1='c';</code><code>char car2=99; //car1 y car2 son iguales, la c equivale al ascii 99</code><code>char letra = '\\u0061'; //c\u00f3digo unicode del car\u00e1cter \"a\"</code> float <code>float pi=3.1416;</code><code>float pi=3.1416F; //La F significa float</code><code>float medio=1/2; //0.5</code> double <code>double millon=1e6; // 1x10^6</code><code>double medio=1/2D; //0.5, la D significa double</code><code>double z=.123; //si la parte entera es 0 se puede omitir</code> boolean <code>boolean esPrimero;</code><code>boolean esPar=false;</code> &gt; Ojo con los tipo float: https://jvns.ca/blog/2023/01/13/examples-of-floating-point-problems/"},{"location":"UD01/UD01_ES.html#tipos-referenciados","title":"Tipos referenciados","text":"<p>A partir de los ocho tipos datos primitivos, se pueden construir otros tipos de datos. Estos tipos de datos se llaman tipos referenciados o referencias, porque se utilizan para almacenar la direcci\u00f3n de los datos en la memoria del ordenador.</p> <pre><code>int[] arrayDeEnteros;\nCuenta cuentaCliente;\n</code></pre> <p>En la primera instrucci\u00f3n declaramos una lista de n\u00fameros del mismo tipo, en este caso, enteros. En la segunda instrucci\u00f3n estamos declarando la variable u objeto <code>cuentaCliente</code> como una referencia de tipo <code>Cuenta</code>.</p> <p>Cualquier aplicaci\u00f3n de hoy en d\u00eda necesita no perder de vista una cierta cantidad de datos. Cuando el conjunto de datos utilizado tiene caracter\u00edsticas similares se suelen agrupar en estructuras para facilitar el acceso a los mismos, son los llamados datos estructurados.</p> <p>Son datos estructurados los <code>arrays</code>, <code>listas</code>, <code>\u00e1rboles</code>, etc. Pueden estar en la memoria del programa en ejecuci\u00f3n, guardados en el disco como ficheros, o almacenados en una base de datos.</p> <p>Adem\u00e1s de los ocho tipos de datos primitivos que ya hemos descrito, Java proporciona un tratamiento especial a los textos o cadenas de caracteres mediante el tipo de dato <code>String</code>. Java crea autom\u00e1ticamente un nuevo objeto de tipo <code>String</code> cuando se encuentra una cadena de caracteres encerrada entre comillas dobles. En realidad se trata de objetos, y por tanto son tipos referenciados, pero se pueden utilizar de forma sencilla como si fueran variables de tipos primitivos:</p> <pre><code>String mensaje;\nmensaje= \"El primer programa\";\n</code></pre> <p>Hemos visto qu\u00e9 son las variables, c\u00f3mo se declaran y los tipos de datos que pueden adoptar. Anteriormente hemos visto un ejemplo de creaci\u00f3n de variables, en esta ocasi\u00f3n vamos a crear m\u00e1s variables, pero de distintos tipos primitivos y los vamos a mostrar por pantalla. Los tipos referenciados los veremos en la siguiente unidad.</p> <p>Para mostrar por pantalla un mensaje utilizamos <code>System.out</code>, conocido como la salida est\u00e1ndar del programa. Este m\u00e9todo lo que hace es escribir un conjunto de caracteres a trav\u00e9s de la l\u00ednea de comandos. Podemos utilizar <code>System.out.print</code> o <code>System.out.println</code>. En el segundo caso lo que hace el m\u00e9todo es que justo despu\u00e9s de escribir el mensaje, sit\u00faa el cursor al principio de la l\u00ednea siguiente.</p> <p>El texto en color gris que aparece entre caracteres // son comentarios que permiten documentar el c\u00f3digo, pero no son tenidos en cuenta por el compilador y, por tanto, no afectan a la ejecuci\u00f3n del programa.</p>"},{"location":"UD01/UD01_ES.html#tipos-enumerados","title":"Tipos enumerados","text":"<p>Los tipos de datos enumerados son una forma de declarar una variable con un conjunto restringido de valores. Por ejemplo, los d\u00edas de la semana, las estaciones del a\u00f1o, los meses, etc. Es como si defini\u00e9ramos nuestro propio tipo de datos.</p> <p>La forma de declararlos es con la palabra reservada <code>enum</code>, seguida del nombre de la variable y la lista de valores que puede tomar entre llaves. A los valores que se colocan dentro de las llaves se les considera como constantes, van separados por comas y deben ser valores \u00fanicos.</p> <p>La lista de valores se coloca entre llaves, porque un tipo de datos <code>enum</code> no es otra cosa que una especie de clase en Java, y todas las clases llevan su contenido entre llaves.</p> <p>Al considerar Java este tipo de datos como si de una clase se tratara, no s\u00f3lo podemos definir los valores de un tipo enumerado, sino que tambi\u00e9n podemos definir operaciones a realizar con \u00e9l y otro tipo de elementos, lo que hace que este tipo de dato sea m\u00e1s vers\u00e1til y potente que en otros lenguajes de programaci\u00f3n.</p> <p>En el siguiente ejemplo puedes comprobar el uso que se hace de los tipos de datos enumerados.</p> <pre><code>public class tiposEnumerados {\n    public enum dias {Lunes, Martes, Miercoles, Jueves, Viernes, S\u00e1bado, Domingo};\n\n    public static void main(String[] args) {\n        dias diaActual = dias.Martes;\n        dias diaSiguiente = dias.Miercoles;\n\n        System.out.print(\"Hoy es: \");\n        System.out.println(diaActual);\n        System.out.println(\"Ma\u00f1ana\\nes\\n\"+diaSiguiente);\n    }\n}\n</code></pre> <p>El resultado despu\u00e9s de la ejecuci\u00f3n ser\u00e1:</p> <pre><code>Hoy es: Martes\nMa\u00f1ana\nes\nMiercoles\n</code></pre> <p>Tenemos una variable <code>Dias</code> que almacena los d\u00edas de la semana. Para acceder a cada elemento del tipo enumerado se utiliza el nombre de la variable seguido de un punto y el valor en la lista. M\u00e1s tarde veremos que podemos a\u00f1adir m\u00e9todos y campos o variables en la declaraci\u00f3n del tipo enumerado, ya que como hemos comentado un tipo enumerado en Java tiene el mismo tratamiento que las clases.</p> <p>En este ejemplo hemos utilizado el m\u00e9todo <code>System.out.print</code>. Como podr\u00e1s comprobar si lo ejecutas, la instrucci\u00f3n <code>print</code> escribe el texto que tiene entre comillas pero no salta a la siguiente l\u00ednea, por lo que la instrucci\u00f3n <code>println</code> escribe justo a continuaci\u00f3n.</p> <p>Sin embargo, tambi\u00e9n podemos escribir varias l\u00edneas usando una \u00fanica sentencia. As\u00ed lo hacemos en la instrucci\u00f3n <code>println</code>, la cual imprime como resultado tres l\u00edneas de texto. Para ello hemos utilizado un car\u00e1cter especial, llamado car\u00e1cter escape (<code>\\</code>). Este car\u00e1cter sirve para darle ciertas \u00f3rdenes al compilador, en lugar de que salga impreso en pantalla. Despu\u00e9s del car\u00e1cter de escape viene otro car\u00e1cter que indica la orden a realizar, juntos reciben el nombre de secuencia de escape. La secuencia de escape <code>\\n</code> recibe el nombre de car\u00e1cter de nueva l\u00ednea. Cada vez que el compilador se encuentra en un texto ese car\u00e1cter, el resultado es que mueve el cursor al principio de la l\u00ednea siguiente. En el pr\u00f3ximo apartado vamos a ver algunas de las secuencias de escape m\u00e1s utilizadas.</p>"},{"location":"UD01/UD01_ES.html#constantes-y-literales","title":"Constantes y literales.","text":"<p>Las constantes se utilizan para almacenar datos que no var\u00edan nunca, asegur\u00e1ndonos que el valor no va a poder ser modificado.</p> <p>Podemos declarar una constante utilizando:</p> <pre><code>final &lt;tipo de datos&gt; &lt;nombre de la constante&gt; = &lt;valor&gt;;\n</code></pre> <p>El calificador final indica que es constante. A continuaci\u00f3n indicaremos el tipo de dato, el nombre de la constante y el valor que se le asigna.</p> <pre><code>final double IVA= 0.21;\n</code></pre> <p>Los literales pueden ser de tipo simple, null o string, como por ejemplo 230, null o \"Java\".</p> <p>Respecto a los literales existen unos caracteres especiales que se representan utilizando secuencias de escape:</p> Secuencia de escape Significado Secuencia de escape Significado \\b Retroceso \\r Retorno de carro \\t Tabulador \\\u2019\u2019 Car\u00e1cter comillas dobles \\n Salto de l\u00ednea \\\u2019 Car\u00e1cter comillas simples \\f Salto de p\u00e1gina \\\\ Barra diagonal"},{"location":"UD01/UD01_ES.html#operadores-y-expresiones","title":"Operadores y expresiones.","text":""},{"location":"UD01/UD01_ES.html#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":"<p>Los Operadores Aritm\u00e9ticos permiten realizar operaciones matem\u00e1ticas:</p> Operador Uso Operaci\u00f3n + A + B Suma - A - B Resta * A * B Multiplicaci\u00f3n / A / B Divisi\u00f3n % A % B M\u00f3dulo o resto de una divisi\u00f3n entera <p>Ejemplo:</p> <pre><code>double num1, num2, suma, resta, producto, division, resto;\nnum1 =8;\nnum2 =5;\nsuma = num1 + num2;      // 13\nresta = num1 - num2;     // 3\nproducto = num1 * num2;  // 40\ndivision = num1 / num2;  // 1.6\nresto = num1 % num2;     // 3\n</code></pre>"},{"location":"UD01/UD01_ES.html#operadores-relacionales","title":"Operadores Relacionales","text":"<p>Los Operadores Relacionales permiten evaluar (la respuesta es un booleano: si o no) la igualdad de los operandos:</p> Operador Uso Operaci\u00f3n <code>&lt;</code> <code>a &lt; b</code> a menor que b <code>&gt;</code> <code>a &gt; b</code> a mayor que b <code>&lt;=</code> <code>a &lt;= b</code> a menor o igual que b <code>&gt;=</code> <code>a &gt;= b</code> a mayor o igual que b <code>!=</code> <code>a != b</code> a distinto de b <code>==</code> <code>a == b</code> a igual a b <p>Por ejemplo:</p> <pre><code>int valor1 = 10;\nint valor2 = 3;\nboolean compara;\ncompara = valor1 &gt; valor2;  // true\ncompara = valor1 &lt; valor2;  // false\ncompara = valor1 &gt;= valor2; // true\ncompara = valor1 &lt;= valor2; // false\ncompara = valor1 == valor2; // false\ncompara = valor1 != valor2; // true\n</code></pre>"},{"location":"UD01/UD01_ES.html#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<p>Los Operadores L\u00f3gicos permiten realizar operaciones l\u00f3gicas:</p> Operador Uso Operaci\u00f3n <code>&amp;&amp;</code> o <code>&amp;</code> <code>a&amp;&amp;b</code> o<code>a&amp;b</code> a AND b. El resultado ser\u00e1 true si ambos operadores son true y false en caso contrario. <code>||</code> o <code>|</code> <code>a||b</code> o<code>a|b</code> a OR b. El resultado ser\u00e1 false si ambos operandos son false y true en caso contrario <code>!</code> <code>!a</code> NOT a. Si el operando es true el resultado es false y si el operando es false el resultado es true. <code>^</code> <code>a^b</code> a XOR b. El resultado ser\u00e1 true si un operando es true y el otro false, y false en caso contrario. <p>Ejemplo:</p> <pre><code>double sueldo = 1400;\nint edad = 34;\nboolean logica;\nlogica = (sueldo&gt;1000 &amp; edad&lt;40);   //true\nlogica = (sueldo&gt;1000 &amp;&amp; edad &gt;40); //false\nlogica = (sueldo&gt;1000 | edad&gt;40);   //true\nlogica = (sueldo&lt;1000 || edad &gt;40); //false\nlogica = !(edad &lt;40);               //false\nlogica = (sueldo&gt;1000 ^ edad&gt;40);   //true\nlogica = (sueldo&lt;1000 ^ edad&gt;40);   //false\n</code></pre> <p>Para representar resultados de operadores L\u00f3gicos tambi\u00e9n se pueden usar tablas de verdad a las que conviene acostumbrarse:</p> <code>a</code> <code>b</code> <code>a &amp;&amp; b</code> <code>a || b</code> <code>!a</code> <code>a^b</code> <code>false</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code>"},{"location":"UD01/UD01_ES.html#operadores-unarios-o-unitarios","title":"Operadores Unarios o Unitarios","text":"<p>Los Operadores Unarios o Unitarios permiten realizar incrementos y decrementos:</p> Operador Uso Operaci\u00f3n <code>++</code> <code>a++</code> o <code>++a</code> Incremento de a <code>--</code> <code>a--</code> o <code>--a</code> Decremento de a <p>Ejemplo:</p> <pre><code>int m = 5, n = 3;\nm++; // 6\nn--; // 2\n</code></pre> <p>En el caso de utilizarlo como prefijo el valor de asignaci\u00f3n ser\u00e1 el valor del operando m\u00e1s el incremento de la unidad. Y si lo utilizamos como sufijo se asignar\u00e1 el valor del operador y luego se incrementar\u00e1 la unidad sobre el operando.</p> <pre><code>int a = 1, b;\nb = ++a; // a vale 2 y b vale 2 //coge lo que vale a, le suma 1 y lo guarda en b\nb = a++; // a vale 3 y b vale 2 //coge lo que vale a, lo guarda en b, y suma 1 a lo que vale a\n</code></pre>"},{"location":"UD01/UD01_ES.html#operadores-de-asignacion","title":"Operadores de Asignaci\u00f3n","text":"<p>Los Operadores de Asignaci\u00f3n permiten asignar valores:</p> Operador Uso Operaci\u00f3n <code>=</code> <code>a = b</code> Asignaci\u00f3n (como ya hemos visto) <code>*=</code> <code>a *= b</code> Multiplicaci\u00f3n y asignaci\u00f3n. La operaci\u00f3n <code>a*=b</code> equivale a <code>a=a*b</code> <code>/=</code> <code>a /= b</code> Divisi\u00f3n y asignaci\u00f3n. La operaci\u00f3n <code>a/=b</code> equivale a <code>a=a/b</code> <code>%=</code> <code>a %= b</code> M\u00f3dulo y asignaci\u00f3n. La operaci\u00f3n <code>a%=b</code> equivale a <code>a=a%b</code> <code>+=</code> <code>a += b</code> Suma y asignaci\u00f3n. La operaci\u00f3n <code>a+=b</code> equivale a <code>a=a+b</code> <code>-=</code> <code>a -= b</code> Resta y asignaci\u00f3n. La operaci\u00f3n <code>a-=b</code> equivale a <code>a=a-b</code> <p>Ejemplo:</p> <pre><code>int dato1 = 10, dato2 = 2, dato;\ndato=dato1;   // dato vale 10\ndato2*=dato1; // dato2 vale 20\ndato2/=dato1; // datos2 vale 2\ndato2+=dato1; // dato2 vale 12\ndato2-=dato1; // dato2 vale 2\ndato1%=dato2; // dato1 vale0\n</code></pre>"},{"location":"UD01/UD01_ES.html#operadores-de-desplazamiento","title":"Operadores de desplazamiento","text":"<p>Los Operadores de desplazamiento permiten desplazar los bits de los valores:</p> Operador Utilizaci\u00f3n Resultado <code>&lt;&lt;</code> <code>a &lt;&lt; b</code> Desplazamiento de <code>a</code> a la izquierda en <code>b</code> posiciones. Multiplica por 2 el n\u00famero b de veces. <code>&gt;&gt;</code> <code>a &gt;&gt; b</code> Desplazamiento de <code>a</code> a la derecha en <code>b</code> posiciones, tiene en cuenta el signo. Divide por 2 el n\u00famero <code>b</code> de veces. <code>&gt;&gt;&gt;</code> <code>a &gt;&gt;&gt; b</code> Desplazamiento de a a la derecha en b posiciones, no tiene en cuenta el signo. (simplemente agrega ceros por la izquierda) <code>&amp;</code> <code>a &amp; b</code> Operaci\u00f3n AND a nivel de bits <code>|</code> <code>a | b</code> Operaci\u00f3n OR a nivel de bits <code>^</code> <code>a^b</code> Operaci\u00f3n XOR a nivel de bits <code>~</code> <code>~a</code> Complemento de A a nivel de bits <p>Por ejemplo:</p> <pre><code>int j = 33;\nint k = j &lt;&lt; 2;\n// 00000000000000000000000000100001 : j = 33\n// 00000000000000000000000010000100 : k = 33 &lt;&lt; 2 ; k = 132\n\nint o = 132;\nint p = o &gt;&gt; 2;\n// 00000000000000000000000010000100 : o = 132    \n// 00000000000000000000000000100001 : p = 132 &gt;&gt; 2 ; p = 33\n\nint x = -1;\nint y = x &gt;&gt;&gt; 2;\n// 11111111111111111111111111111111 : x = -1\n// 00111111111111111111111111111111 : y = x &gt;&gt;&gt; 2; y = 1073741823\n\nint q = 132;   // q: 00000000000000000000000010000100\nint r = 144;   // r: 00000000000000000000000010010000\n\nint s = q &amp; r; // s: 00000000000000000000000010000000 \n// El resultado da 128 \n\nint t = q | r; // t: 00000000000000000000000010010100 \n// El resultado da 148\n\nint u = q ^ r; // u: 00000000000000000000000000010100 \n// El resultado da 20 \n\nint v = ~q;    // v: 11111111111111111111111101111011 \n// El resultado da -133 \n</code></pre>"},{"location":"UD01/UD01_ES.html#operador-condicional-o-ternario","title":"Operador condicional o ternario <code>?:</code>","text":"<p>El operador condicional <code>?:</code> sirve para evaluar una condici\u00f3n y devolver un resultado en funci\u00f3n de si es verdadera o falsa dicha condici\u00f3n. Es el \u00fanico operador ternario de Java, y como tal, necesita tres operandos para formar una expresi\u00f3n.</p> <p>El primer operando se sit\u00faa a la izquierda del s\u00edmbolo de interrogaci\u00f3n, y siempre ser\u00e1 una expresi\u00f3n booleana, tambi\u00e9n llamada condici\u00f3n. El siguiente operando se sit\u00faa a la derecha del s\u00edmbolo de interrogaci\u00f3n y antes de los dos puntos, y es el valor que devolver\u00e1 el operador condicional si la condici\u00f3n es verdadera. El \u00faltimo operando, que aparece despu\u00e9s de los dos puntos, es la expresi\u00f3n cuyo resultado se devolver\u00e1 si la condici\u00f3n evaluada es falsa.</p> <pre><code>condici\u00f3n ? exp1 : exp2\n</code></pre> <p>Por ejemplo, en la expresi\u00f3n:</p> <pre><code>(x&gt;y)?x:y;\n</code></pre> <p>Se eval\u00faa la condici\u00f3n de si x es mayor que y, en caso afirmativo se devuelve el valor de la variable x, y en caso contrario se devuelve el valor de y.</p> <p>Ejemplo para calcular qu\u00e9 n\u00famero es mayor:</p> <pre><code>int mayor, exp1 = 15, exp2 = 25;\nmayor=(exp1&gt;exp2)?exp1:exp2;\n// mayor valdr\u00e1 25\n</code></pre> <p>El operador condicional se puede sustituir por la sentencia <code>if...then...else</code> que veremos m\u00e1s adelante.</p>"},{"location":"UD01/UD01_ES.html#prevalencia-de-operadores","title":"Prevalencia de operadores","text":"<p>Los operadores tienen diferente Prioridad por lo que es interesante utilizar par\u00e9ntesis para controlar las operaciones sin necesidad de depender de la prioridad de los operadores.</p> <p>Prevalencia de operadores, ordenados de arriba a abajo de m\u00e1s a menos prioridad:</p> Descripci\u00f3n Operadores operadores posfijos <code>op++</code> <code>op--</code> operadores unarios <code>++op --op +op -op ~ !</code> multiplicaci\u00f3n y divisi\u00f3n <code>* / %</code> suma y resta <code>+ -</code> desplazamiento <code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code> operadores relacionales <code>&lt; &gt; &lt;= =&gt;</code> equivalencia <code>== !=</code> operador AND <code>&amp;</code> operador XOR <code>^</code> operador OR <code>|</code> AND booleano <code>&amp;&amp;</code> OR booleano <code>||</code> condicional <code>?:</code> operadores de asignaci\u00f3n <code>= += -= *= /= %= &amp;= ^= \\|= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</code> <p>Por ejemplo:</p> <pre><code>int x, y1 = 6, y2 = 2, y3 =8;\nx = y1 + y2 * y3;   // 22\nx = (y1 + y2) * y3; // 64\n</code></pre> <p>\"Los par\u00e9ntesis son como las patatas fritas, cuantas m\u00e1s, mejor!\" (Ana de mates)</p>"},{"location":"UD01/UD01_ES.html#conversiones-de-tipo","title":"Conversiones de tipo.","text":"<p>Existen dos tipos de conversiones: Impl\u00edcitas y Explicitas. Debemos evitar las conversiones de tipos ya que pueden suponer perdidas de informaci\u00f3n.</p>"},{"location":"UD01/UD01_ES.html#conversiones-implicitas","title":"Conversiones Impl\u00edcitas","text":"<p>Las Conversiones Impl\u00edcitas se realizan de forma autom\u00e1tica y requiere que la variable destino tenga m\u00e1s precisi\u00f3n que la variable origen para poder almacenar el valor.</p> <p>Ejemplo: </p><pre><code>// Conversi\u00f3n Impl\u00edcita\nbyte origen = 5;\nshort destino;\ndestino=origen;  // 5\n</code></pre>"},{"location":"UD01/UD01_ES.html#conversion-explicita","title":"Conversi\u00f3n Expl\u00edcita","text":"<p>En la Conversi\u00f3n Expl\u00edcita el programador fuerza la conversi\u00f3n con la operaci\u00f3n llamada \"cast\":</p> <p>Ejemplo: </p><pre><code>// Conversi\u00f3n Expl\u00edcita\nshort origen2 = 3;\nbyte destino2;\ndestino2=(byte)origen2; // 3\n</code></pre>"},{"location":"UD01/UD01_ES.html#comentarios","title":"Comentarios.","text":"<p>Los comentarios son muy importantes a la hora de describir qu\u00e9 hace un determinado programa. A lo largo de la unidad los hemos utilizado para documentar los ejemplos y mejorar la comprensi\u00f3n del c\u00f3digo. Para lograr ese objetivo, es normal que cada programa comience con unas l\u00edneas de comentario que indiquen, al menos, una breve descripci\u00f3n del programa, el autor del mismo y la \u00faltima fecha en que se ha modificado.</p> <p>Todos los lenguajes de programaci\u00f3n disponen de alguna forma de introducir comentarios en el c\u00f3digo. En el caso de Java, nos podemos encontrar los siguientes tipos de comentarios:</p> <ul> <li> <p>Comentarios de una sola l\u00ednea. Utilizaremos el delimitador // para introducir comentarios de s\u00f3lo una l\u00ednea.</p> <pre><code>// comentario de una sola l\u00ednea \nbyte estoEsUnByte=1; \n</code></pre> </li> <li> <p>Comentarios de m\u00faltiples l\u00edneas. Para introducir este tipo de comentarios, utilizaremos una barra inclinada y un asterisco (<code>/*</code>), al principio del p\u00e1rrafo y un asterisco seguido de una barra inclinada (<code>*/</code>) al final del mismo.</p> <pre><code>/* Esto es un\ncomentario\nde varias l\u00edneas */\n</code></pre> </li> <li> <p>Comentarios Javadoc. Utilizaremos los delimitadores <code>/**</code> y <code>*/</code>. Al igual que con los comentarios tradicionales, el texto entre estos delimitadores ser\u00e1 ignorado por el compilador. Este tipo de comentarios se emplean para generar documentaci\u00f3n autom\u00e1tica del programa. A trav\u00e9s del programa javadoc, incluido en JavaSE, se recogen todos estos comentarios y se llevan a un documento en formato .html.</p> <pre><code>/** Comentario de documentaci\u00f3n.\nJavadoc extrae los comentarios del c\u00f3digo y\ngenera un archivo html a partir de este tipo de comentarios\n*/\n</code></pre> </li> </ul>"},{"location":"UD01/UD01_ES.html#herramientas-utiles-para-empezar","title":"Herramientas \u00fatiles para empezar","text":""},{"location":"UD01/UD01_ES.html#generar-numeros-aleatorios","title":"Generar n\u00fameros aleatorios.","text":"<p>Podemos generar n\u00fameros aleatorios entre 0 y 1 utilizando el m\u00e9todo random de la clase <code>Math</code>.</p> <pre><code>Math.random()\n</code></pre> <p>Ejemplo:</p> <pre><code>double numero;\nint entero;\nnumero = Math.random();\nSystem.out.println(\"El n\u00famero es: \"+numero); //entre 0 y 0.99999999999999999999999999999999999999...\nnumero = Math.random()*100;\nSystem.out.println(\"El n\u00famero es: \"+numero); //entre 0 y 99.9999999999999999999999999999999999999...\nentero = (int)(Math.random()*100);\nSystem.out.println(\"El n\u00famero sin decimales es: \"+entero); //entre 0 y 99\n\nint lado = ((int)(Math.random()*6))+1;\nchar letra = (char)((Math.random()*26)+65); //65..90\nSystem.out.println(letra); //A..Z\n</code></pre>"},{"location":"UD01/UD01_ES.html#introducir-un-texto-desde-el-teclado","title":"Introducir un texto desde el teclado.","text":"<p>Este m\u00e9todo de leer texto y n\u00fameros desde consola no nos servir\u00e1 cuando comencemos a usar IDE's.</p> <p>Podemos introducir texto desde el teclado utilizando <code>System.console().readLine();</code> </p> <p>Ejemplo 1: Introducci\u00f3n de texto.</p> <pre><code>String texto;\nSystem.out.print(\"Introduce un texto: \");\ntexto = System.console().readLine();\nSystem.out.println(\"El texto introducido es: \"+ texto);\n</code></pre> <p>Ejemplo 2: Introducci\u00f3n de un n\u00famero entero.</p> <pre><code>String texto2;\nint entero2;\nSystem.out.print(\"Introduce un n\u00famero: \");\ntexto2 = System.console().readLine();\nentero2 = Integer.parseInt(texto2); //convertimos texto a Integer\nSystem.out.println(\"El n\u00famero introducido es:\"+entero2);\n</code></pre> <p>Ejemplo 3: Introducci\u00f3n de un n\u00famero decimal.</p> <pre><code>String texto3;\ndouble doble3;\nSystem.out.print(\"Introduce un n\u00famero decimal: \");\ntexto3 = System.console().readLine();\ndoble3 = Double.parseDouble(texto3); // convertimos texto a Double\nSystem.out.println(\"N\u00famero decimal introducido es: \"+doble3);\n</code></pre>"},{"location":"UD01/UD01_ES.html#ejemplo-ud01","title":"Ejemplo UD01","text":"<p>EjemploUD01.java</p>"},{"location":"UD01/UD01_ES.html#pildoras-informaticas-relacionadas","title":"P\u00edldoras inform\u00e1ticas relacionadas","text":""},{"location":"UD01/UD01_T01_NoMachine.html","title":"T01 NoMachine","text":""},{"location":"UD01/UD01_T01_NoMachine.html#taller-ud01_01-instalar-nomachine-para-el-control-remoto","title":"Taller UD01_01: Instalar NoMachine para el control remoto","text":""},{"location":"UD01/UD01_T01_NoMachine.html#que-es-nomachine","title":"\u00bfQu\u00e9 es <code>NoMachine</code>?","text":"<p>Con\u00e9ctese a cualquier computadora de forma remota a la velocidad de la luz. Gracias a nuestra tecnolog\u00eda NX, NoMachine es el escritorio remoto m\u00e1s r\u00e1pido y de mayor calidad que jam\u00e1s haya probado. Conecta con tu ordenador al otro lado del mundo con solo unos pocos clics. V\u00e9 donde est\u00e9 tu escritorio, podr\u00e1s acceder a \u00e9l desde cualquier otro dispositivo y compartirlo con quien quieras. <code>NoMachine</code> es tu servidor personal, privado y seguro. Adem\u00e1s, es gratis.</p> <p>https://www.nomachine.com/</p>"},{"location":"UD01/UD01_T01_NoMachine.html#descarga-e-instala-la-aplicacion","title":"Descarga e instala la aplicaci\u00f3n","text":"<p>Desde la p\u00e1gina de descargas:</p> <p>https://downloads.nomachine.com/</p> <p>E instala la aplicaci\u00f3n en tu PC.</p>"},{"location":"UD01/UD01_T01_NoMachine.html#permisos-al-profesor","title":"Permisos al profesor","text":"<p>Debemos conceder permisos para que el profesor se pueda conectar a nuestro PC mientras estemos en el instituto sin necesidad de contrase\u00f1a. Esto solo ser\u00e1 posible cuando estemos conectados a la red del instituto, y el profesor no podr\u00e1 acceder cuando estemos en casa.</p> <p>Agrega la clave SSH p\u00fablica (es un fichero <code>authorized.crt</code> que te proporcionar\u00e1 el profesor a trav\u00e9s de AULES) en tu ordenador</p> <ul> <li> <p>Debes colocarla en la carpeta <code>&lt;Inicio del usuario&gt;/.nx/config</code>.</p> </li> <li> <p>Cree este directorio si no existe.</p> </li> <li>En Linux y macOS, ejecute en una terminal:<code>mkdir $HOME/.nx/config</code></li> <li> <p>En Windows, cr\u00e9elo en (<code>C:\\Users\\username\\.nx\\config</code>) usando las herramientas del sistema (Explorador de archivos).</p> </li> <li> <p>Si la carpeta de configuraci\u00f3n ya existe, copia el fichero <code>authorized.crt</code> en ella.</p> </li> </ul> <p>Ten en cuenta que los navegadores pueden cambiar las extensiones de los archivos, es conveniente tener las opciones de \"ver extensiones de archivos\" y \"ver archivos ocultos\" en nuestro gestor de archivos habitual</p>"},{"location":"UD01/UD01_T01_NoMachine.html#tarea","title":"Tarea","text":"<p>Debes enviar un archivo <code>*.pdf</code> a la plataforma de AULES con una simple captura que demuestre que el profesor se ha podido conectar a tu PC.</p> <p>Debes mantener <code>NoMachine</code> instalado y permitir las conexiones autom\u00e1ticas por parte del profesor para pedir ayuda y consultar dudas en clase, para corregir las tareas diarias, y para realizar los ex\u00e1menes.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html","title":"T02 JDK e IDE","text":""},{"location":"UD01/UD01_T02_JDK%26IDE.html#taller-ud01_02-instalacion-y-uso-de-entornos-de-desarrollo","title":"Taller UD01_02: Instalaci\u00f3n y uso de entornos de desarrollo","text":""},{"location":"UD01/UD01_T02_JDK%26IDE.html#java","title":"Java","text":"<p>Cada software y cada entorno de desarrollo tiene unas caracter\u00edsticas y funcionalidades espec\u00edficas. Esto tambi\u00e9n se ver\u00e1 reflejado en la instalaci\u00f3n y configuraci\u00f3n del software. Dependiendo de la plataforma, entorno o sistema operativo en el que se vaya a instalar el software, se utilizar\u00e1 un paquete de instalaci\u00f3n u otro, y habr\u00e1 que tener en cuenta unas opciones u otras en su configuraci\u00f3n. A continuaci\u00f3n se muestra c\u00f3mo instalar una herramienta de desarrollo de software integrada, como Eclipse. Pero tambi\u00e9n podr\u00e1s observar los procedimientos para instalar otras herramientas necesarias o recomendadas para trabajar con el lenguaje de programaci\u00f3n JAVA, como Tomcat o la M\u00e1quina Virtual de Java. Debes tener en cuenta los siguientes conceptos:</p> <ul> <li>La JVM (Java Virtual Machine, m\u00e1quina virtual de Java) es la encargada de interpretar el bytecode y generar el c\u00f3digo m\u00e1quina del ordenador (o dispositivo) en el que se ejecuta la aplicaci\u00f3n. Esto quiere decir que necesitamos una JVM distinta para cada entorno.</li> <li>JRE (Java Runtime Environment) es un conjunto de utilidades Java que incluye la JVM, las bibliotecas y el conjunto de software necesario para ejecutar aplicaciones cliente Java, as\u00ed como el conector para que los navegadores de Internet ejecuten applets.</li> <li>JDK (Java Development Kit) es el conjunto de herramientas para desarrolladores; contiene, entre otras cosas, el JRE y el conjunto de herramientas necesarias para compilar el c\u00f3digo, empaquetarlo, generar documentaci\u00f3n...</li> </ul> <pre><code>graph TD\nsubgraph JDK\n  subgraph JRE\n    subgraph JVM\n    end\n  end\nend</code></pre> <p>El proceso de instalaci\u00f3n consta de los siguientes pasos: 1. Descargue, instale y configure el JDK. 2. Descargue e instale un servidor web o de aplicaciones. 3. Descargue, instale y configure el IDE (Netbeans o Eclipse). 4. Configurar JDK con IDE. 5. Configure el servidor web o de aplicaciones con el IDE instalado. 6. Si es necesario, instalaci\u00f3n de conectores. 7. Si es necesario, instale un nuevo software.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#descargue-e-instale-el-jdk","title":"Descargue e instale el JDK","text":"<p>Podemos diferenciar entre:</p> <ul> <li> <p>Java SE (Java Standard Edition): es la versi\u00f3n est\u00e1ndar de la plataforma, siendo esta plataforma la base para todos los entornos de desarrollo Java ya sea de aplicaciones cliente, de escritorio o web.</p> </li> <li> <p>Java EE (Java Enterprise Edition): esta es la versi\u00f3n m\u00e1s grande de Java y generalmente se utiliza para crear grandes aplicaciones cliente/servidor y para el desarrollo de servicios web.</p> </li> </ul> <p>En este curso se utilizar\u00e1n las funcionalidades de Java SE. El archivo es diferente seg\u00fan el sistema operativo donde se tenga que instalar. As\u00ed:</p> <ul> <li>Para los sistemas operativos Windows y Mac OS hay un archivo instalable.</li> <li>Para los sistemas operativos GNU/Linux que admiten paquetes .rpm o .deb, tambi\u00e9n est\u00e1n disponibles paquetes de este tipo.</li> <li>Para el resto de sistemas operativos GNU/Linux existe un archivo comprimido (terminado en .tar.gz).</li> </ul> <p>En los dos primeros casos, simplemente hay que seguir el procedimiento de instalaci\u00f3n habitual del sistema operativo con el que estamos trabajando. En este \u00faltimo caso, sin embargo, hay que descomprimir el archivo y copiarlo en la carpeta donde se desea instalar. Normalmente, todos los usuarios tendr\u00e1n permisos de lectura y ejecuci\u00f3n en esta carpeta.</p> <p>A partir de la versi\u00f3n 11 de JDK, Oracle distribuye el software con una licencia significativamente m\u00e1s restrictiva que las versiones anteriores. En particular, solo se puede utilizar para \"desarrollar, probar, crear prototipos y demostrar sus aplicaciones\". Cualquier uso \"para fines comerciales, de producci\u00f3n o empresariales internos\" distinto del mencionado anteriormente queda expl\u00edcitamente excluido.</p> <p>Si lo necesitas para alguno de estos usos no permitidos en la nueva licencia, adem\u00e1s de las versiones anteriores del JDK, existen versiones de referencia de estas versiones licenciadas \"GNU General Public License version 2, with the Classpath Exception\", que permiten la mayor\u00eda de los usos habituales. Estas versiones est\u00e1n enlazadas a la misma p\u00e1gina de descarga y tambi\u00e9n a la direcci\u00f3n jdk.java.net.</p> <p>Una alternativa es utilizar https://adoptium.net/ antes conocido como adoptOpenJDK, que ahora se ha integrado en la fundaci\u00f3n Eclipse. Desde all\u00ed podemos descargar los binarios de la versi\u00f3n openJDK para nuestra plataforma sin restricciones. [Noticia completa] (https://es.wikipedia.org/wiki/OpenJDK).</p> <p>En GNU/Linux podemos utilizar los comandos:</p> <ul> <li> <p><code>sudo apt install default-jdk</code> para instalar el jdk predeterminado.</p> </li> <li> <p><code>java --version</code> para ver las versiones disponibles en nuestro sistema.</p> </li> <li> <p><code>sudo update-alternatives --config java</code> para elegir cu\u00e1l de las versiones instaladas queremos usar por defecto o incluso ver la ruta de las diferentes versiones que tenemos instaladas.</p> </li> </ul>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#configurar-las-variables-de-entorno-java_home-y-path","title":"Configurar las variables de entorno \"JAVA_HOME\" y \"PATH\"","text":"<p>Una vez descargado e instalado el JDK, debes configurar algunas variables de entorno:</p> <ul> <li> <p>La variable <code>JAVA_HOME</code>: indica la carpeta donde se ha instalado el JDK. No es obligatorio definirla, pero es muy c\u00f3modo hacerlo, ya que muchos programas buscan en ella la ubicaci\u00f3n del JDK. Adem\u00e1s, resulta muy f\u00e1cil definir las dos variables siguientes.</p> </li> <li> <p>La variable <code>PATH</code>. Debe apuntar al directorio que contiene el ejecutable de la m\u00e1quina virtual. Suele ser la subcarpeta <code>bin</code> del directorio donde hemos instalado el JDK.</p> </li> </ul> <p>Variable CLASSPATH Otra variable que tiene en cuenta el JDK es la variable <code>CLASSPATH</code>, que apunta a las carpetas donde se encuentran las librer\u00edas de la aplicaci\u00f3n que se quiere ejecutar con el comando java. Es preferible, no obstante, indicar la ubicaci\u00f3n de estas carpetas con la opci\u00f3n <code>-cp</code> del mismo comando java, ya que cada aplicaci\u00f3n puede tener diferentes librer\u00edas y las variables de entorno afectan a todo el sistema. Establecer la variable <code>PATH</code> es esencial para que el sistema operativo encuentre los comandos JDK y pueda ejecutarlos.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#eclipse","title":"Eclipse","text":"<p>Eclipse es una aplicaci\u00f3n de c\u00f3digo abierto desarrollada actualmente por Eclipse Foundation, una organizaci\u00f3n independiente, sin fines de lucro, que fomenta una comunidad de c\u00f3digo abierto y el uso de un conjunto de productos, servicios, capacidades y complementos para la divulgaci\u00f3n del uso de c\u00f3digo abierto en el desarrollo de aplicaciones inform\u00e1ticas. Eclipse fue desarrollado originalmente por IBM como sucesor de VisualAge. Como Eclipse est\u00e1 desarrollado en Java, es necesario, para su ejecuci\u00f3n, tener un JRE (Java Runtime Environment) previamente instalado en el sistema. Para saber si tienes este JRE instalado, puedes hacer el test en la web oficial de Java, en la secci\u00f3n \u00bfTengo Java? Si vamos a desarrollar con Java, como es nuestro caso, deberemos tener instalado el JDK (recordemos que es un superconjunto del JRE).</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Las versiones actuales del entorno Eclipse se instalan con un instalador. Este, b\u00e1sicamente, se encarga de descomprimir, solucionar algunas dependencias y crear los accesos directos. Este instalador se puede obtener descarg\u00e1ndolo directamente desde la p\u00e1gina oficial del Proyecto Eclipse www.eclipse.org. Podr\u00e1s encontrar las versiones para los diferentes sistemas operativos e instrucciones para su uso. No son nada complejas. En el caso de GNU/Linux y MAC OS, el archivo es un archivo comprimido, por lo que hay que descomprimirlo y luego ejecutar el instalador. Se trata del archivo eclipse-inst, dentro de la carpeta eclipse, que es una subcarpeta del resultado de descomprimir el archivo anterior. Si s\u00f3lo el usuario actual va a utilizar el IDE, la instalaci\u00f3n se puede realizar sin utilizar privilegios de administrador o root y seleccionando para la instalaci\u00f3n una carpeta perteneciente a este usuario. Si se desea compartir la instalaci\u00f3n entre distintos usuarios, se debe indicar al instalador una carpeta sobre la que todos estos usuarios tengan permisos de lectura y ejecuci\u00f3n.</p> <p>Al iniciar el instalador veremos una pantalla similar a esta:</p> <p></p> <p>El instalador nos preguntar\u00e1 qu\u00e9 versi\u00f3n queremos instalar. La versi\u00f3n que utilizaremos es \u201cEclipse IDE for Java EE Developers\u201d.</p> <p></p> <p>Luego nos pedir\u00e1 la versi\u00f3n de JDK/JRE que vamos a utilizar (en la captura aparece con letras blancas). Tambi\u00e9n nos pide la carpeta donde la instalaremos. Y dos check boxes para indicar si queremos que nos cree el acceso directo al men\u00fa de aplicaciones ya en el escritorio.</p> <p></p> <p>Para seleccionar la carpeta correcta hay que tener en cuenta qu\u00e9 usuarios van a utilizar el entorno. Todos ellos deben tener permisos de lectura y ejecuci\u00f3n sobre la carpeta en cuesti\u00f3n. Una vez introducida la carpeta podemos pulsar el bot\u00f3n INSTALAR para iniciar la instalaci\u00f3n.</p> <p>Tambi\u00e9n se nos pedir\u00e1 que aceptemos las licencias del software a instalar, como muestra la captura de pantalla:</p> <p></p> <p>Durante la instalaci\u00f3n veremos una pantalla de progreso como la que se muestra a continuaci\u00f3n:</p> <p></p> <p>Una vez finalizada la instalaci\u00f3n, se nos muestra una pantalla que nos invita a ejecutar directamente el entorno.</p> <p></p> <p>Esta primera vez podremos ejecutar el entorno Eclipse pulsando el bot\u00f3n LAUNCH. El resto de las veces ser\u00e1 necesario invocarlo desde los accesos directos o lanzadores, si se han creado o, en caso contrario, invocando directamente el ejecutable. Este se llama eclipse y lo encontrar\u00e1s en una subcarpeta de la carpeta de instalaci\u00f3n tambi\u00e9n llamada eclipse. La ruta exacta puede variar de una versi\u00f3n a otra. Si en el futuro es necesario desinstalarlo, s\u00f3lo se debe borrar la carpeta donde ha sido instalado ya que la instalaci\u00f3n de Eclipse no aparece en el repositorio de GNU/Linux ni en el panel de control en Windows. Cuando ejecutamos el entorno nos aparecer\u00e1 una pantalla como la siguiente:</p> <p></p> <p>Inmediatamente se nos preguntar\u00e1 en qu\u00e9 carpeta se ubicar\u00e1 el workspace. Podemos pedirle que lo recuerde para el resto de ejecuciones activando la opci\u00f3n \u201cUsar esto como predeterminado y no volver a preguntar\u201d.</p> <p></p> <p>La primera vez que lo ejecutemos se mostrar\u00e1 la pesta\u00f1a de bienvenida. Podemos pedirle que no nos la muestre m\u00e1s desactivando la opci\u00f3n \u201cMostrar siempre la bienvenida al iniciar\u201d.</p> <p></p> <p>Una vez cerrada esta pesta\u00f1a, el entorno de trabajo ser\u00e1 similar a esto:</p> <p></p> <p>Por defecto Eclipse nos ofrece la descarga del instalador m\u00e1s ligero que descargar\u00e1 de Internet los paquetes necesarios para completar la instalaci\u00f3n seg\u00fan nuestras elecciones. Si esta instalaci\u00f3n nos da problemas, podemos descargar la versi\u00f3n \"package\" en la que previamente deberemos elegir el paquete de instalaci\u00f3n que queramos, ocupar\u00e1 bastante m\u00e1s, pero descargar\u00e1 todos los paquetes necesarios. Despu\u00e9s solo tendremos que descomprimir el archivo descargado en una carpeta de nuestra elecci\u00f3n y ya tendremos eclipse instalado. Tendremos que crear nuestro propio men\u00fa de inicio e iconos del escritorio (pod\u00e9is seguir esta [gu\u00eda] (https://www.donovanbrown.com/post/A\u00f1adir-Eclipse-al-Launcher-en-Ubuntu-1604) cambiando la ruta donde hab\u00e9is descomprimido vuestra versi\u00f3n de eclipse).</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#configuracion","title":"Configuraci\u00f3n","text":"<p>Versi\u00f3n Java</p> <p>Por defecto Eclipse intenta utilizar las nuevas caracter\u00edsticas del JDK 16, pero en nuestro caso por ejemplo tenemos la versi\u00f3n 11. Podemos personalizar estas opciones en el apartado <code>Ventana/Preferencias/Java/Compilador</code> y elegir en el campo <code>Nivel de conformidad del compilador</code> la versi\u00f3n correcta, en nuestro caso la 11.</p> <p>Adem\u00e1s, si lo necesitamos, podemos configurar los JDKs que est\u00e1n disponibles, a\u00f1adirlos o eliminarlos desde la opci\u00f3n <code>Ventana/Preferencias/Java/JRE instalados</code>.</p> <p>Perspectiva</p> <p>Eclipse llama a la distribuci\u00f3n de los paneles en la ventana Perspectiva, hay unos cuantos predefinidos y podemos configurar los nuestros, a nuestro gusto en la secci\u00f3n <code>Ventana/Perspectiva</code>.</p> <p>Apariencia</p> <p>Eclipse nos permite personalizar cualquier aspecto de la apariencia de nuestro entorno, cambiar tanto el tema del IDE como el tama\u00f1o de fuente y los colores para el coloreado del c\u00f3digo fuente. Todas estas opciones est\u00e1n disponibles en <code>Ventana/Apariencia</code>.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#modulos","title":"M\u00f3dulos","text":"<p>Las opciones y funcionalidades de Eclipse se pueden ampliar a\u00f1adiendo m\u00f3dulos desde su \"store\" de plugins. En <code>Help/Eclipse Marketplace...</code> podemos por ejemplo buscar por texto, o buscar en la pesta\u00f1a de populares. Eso nos mostrar\u00e1 todos los complementos que contengan la palabra buscada, o los complementos m\u00e1s descargados del marketplace. Podemos instalar, por ejemplo, <code>SonarLint 6.0</code> que nos ayuda a mantener nuestro c\u00f3digo limpio de errores comunes, para ello simplemente tenemos que pulsar el bot\u00f3n <code>INSTALAR</code> que aparece a su lado en el listado, aceptar la licencia de uso y autom\u00e1ticamente nos pedir\u00e1 que reiniciemos el <code>IDE</code>.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#uso-basico-hola-mundo","title":"Uso b\u00e1sico (\"\u00a1Hola mundo!\")","text":"<p>Eclipse proporciona informaci\u00f3n sobre su uso en la secci\u00f3n de <code>Ayuda</code>, y podemos aprender a crear nuestro primer proyecto en Java (el t\u00edpico \u201c\u00a1Hola Mundo!\u201d). Para ello debemos abrir la ventana de <code>Bienvenido</code>, que es la que nos aparece cuando abrimos eclipse por primera vez, o bien podemos abrirla desde <code>Ayuda/Bienvenido</code>, desde esta ventana podemos elegir la secci\u00f3n de <code>Tutoriales</code>, y dentro de la secci\u00f3n de Desarrollo Java, elegir el primer \u00edtem \u201cCrear una aplicaci\u00f3n Hola Mundo\u201d, y el propio Eclipse nos ir\u00e1 guiando paso a paso para crear y ejecutar nuestro primer proyecto Java en Eclipse.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#actualizacion-y-mantenimiento","title":"Actualizaci\u00f3n y mantenimiento","text":"<p>En la misma secci\u00f3n <code>Ayuda</code> Eclipse nos proporciona las opciones para actualizar el propio Eclipse o los complementos que tengamos instalados <code>Ayuda/Buscar actualizaciones</code>.</p> <p>Podemos personalizar el comportamiento respecto a las actualizaciones en la secci\u00f3n <code>Ventana/Preferencias/Instalar/Actualizar/Actualizaciones autom\u00e1ticas</code>.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#netbeans","title":"Netbeans","text":"<p>NetBeans es una herramienta de entorno de desarrollo integrado (IDE) muy potente que se utiliza principalmente para el desarrollo en Java y C/C++. Permite desarrollar f\u00e1cilmente aplicaciones web, de escritorio y m\u00f3viles desde su marco modular. Puede agregar soporte para otros lenguajes de programaci\u00f3n como PHP, HTML, JavaScript, C, C++, Ajax, JSP, Ruby on Rails, etc. mediante extensiones.</p> <p>Se ha lanzado NetBeans IDE 12 con soporte para Java JDK 11. Tambi\u00e9n incluye las siguientes caracter\u00edsticas:</p> <ul> <li>Soporte para PHP 7.0 a 7.3, PHPStan y Twig.</li> <li>Incluir m\u00f3dulos en el cl\u00faster \"webcommon\". Es decir, todas las funciones de JavaScript en Apache NetBeans GitHub son parte de Apache NetBeans 10.</li> <li>Los m\u00f3dulos de cl\u00faster \"groovy\" est\u00e1n incluidos en Apache NetBeans 10.</li> <li>OpenJDK puede detectar autom\u00e1ticamente JTReg desde la configuraci\u00f3n de OpenJDK y registrar el JDK expandido como una plataforma Java.</li> <li>Soporte para JUnit 5.3.1</li> </ul>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#instalacion_1","title":"Instalaci\u00f3n","text":"<p>Podemos instalar NetBeans de tres maneras:</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#instalar-desde-binarios","title":"Instalar desde binarios","text":"<p>Paso 1: Descargue el archivo NetBeans</p> <p>Descargue el archivo binario de NetBeans 12 <code>netbeans-12.4-bin.zip</code>.</p> <p>Paso 2: Extraer el archivo</p> <p>Espere a que finalice la descarga y luego extr\u00e1igala.</p> <pre><code>$ unzip netbeans-12.4-bin.zip\n</code></pre> <p>Confirme el contenido del archivo de directorio creado:</p> <p></p><pre><code>$ ls netbeans\napisupport    enterprise  groovy   javafx    netbeans.css  profiler\nbin           ergonomics  harness  LICENSE   NOTICE        README.html\ncpplite       etc         ide      licenses  php           webcommon\nDEPENDENCIES  extide      java     nb        platform      websvccommon\n</code></pre> Step 3: Move the <code>netbeans</code> folder to <code>/opt</code> <p>Ahora movamos la carpeta <code>netbeans/</code> a <code>/opt</code></p> <p></p><pre><code>$ sudo mv netbeans/ /opt/\n</code></pre> Paso 4: Ruta de configuraci\u00f3n <p>El binario ejecutable de Netbeans se encuentra en <code>/opt/netbeans/bin/netbeans</code>. Necesitamos agregar su directorio principal a nuestro <code>$PATH</code> para poder iniciar el programa sin especificar la ruta absoluta al archivo binario. Abra su archivo <code>~/.bashrc</code> o <code>~/.zshrc</code>.</p> <p></p><pre><code>$ nano ~/.bashrc\n</code></pre> A\u00f1ade la siguiente l\u00ednea al final <pre><code>export PATH = \"$PATH:/opt/netbeans/bin/\"\n</code></pre> Obtenga el archivo para iniciar Netbeans sin reiniciar el shell. <pre><code>$ source ~/.bashrc\n</code></pre> Paso 5: Crear el iniciador de escritorio NetBeans IDE (opcional) <p>Cree un nuevo archivo en <code>/usr/share/applications/netbeans.desktop</code>.</p> <pre><code>$ sudo nano /usr/share/applications/netbeans.desktop\n</code></pre> <p>A\u00f1ade los siguientes datos.</p> <pre><code>[Desktop Entry]\nName=Netbeans IDE\nComment=Netbeans IDE\nType=Application\nEncoding=UTF-8\nExec=/opt/netbeans/bin/netbeans\nIcon=/opt/netbeans/nb/netbeans.png\nCategories=GNOME;Application;Development;\nTerminal=false\nStartupNotify=true\n</code></pre> <p>Para desinstalar NetBeans debemos eliminar la carpeta <code>netbeans/</code> que est\u00e1 dentro de la carpeta /opt/, podemos utilizar el comando:</p> <pre><code>$ sudo rm /opt/netbeans -rf\n</code></pre> <p>Paso 6: Configurar correctamente el JDK (opcional)</p> <p>En el fichero <code>/opt/netbeans/etc/netbeans.conf</code> debemos especificar correctamente la ruta de nuestro JDK en la variable <code>netbeans_jdkhome</code>. En GNU/Linux podemos saber los JDK disponibles con el comando <code>sudo update-alternatives --config java</code> que nos mostrar\u00e1 un resultado similar a este:</p> <pre><code>Hi ha 3 possibilitats per a l'alternativa java (que proveeix /usr/bin/java).\n\n  Selecci\u00f3    Cam\u00ed                                           Prioritat  Estat\n------------------------------------------------------------\n* 0            /usr/lib/jvm/java-14-openjdk-amd64/bin/java      1411      mode autom\u00e0tic\n  1            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      1111      mode manual\n  2            /usr/lib/jvm/java-14-openjdk-amd64/bin/java      1411      mode manual\n  3            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      mode manual\n\nPremeu retorn per a mantenir l'opci\u00f3 per defecte[*], o introdu\u00efu un n\u00famero de selecci\u00f3:\n</code></pre> <p>En la configuraci\u00f3n de netbeans no es necesario especificar el final de la ruta <code>bin/java</code></p> <pre><code>netbeans_jdkhome=\"/usr/lib/jvm/java-11-openjdk-amd64/\"\n</code></pre>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#instalar-desde-script","title":"Instalar desde script","text":"<p>Paso 1: Descargue el archivo NetBeans</p> <p>Tambi\u00e9n puede instalar Netbeans 12.4 en GNU/Linux desde un script proporcionado para descargar <code>Apache-NetBeans-12.4-bin-linux-x64.sh</code>.</p> <p>Paso 2: Ejecutar el script</p> <p>Debes ejecutar el script de instalaci\u00f3n</p> <pre><code>$  sudo sh ./Apache-NetBeans-12.4-bin-linux-x64.sh\n</code></pre> <p>Si ejecuta el script como <code>root</code> (<code>sudo</code>) Netbeans estar\u00e1 disponible para todos los usuarios. Por el contrario, si ejecuta el usuario sin <code>sudo</code>, solo estar\u00e1 disponible para su usuario.</p> <p>Aparecer\u00e1 una barra de progreso como esta:</p> <p></p> <p>Ahora podemos elegir los componentes que queremos instalar con el IDE de Netbeans, lo dejaremos por defecto y pulsaremos el bot\u00f3n siguiente.</p> <p></p> <p>Paso 3: Aceptar la licencia</p> <p>Luego debemos aceptar el acuerdo de licencia de uso marcando la casilla y presionando el bot\u00f3n siguiente.</p> <p></p> <p>Paso 4: Elija la ruta de instalaci\u00f3n y el JDK</p> <p>Ahora debemos elegir la ruta donde se instalar\u00e1 Netbeans 12.4. Y debemos elegir la ruta donde se encuentra el JDK (por defecto indica <code>/usr</code>, pero debemos especificar la ubicaci\u00f3n como por ejemplo <code>/usr/lib/jvm/java-11-openjdk-amd64</code>).</p> <p></p> <p>Paso 5: Actualizaciones autom\u00e1ticas</p> <p>En este punto se muestra un resumen de la instalaci\u00f3n, y podemos elegir si queremos que NetBeans busque e instale actualizaciones desde Internet, y pulsar el bot\u00f3n instalar.</p> <p></p> <p>Paso 6: Instalaci\u00f3n</p> <p>Aparecer\u00e1 una barra de progreso.</p> <p></p> <p>Paso 7: Paso final</p> <p>Al terminar, aparecer\u00e1 una pantalla con las acciones realizadas por el instalador y ya tendremos los launchers creados en el men\u00fa de aplicaciones.</p> <p></p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#instalar-mediante-snap","title":"Instalar mediante snap","text":"<p>Quiz\u00e1s una forma m\u00e1s sencilla de instalar la \u00faltima versi\u00f3n de Netbeans en nuestro sistema GNU/Linux es a trav\u00e9s de <code>snap</code>:</p> <pre><code>$ sudo snap install netbeans --classic\n</code></pre>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#primera-ejecucion","title":"Primera ejecuci\u00f3n","text":"<p>Cuando ejecutamos el entorno nos aparecer\u00e1 una pantalla como la siguiente:</p> <p></p> <p>La primera vez que lo ejecutemos se mostrar\u00e1 la pesta\u00f1a de bienvenida. Podemos pedir que no se nos muestre m\u00e1s desactivando la opci\u00f3n \u201cMostrar al iniciar\u201d.</p> <p></p> <p>Una vez cerrada esta pesta\u00f1a, el entorno de trabajo ser\u00e1 similar a esto:</p> <p></p> <p>NetBeans puede solicitarnos permiso para utilizar nuestra informaci\u00f3n a nivel estad\u00edstico, elegimos el comportamiento deseado y aceptamos.</p> <p></p> <p>Para desinstalar NetBeans en este caso debemos ejecutar el archivo <code>uninstall.sh</code> que se encuentra en la carpeta de instalaci\u00f3n.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#configuracion_1","title":"Configuraci\u00f3n","text":"<p>Activar m\u00f3dulos</p> <p>Por defecto Netbeans tiene los m\u00f3dulos desactivados y ser\u00e1 la primera vez que los necesitemos cuando pasen a estar activos y disponibles. Por ejemplo, si creamos un nuevo proyecto y elegimos <code>Java Application</code> dentro de la categor\u00eda <code>Java with Ant</code>, veremos en la parte inferior que Netbeans nos avisa de que el m\u00f3dulo necesario no est\u00e1 activo y que debemos pulsar <code>Next</code> para que est\u00e9 disponible. Lo hacemos, y a continuaci\u00f3n nos pedir\u00e1 que activemos el m\u00f3dulo <code>nb-javac Impl</code>, dejamos el check marcado y pulsamos el bot\u00f3n <code>Activate</code>, y nos aparecer\u00e1 el asistente para crear nuestro primer proyecto Java.</p> <p>Versi\u00f3n Java</p> <p>Dentro del men\u00fa <code>Herramientas/Plataformas Java</code> podemos cambiar o ver la ubicaci\u00f3n de nuestra instalaci\u00f3n JDK.</p> <p>Perspectiva</p> <p>En Netbeans las perspectivas no son necesarias, el entorno de Netbeans, aunque es personalizable, se adapta autom\u00e1ticamente a las tareas que est\u00e9s realizando en cada momento.</p> <p>Apariencia</p> <p>Netbeans nos permite personalizar cualquier aspecto de la apariencia de nuestro entorno, cambiar el tema del IDE as\u00ed como el tama\u00f1o de fuente y los colores para el coloreado del c\u00f3digo fuente. Todas estas opciones est\u00e1n disponibles en <code>Herramientas/Opciones</code>, y dentro de esta ventana elegimos la tercera pesta\u00f1a <code>Fuente y Colores</code> y la pen\u00faltima pesta\u00f1a <code>Apariencia</code>.</p> <p>Configuraci\u00f3n de exportaci\u00f3n/importaci\u00f3n</p> <p>Una opci\u00f3n muy interesante de Netbeans es que nos permite exportar o importar configuraciones y compartirlas con otros compa\u00f1eros o incluso entre nuestros equipos o diferentes instalaciones. La opci\u00f3n est\u00e1 disponible en <code>Herramientas/Opciones</code>, abajo a la izquierda encontramos los botones <code>Exportar...</code> e <code>Importar...</code>.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#modulos_1","title":"M\u00f3dulos","text":"<p>Las opciones y funcionalidades de Netbeans se pueden ampliar a\u00f1adiendo m\u00f3dulos desde su secci\u00f3n de plugins. En <code>Tools/Plugins</code> podemos por ejemplo buscar por texto, o buscar en la pesta\u00f1a de plugins disponibles. Eso nos mostrar\u00e1 todos los plugins que contienen la palabra buscada, o los plugins disponibles. Podemos instalar por ejemplo <code>sonarlint4netbeans</code> que nos ayuda a mantener nuestro c\u00f3digo limpio de errores comunes, para ello simplemente tenemos que marcar la casilla delante del nombre del plugin, y pulsar el bot\u00f3n <code>INSTALAR</code> que aparece m\u00e1s abajo, pulsar siguiente, aceptar la licencia de uso e instalar. Cuando termine la instalaci\u00f3n nos pedir\u00e1 que reiniciemos el <code>IDE</code>.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#uso-basico-hola-mundo_1","title":"Uso b\u00e1sico (\"\u00a1Hola mundo!\")","text":"<p>Para crear nuestra primera aplicaci\u00f3n en Netbeans, debemos crear una aplicaci\u00f3n Java, desde el men\u00fa <code>Archivo/Nuevo Proyecto...</code> \u200b\u200bdebemos elegir <code>Aplicaci\u00f3n Java</code> dentro de la categor\u00eda <code>Java con Ant</code>. A continuaci\u00f3n debemos especificar el nombre del proyecto, por ejemplo \"App Hello World\", y nos aseguramos de dejar marcada la opci\u00f3n <code>Crear clase principal app.hello.world.AppHolaWorld</code> y nos deber\u00eda aparecer algo como esto:</p> <p></p> <p>En este punto, s\u00f3lo nos queda incluir la l\u00ednea de c\u00f3digo necesaria para imprimir el mensaje de texto en pantalla. Para ello, nos dirigiremos al final de la l\u00ednea <code>// TODO code application logic here</code> y pulsaremos la tecla <code>ENTER</code> para crear una nueva l\u00ednea.</p> <p>Una vez situados en el lugar adecuado utilizaremos una de las funcionalidades m\u00e1s interesantes de Netbeans, que son las plantillas de c\u00f3digo. Tecleamos la palabra \"sout\" y luego pulsamos la tecla <code>TAB</code> y Netbeans la sustituir\u00e1 por el c\u00f3digo correcto: <code>System.out.println (\"\");</code>.</p> <p>Ahora debemos escribir entre las dos comillas dobles el mensaje de texto que debe aparecer en pantalla, y debe quedar as\u00ed:</p> <pre><code>System.out.println(\"Hola Mundo!\");\n</code></pre> <p>Luego podemos presionar el bot\u00f3n superior con un tri\u00e1ngulo verde (<code>Ejecutar proyecto</code>) o presionar la tecla <code>F6</code> del teclado:</p> <p></p> <p>Aparecer\u00e1 una nueva secci\u00f3n en la ventana (en la parte inferior) llamada <code>Salida</code> en la que podremos visualizar el resultado de la ejecuci\u00f3n de nuestro primer programa.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#actualizacion-y-mantenimiento_1","title":"Actualizaci\u00f3n y mantenimiento","text":"<p>En la secci\u00f3n <code>Ayuda</code>, Netbeans nos proporciona las opciones para actualizar el propio Netbeans con la opci\u00f3n <code>Ayuda/Buscar actualizaciones</code>.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#intellij-recomendado","title":"IntelliJ (recomendado)","text":"<p>IntelliJ IDEA es un entorno de desarrollo integrado (IDE) escrito en Java para desarrollar software inform\u00e1tico escrito en Java, Kotlin, Groovy y otros lenguajes basados \u200b\u200ben JVM. Est\u00e1 desarrollado por JetBrains (antes conocido como IntelliJ) y est\u00e1 disponible como una edici\u00f3n comunitaria con licencia Apache 2 y en una edici\u00f3n comercial propietaria. Ambas se pueden utilizar para el desarrollo comercial.</p> <p>Nuestra instituci\u00f3n dispone de licencias para nuestros alumnos mientras teng\u00e1is correo electr\u00f3nico @ieseduardoprimo.es.</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#instalacion_2","title":"Instalaci\u00f3n","text":"<p>Descargue desde https://www.jetbrains.com/idea/ la versi\u00f3n de la herramienta toolbox correspondiente a su sistema operativo.</p> <p>Siga las instrucciones para su sistema operativo desde https://www.jetbrains.com/help/idea/installation-guide.html#toolbox</p> <p>Una vez instalada la caja de herramientas, puede elegir instalar todos los productos de JetBrains.</p> <p>Una vez instalada la Idea (IDE) puedes crear una entrada de escritorio desde la pantalla inicial:</p> <p></p> <p>Y en la opci\u00f3n Administrar licencias debes seguir estas instrucciones: https://www.jetbrains.com/help/license_server/Activating_license.html</p> <p>La direcci\u00f3n del servidor es: https://iesepm.fls.jetbrains.com/</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#ajustes","title":"Ajustes","text":"<p>Documentos para configurar su IDE: https://www.jetbrains.com/help/idea/configuring-project-and-ide-settings.html</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#modulos_2","title":"M\u00f3dulos","text":"<p>Puedes agregar complementos siguiendo estas instrucciones:</p> <p>https://www.jetbrains.com/help/idea/managing-plugins.html</p>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#uso-basico-hola-mundo_2","title":"Uso b\u00e1sico (\"\u00a1Hola mundo!\")","text":"<p>Los documentos te ayudan con tu primer programa en Java: https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html</p> <p>Mucha m\u00e1s informaci\u00f3n:</p> <ul> <li>Si vienes de Eclipse: https://www.jetbrains.com/help/idea/migrating-from-eclipse-to-intellij-idea.html</li> <li>Si estuvieras en NetBeans: https://www.jetbrains.com/help/idea/netbeans.html</li> <li>Si quieres aprender por tu cuenta: https://www.jetbrains.com/help/idea/product-educational-tools.html</li> </ul>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#por-que-deberia-elegir-intellij-en-lugar-de-vscode-para-la-codificacion-en-java","title":"Por qu\u00e9 deber\u00eda elegir IntelliJ en lugar de VsCode para la codificaci\u00f3n en Java","text":""},{"location":"UD01/UD01_T02_JDK%26IDE.html#idea-intellij","title":"IDEA IntelliJ:","text":"<p>Ventajas:</p> <ol> <li> <p>Entorno integrado completo: IntelliJ IDEA est\u00e1 dise\u00f1ado espec\u00edficamente para el desarrollo de Java y ofrece un conjunto completo de herramientas y caracter\u00edsticas optimizadas para esta tarea.</p> </li> <li> <p>An\u00e1lisis est\u00e1tico avanzado: Proporciona un an\u00e1lisis de c\u00f3digo en profundidad que detecta errores y problemas potenciales antes de la compilaci\u00f3n.</p> </li> <li> <p>Depuraci\u00f3n avanzada: ofrece un potente conjunto de herramientas de depuraci\u00f3n que ayudan a identificar y resolver problemas en el c\u00f3digo.</p> </li> <li> <p>Refactorizaci\u00f3n guiada: Proporciona herramientas para reorganizar y optimizar el c\u00f3digo de forma segura, promoviendo buenas pr\u00e1cticas de programaci\u00f3n.</p> </li> <li> <p>Compatibilidad con marcos y tecnolog\u00edas Java: Integraci\u00f3n nativa con muchos marcos y tecnolog\u00edas utilizados en el desarrollo Java, lo que facilita la creaci\u00f3n de aplicaciones completas.</p> </li> <li> <p>Generaci\u00f3n autom\u00e1tica de c\u00f3digo: ayuda a los programadores a generar autom\u00e1ticamente fragmentos de c\u00f3digo repetitivos, como captadores y definidores.</p> </li> <li> <p>Integraci\u00f3n con herramientas de compilaci\u00f3n: facilita la integraci\u00f3n con herramientas de compilaci\u00f3n como Maven y Gradle.</p> </li> <li> <p>Soporte para pruebas unitarias: Ofrece integraci\u00f3n con marcos de prueba como JUnit para el desarrollo basado en pruebas.</p> </li> <li> <p>Facilidad de configuraci\u00f3n: Proporciona asistentes guiados para configurar de manera eficiente proyectos Java.</p> </li> </ol> <p>Contras:</p> <ol> <li> <p>Mayor consumo de recursos: Debido a su naturaleza integral y rica en funciones, IntelliJ IDEA puede consumir m\u00e1s recursos del sistema en comparaci\u00f3n con IDE m\u00e1s livianos.</p> </li> <li> <p>Curva de aprendizaje: Dado que ofrece una amplia gama de funciones, los principiantes pueden tardar un tiempo en familiarizarse con todas las herramientas disponibles.</p> </li> </ol>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#visual-studio-code-vscode","title":"Visual Studio Code (VSCode):","text":"<p>Ventajas:</p> <ol> <li> <p>Ligero y r\u00e1pido: VSCode es un editor de c\u00f3digo liviano y r\u00e1pido, lo que lo hace ideal para proyectos m\u00e1s peque\u00f1os o para aquellos que prefieren una experiencia m\u00e1s \u00e1gil.</p> </li> <li> <p>Amplia gama de extensiones: Tiene una amplia comunidad que desarrolla extensiones para diversas tecnolog\u00edas y lenguajes, incluido Java.</p> </li> <li> <p>Versatilidad: Si bien no est\u00e1 dise\u00f1ado espec\u00edficamente para Java, se puede personalizar para que funcione con Java a trav\u00e9s de extensiones.</p> </li> <li> <p>Integraci\u00f3n de control de versiones: ofrece integraci\u00f3n nativa con sistemas de control de versiones como Git.</p> </li> <li> <p>Curva de aprendizaje r\u00e1pida: Debido a su enfoque m\u00e1s ligero, puede resultar m\u00e1s sencillo para los principiantes comenzar a trabajar con \u00e9l.</p> </li> </ol> <p>Contras:</p> <ol> <li> <p>Funcionalidad limitada de Java: Aunque existen extensiones de Java, VSCode no ofrece el mismo conjunto completo de herramientas optimizadas para Java que IntelliJ IDEA.</p> </li> <li> <p>An\u00e1lisis menos profundo: Las capacidades de an\u00e1lisis est\u00e1tico y correcci\u00f3n de c\u00f3digo podr\u00edan no ser tan avanzadas como las de IntelliJ IDEA.</p> </li> <li> <p>Depuraci\u00f3n limitada: si bien ofrece depuraci\u00f3n, es posible que no sea tan avanzada o completa como la de IntelliJ IDEA.</p> </li> <li> <p>Configuraci\u00f3n manual del proyecto: La configuraci\u00f3n de proyectos Java puede requerir m\u00e1s pasos y configuraci\u00f3n manual en comparaci\u00f3n con IntelliJ IDEA.</p> </li> </ol>"},{"location":"UD01/UD01_T02_JDK%26IDE.html#tarea","title":"Tarea","text":"<p>Debes entregar un documento <code>*.pdf</code> explicando que IDE has elegido para empezar a programar (m\u00e1s adelante lo puedes cambiar si quieres), justificando porqu\u00e9 lo has elegido.</p> <p>Adem\u00e1s envia una captura de pantalla en la que se vea el resultado del comando:</p> <pre><code>java --version\n</code></pre> <p>Y por \u00faltimo capturas de pantalla donde se pueda ver que editas el fichero fuente (HolaMundo.java), lo compilas y lo ejecutas dentro del IDE que has elegido (explica los pasos que has seguido)</p>"},{"location":"UD01/UD01_T03_GitHub.html","title":"T03 GitHub","text":""},{"location":"UD01/UD01_T03_GitHub.html#taller-ud01_03-crear-cuenta-en-github","title":"Taller UD01_03: Crear cuenta en GitHub","text":""},{"location":"UD01/UD01_T03_GitHub.html#que-es-github","title":"Qu\u00e9 es GitHub","text":"<p>Github es una plataforma en la nube basada en Git que permite a los desarrolladores almacenar, gestionar y colaborar en proyectos de c\u00f3digo. Es el portafolio universal de los programadores.</p> <p>Crear una cuenta es esencial para quien aprende o busca trabajar en programaci\u00f3n porque: sirve como tu curr\u00edculum t\u00e9cnico, donde muestras tus proyectos y evoluci\u00f3n; te permite colaborar en proyectos open source para ganar experiencia real; y es una herramienta fundamental para el control de versiones y trabajo en equipo, usada por pr\u00e1cticamente todas las empresas tech.</p>"},{"location":"UD01/UD01_T03_GitHub.html#crea-tu-cuenta","title":"Crea tu cuenta","text":"<p>Accede a la plataforma GitHub: https://github.com/</p> <p>Pulsa sobre el bot\u00f3n [Sign Up] y sigue las instrucciones para crear tu cuenta.</p> <p>Una vez creada tu cuenta, entra en tu p\u00e1gina principal, por ejemplo la mia es esta: https://github.com/martinezpenya (<code>martinezpenya</code> es mi usuario de github) y realiza una captura de pantalla.</p>"},{"location":"UD01/UD01_T03_GitHub.html#solicitar-correccion-de-los-apuntes","title":"Solicitar correcci\u00f3n de los apuntes","text":"<p>Ahora, para probar nuestra nueva cuenta y colaborar con alg\u00fan proyecto, no hay nada mejor que ayudar a mejorar los apuntes del profesor de Programaci\u00f3n .</p> <p>Accedemos a la p\u00e1gina de los apuntes en la que hemos detectado el error o queremos sugerir un cambio y en la parte superior derecha debe aparecer el icono:</p> <p></p> <p>Esto nos llevar\u00e1 a crear un Fork del repositorio (este concepto lo aprender\u00e1s m\u00e1s adelante en el m\u00f3dulo de Entornos de Desarrollo):</p> <p></p> <p>Ahora debemos pulsar el bot\u00f3n [Fork this repository], y a continuaci\u00f3n veremos el c\u00f3digo de la p\u00e1gina en nuestro fork que es <code>MarkDown</code> (Puedes aprender m\u00e1s sobre <code>MarkDown</code> en el Taller 4):</p> <p></p> <p>Ahora debemos buscar el texto a modificar y una vez hayamos cambiado algo del documento se activar\u00e1 el bot\u00f3n [Commit changes...]:</p> <p></p> <p>Ahora debes explicar cual ha sido la modificaci\u00f3n que hemos realizado y pulsar el bot\u00f3n [Propose changes]:</p> <p></p> <p>Todav\u00eda no hemos terminado! ahora hay que comunciar los cambios propuestos en nuestro Fork al propietario del repositorio, para que los visualice y valore si los quiere incluir en la p\u00e1gina de documentaci\u00f3n. Para ello debemos pulsar el bot\u00f3n [Create pull request]:</p> <p></p> <p>Ahora podemos modificar el mensaje (pero no hace falta), directamente pulsamos sobre el bot\u00f3n [Create pull request]:</p> <p></p> <p>Ahora si, deber\u00edas ver una p\u00e1gina similar a la siguiente, de la que tambi\u00e9n deber\u00e1s obtener una captura y adjuntarla al <code>.pdf</code>, y adem\u00e1s explicar los 4 campos que hay redondeados:</p> <p></p> <p>Como resumen:</p> <ol> <li>Hemos creado un fork de un repositorio.</li> <li>Hemos modificado un archivo en nuestro fork.</li> <li>Hemos comparado nuestro fork con el original y hemos creado un pull request con las diferencias.</li> </ol> <p>Ahora pueden pasar dos cosas, que el propietario del repositorio original acepte nuestros cambios, y por tanto pasaremos a ser colaboradores del repositorio original.</p> <p>O bien, que el cambio no sea aceptado.</p> <p>En cualquiera de los dos casos, si adjuntas las capturas y explicas los campos la actividad estar\u00e1 correcta.</p> <p>En este caso concreto se ha aceptado la modificaci\u00f3n:</p> <p></p>"},{"location":"UD01/UD01_T03_GitHub.html#tarea","title":"Tarea","text":"<ul> <li> <p>Crea un documento <code>.pdf</code> donde debes adjuntar la captura de tu perfil de github.</p> </li> <li> <p>A\u00f1ade una captura de pantalla donde se vea que has solicitado el pull request y que est\u00e1s esperando a que se integre en el repositorio original. </p> </li> <li> <p>Adem\u00e1s, explica que significan cada uno de los 4 apartados se\u00f1alados en la captura.</p> </li> </ul> <p>Adjunta el documento <code>.pdf</code> con las capturas y las explicaciones a la tarea de AULES.</p>"},{"location":"UD01/UD01_T04_Markdown.html","title":"T04 Markdown","text":""},{"location":"UD01/UD01_T04_Markdown.html#taller-ud01_t03-markdown","title":"Taller UD01_T03: Markdown","text":""},{"location":"UD01/UD01_T04_Markdown.html#introduccion-a-markdown","title":"Introducci\u00f3n a Markdown","text":"<p>Markdown nace como herramienta de conversi\u00f3n de texto plano a HTML. Fue creada en 2004 por John Gruber, y se distribuye de manera gratuita bajo una licencia BSD.</p> <p>Markdown es un maravilloso lenguaje para escribir documentos de una manera sencilla de escribir, y que en todo momento mantenga un dise\u00f1o legible que contengan elementos como secciones, p\u00e1rrafos, listas, v\u00ednculos e im\u00e1genes, etc. Pandoc http://pandoc.org ha extendido enormemente la sintaxis original de Markdown y ha a\u00f1adido unas peque\u00f1as nuevas caracter\u00edsticas tales como notas al pie de p\u00e1gina, citas y tablas. Lo m\u00e1s importante que hace Pandoc es hacer posible la generaci\u00f3n de documentos en una amplia variedad de formatos desde Markdown, HTML, LaTeX/PDF, MSWord y Slides.</p> <p>Este m\u00e9todo te permitir\u00e1 a\u00f1adir formatos tales como negritas, cursivas o enlaces, utilizando texto plano, lo que permitir\u00e1 hacer de tu escritura algo m\u00e1s simple y eficiente al evitar distracciones.</p> <p>Con Markdown no vas a reemplazar todo, sino cubrir las funcionalidades m\u00e1s comunes que se requieren para escribir un documento relativamente complicado.</p>"},{"location":"UD01/UD01_T04_Markdown.html#para-que-sirve-markdown","title":"Para qu\u00e9 sirve Markdown","text":"<p>Markdown ser\u00e1 perfecto para ti sobre todo si publicas de manera constante en Internet, donde el lenguaje HTML est\u00e1 m\u00e1s que presente: WordPress, Squarespace, Jekyll\u2026</p> <p>Pero no estoy hablando solo de blogs o p\u00e1ginas web. Servicios como Trello o foros como Stackoverflow tambi\u00e9n soportan este lenguaje, y con el paso del tiempo encontrar\u00e1s a\u00fan m\u00e1s lugares que lo utilicen.</p> <p>Adem\u00e1s, Markdown est\u00e1 cada vez m\u00e1s extendido en el mundo \u201coffline\u201d. Nada te impedir\u00e1 utilizar este lenguaje para tomar notas y apuntes de tus clases o reuniones en una determinada aplicaci\u00f3n (incluso podr\u00edas escribir un libro con \u00e9l, ya que puedes exportar f\u00e1cilmente el resultado final a un formato ePub).</p> <p>Gracias a la simplicidad de su sintaxis podr\u00e1s utilizarlo siempre que necesites escribir y dar formato r\u00e1pidamente, sobre todo si quieres hacerlo desde dispositivos m\u00f3viles.</p>"},{"location":"UD01/UD01_T04_Markdown.html#por-que-utilizar-markdown","title":"Por qu\u00e9 utilizar Markdown","text":""},{"location":"UD01/UD01_T04_Markdown.html#ventajas","title":"Ventajas","text":"<ul> <li> <p>Markdown para todo. Para crear apuntes, documentos, notas, sitios web, libros, documentaci\u00f3n t\u00e9cnica, etc. de forma off-line.</p> </li> <li> <p>Markdown transportable. Este tipo de formato siempre ser\u00e1 compatible con todas las plataformas que utilices, as\u00ed que utilizar Markdown es una manera de mantener todo tu contenido siempre accesible desde cualquier dispositivo (smartphones, ordenadores de escritorio, tablets\u2026), ya que en cualquiera de ellas siempre encontrar\u00e1s las aplicaciones adecuadas para leer y editar este tipo de contenido.</p> </li> <li> <p>Ideal para escribir un libro, pues permite la exportaci\u00f3n f\u00e1cil en ePub, PDF...</p> </li> </ul> <p>Si en el futuro Microsoft Word desapareciese perder\u00edas acceso a todo el contenido que has creado durante a\u00f1os utilizando dicho procesador. As\u00ed que lo m\u00e1s inteligente para evitar eso es generar tu contenido de la manera m\u00e1s sencilla posible: utilizando texto plano.</p>"},{"location":"UD01/UD01_T04_Markdown.html#desventajas","title":"Desventajas","text":"<ul> <li>No tiene muchas funcionalidades (esto es lo que lo hace muy compatible).</li> <li>Al no tener todas las opciones de un procesador de textos a veces tendr\u00e1s que combinar Markdown con HTML para lograr ciertos formatos.</li> </ul>"},{"location":"UD01/UD01_T04_Markdown.html#editores-para-markdown","title":"Editores para Markdown","text":""},{"location":"UD01/UD01_T04_Markdown.html#off-line","title":"Off-line","text":"<ul> <li>Typora</li> <li>MarkdownPad</li> <li>HarooPad</li> <li>Markdown Monster</li> <li>...</li> </ul>"},{"location":"UD01/UD01_T04_Markdown.html#online","title":"Online","text":"<ul> <li> <p>Dillinger</p> </li> <li> <p>GitHub</p> </li> <li> <p>...</p> </li> </ul>"},{"location":"UD01/UD01_T04_Markdown.html#parrafos-y-saltos-de-linea","title":"P\u00e1rrafos y saltos de l\u00ednea","text":"<p>Si queremos generar un nuevo p\u00e1rrafo en Markdown simplemente separa el texto mediante una l\u00ednea en blanco (pulsando dos veces intro).</p> <p>Al igual que sucede con HTML, Markdown no soporta dobles l\u00edneas en blanco, as\u00ed que si intentas generarlas estas se convertir\u00e1n en una sola al procesarse.</p> <p>Para realizar un salto de l\u00ednea y empezar una frase en una l\u00ednea siguiente dentro del mismo p\u00e1rrafo, tendr\u00e1s que pulsar dos veces la barra espaciadora antes de pulsar una vez intro.</p> <p>Por ejemplo si quisieses escribir un poema quedar\u00eda tal que as\u00ed:</p> <p>\u00abLa tierra estaba seca,         No hab\u00eda r\u00edos ni fuentes.         Y brot\u00f3 de tus ojos.</p> <p>Donde cada verso tiene dos espacios en blanco al final.</p>"},{"location":"UD01/UD01_T04_Markdown.html#encabezados","title":"Encabezados","text":"<p>Las <code>#</code> almohadillas son uno de los m\u00e9todos utilizados en Markdown para crear encabezados. Debes usarlos a\u00f1adiendo uno por cada nivel.</p> <p>Es decir,</p> <pre><code># Encabezado 1\n## Encabezado 2\n### Encabezado 3\n#### Encabezado 4\n##### Encabezado 5\n###### Encabezado 6\n</code></pre> <p>Se corresponde con:</p> <p></p> <p>Tambi\u00e9n puedes cerrar los encabezados con el mismo n\u00famero de almohadillas, por ejemplo escribiendo <code>### Encabezado 3 ###</code>. Pero la \u00fanica finalidad de esto es un motivo est\u00e9tico.</p>"},{"location":"UD01/UD01_T04_Markdown.html#texto-basico","title":"Texto b\u00e1sico","text":"<p>Un p\u00e1rrafo no requiere sintaxis especial.</p> <p>Para aplicar negrita al texto, se escribe entre dos asteriscos. </p> <p>Para aplicar cursiva al texto, se escribe entre un solo asterisco.</p> <p>Para tachar el texto, se escribir\u00e1 dos virgulillas antes y dos despu\u00e9s de \u00e9ste.</p> <pre><code>Este texto es en **negrita**.\nEste texto es en *it\u00e1lica*.\nEste texto est\u00e1 ~~tachado~~.\nEste texto es en ambos ***negrita e it\u00e0lica***.\n</code></pre> <p>Se corresponde a:</p> <p>\u200b   Este texto es en **negrita**.</p> <p>\u200b   Este texto es en *it\u00e1lica*.</p> <p>\u200b   Este texto est\u00e1 tachado.</p> <p>\u200b   Este texto es en ambos ***negrita e it\u00e0lica***.</p> <p>En Markdown no podemos subrayar el texto. Sin embargo, podremos a\u00f1adir la etiqueta de html underline \\\\.</p> <pre><code>Este texto est\u00e1 &lt;u&gt;subrayado&lt;/u&gt;\n</code></pre> <p>Este texto est\u00e1 subrayado</p> <p>Para ignorar los caracteres de formato de Markdown, ponga <code>\\</code> antes del car\u00e1cter:</p>"},{"location":"UD01/UD01_T04_Markdown.html#citas","title":"Citas","text":"<p>Las citas se generar utilizando el car\u00e1cter mayor que <code> &gt; </code> al comienzo del bloque de texto.</p> <pre><code>&gt; No hay que ir para atr\u00e1s ni para darse impulso.  \u2014 Lao Ts\u00e9.\n</code></pre> <p>No hay que ir para atr\u00e1s ni para darse impulso.  \u2014 Lao Ts\u00e9.</p> <p>Si la cita en cuesti\u00f3n se compone de varios p\u00e1rrafos, deber\u00e1s a\u00f1adir el mismo s\u00edmbolo <code>&gt;</code> al comienzo de cada uno de ellos.</p>"},{"location":"UD01/UD01_T04_Markdown.html#listas","title":"Listas","text":""},{"location":"UD01/UD01_T04_Markdown.html#listas-ordenadas","title":"Listas ordenadas","text":"<p>Para crear listas numeradas, empieza una l\u00ednea con <code>1.</code> or <code>1)</code>.</p> <p>No debes mezclar los formatos dentro de la misma lista. No es necesario especificar los n\u00fameros. GitHub lo hace por t\u00ed.</p> <pre><code>1. \u00cdtem 1 de la lista.\n1. Siguiente \u00edtem de la lista.\n1. Siguiente \u00edtem, el tercero, de la lista.\n</code></pre> <p>Se corresponde con:</p> <ol> <li>\u00cdtem 1 de la lista.</li> <li>Siguiente \u00edtem de la lista.</li> <li>Siguiente \u00edtem, el tercero, de la lista.</li> </ol>"},{"location":"UD01/UD01_T04_Markdown.html#listas-no-ordenadas","title":"Listas no ordenadas","text":"<p>Para crear listas no numeradas, o de vi\u00f1etas, empieza una l\u00ednea con <code>*</code>, <code>-</code> o <code>+</code>, pero no mezcles los formatos dentro de la misma lista. (No mezclar formatos de vi\u00f1etas, como * y + por ejemplo, dentro del mismo documento).</p> <pre><code>* \u00cdtem 1 de la lista.\n* Siguiente \u00edtem de la lista.\n* Siguiente \u00edtem, el tercero, de la lista.\n</code></pre> <p>Se corresponde con:</p> <ul> <li>\u00cdtem 1 de la lista.</li> <li>Siguiente \u00edtem de la lista.</li> <li>Siguiente \u00edtem, el tercero, de la lista.</li> </ul> <p>Tambi\u00e9n podremos combinar ambos tipos de listas. Como por ejemplo:</p> <ol> <li>element de llista 2    - element de llista 2.2<ul> <li>element de llista 2.2.1</li> <li>element de llista 2.2.2</li> </ul> </li> </ol>"},{"location":"UD01/UD01_T04_Markdown.html#listas-de-tareas","title":"Listas de tareas","text":"<p>Para crear listas de tareas basta con que empiece la l\u00ednea con <code>- [ ]</code>, si queremos que no est\u00e9 el check marcado, y <code>- [x]</code>, si queremos que est\u00e9 el check marcado.</p> <pre><code>- [x] regar plantas.\n- [ ] realizar ejercicios de programaci\u00f3n.\n</code></pre> <p>Se corresponde con:</p> <ul> <li> <p> regar plantas.</p> </li> <li> <p> realizar ejercicios de programaci\u00f3n.</p> </li> </ul>"},{"location":"UD01/UD01_T04_Markdown.html#tablas","title":"Tablas","text":"<p>Las tablas no forman parte de la especificaci\u00f3n principal de Markdown, pero Adobe, en cierta forma, las admite. </p> <p>Para generar una tabla utiliza la barra vertical <code>|</code> para generar filas y columnas.</p> <p>Si insertamos guiones <code>---</code> dentro de una celda crearemos el encabezado de la tabla.</p> <pre><code>| encabezado1 | encabezado2 | encabezado3 |\n|--- |--- |--- |\n| celda 1.1 | celda 1.2 | celda 1.3 |\n| celda 2.1 | celda 2.2 | celda 2.3 |\n</code></pre> <p>Quedar\u00eda:</p> encabezado1 encabezado2 encabezado3 celda 1.1 celda 1.2 celda 1.3 celda 2.1 celda 2.2 celda 2.3 <p>Si queremos una celda con m\u00e1s de una l\u00ednea de texto podremos insertar <code>\\</code> (o Shift+Intro) al final de \u00e9sta.</p>"},{"location":"UD01/UD01_T04_Markdown.html#enlaces","title":"Enlaces","text":"<p>Para generar en enlace en Markdown se debe poner un c\u00f3digo con dos partes:</p> <ul> <li><code>[texto del enlace]</code>, que es el texto que se va a a mostrar, </li> <li>Y despu\u00e9s <code>(nombrefichero.md)</code>, que es la URL o el nombre de archivo al que se va a vincular.</li> </ul> <pre><code>[link text](file-name.md)\n</code></pre> <p>Un ejemplo:</p> <p>\u200b       [enlace a web del centro](https://iesmre.com)</p> <p>La visualizaci\u00f3n del ejemplo anterior:</p> <p>\u200b       enlace a web del centro</p>"},{"location":"UD01/UD01_T04_Markdown.html#imagenes","title":"Im\u00e1genes","text":"<p>Para insertar una imagen se debe poner un c\u00f3digo con dos partes:</p> <ul> <li><code>![texto alternativo]</code>, que es el texto que se va a a mostrar si la imagen no pudiera visualizarse, </li> <li>Seguido de <code>(nombrefichero.extension)</code>, que es el archivo imagen (con su direcci\u00f3n).</li> </ul> <pre><code>[texto alternativo](file-name.md)\n</code></pre> <p>Un ejemplo:</p> <p>\u200b   [logo markdown](assets/mardown_logo.png)</p> <p>La visualizaci\u00f3n de la imagen anterior:</p> <p></p>"},{"location":"UD01/UD01_T04_Markdown.html#codigo-de-bloque","title":"C\u00f3digo de bloque","text":"<p>Uno de los puntos m\u00e1s \u00fatiles de Markdown a la hora de crear un documento con texto espec\u00edfico de inform\u00e1tica es que admite la colocaci\u00f3n de bloques de c\u00f3digo tanto en l\u00ednea como en un bloque \"delimitado\" independiente entre frases.</p> <p>Para ello utilizaremos:</p> <ul> <li>Dos comillas invertidas <code>`` </code> si queremos escribir c\u00f3digo dentro de la misma l\u00ednea de texto del p\u00e1rrafo.</li> <li>Si queremos crear un bloque de c\u00f3digo multil\u00ednea, con un lenguaje espec\u00edfico, pondremos <code>```</code> seguido del <code>nombre del lenguaje del bloque</code>.</li> </ul> <p>Unos ejemplos:</p> <ul> <li>En la misma l\u00ednea:</li> </ul> <p>\u200b           ...estamos escribiendo un p\u00e1rrafo <code>``insertar el bloque</code> y seguimos escribiendo...</p> <ul> <li>Un bloque de c\u00f3digo:</li> </ul> <p>\u200b <code>```javascript</code> y escribimos el c\u00f3digo.</p> <pre><code>function holamundo(){\n    console.log (\"hola mundo web\");\n}\n</code></pre>"},{"location":"UD01/UD01_T04_Markdown.html#linia-horizontal","title":"L\u00ednia horizontal","text":"<p>Para crear una l\u00ednea horizontal, de separaci\u00f3n de contenido por ejemplo, se a\u00f1aden tres guiones:  <code>---</code></p> <p>Visualizaci\u00f3n:</p>"},{"location":"UD01/UD01_T04_Markdown.html#insertar-emojis","title":"Insertar emojis","text":"<p>Para insertar emojis basta con utilizar <code>:</code> seguido del nombre del emojii y cerrar con otro <code>:</code>.</p> <p>Podemos observar, que en algunos editores markdown, al escribir, por ejemplo, :a nos muestra todos los emojiis con la inicial a.</p> <p>Por ejemplo:    <code>: star :</code> </p> <p>Visualizaci\u00f3n:   </p>"},{"location":"UD01/UD01_T04_Markdown.html#crear-diagrama-de-flujo","title":"Crear diagrama de flujo","text":"<p>Cuando queremos crear documentos con elementos gr\u00e1ficos como diagramas de flujo, debemos generar una especie de c\u00f3digo para construirlos.</p> <ul> <li>Por eso, comenzaremos introduciendo la l\u00ednea de inicio:       <code>```flow</code> </li> <li>Es conveniente asignar un nombre (por ejemplo: st, op, cond, e...) a cada elemento que conforma el diagrama; as\u00ed, despu\u00e9s podremos unir todos estos.</li> <li>Forma de inicio:  <code>st=&gt;start: Nombre</code></li> <li>Forma de fin:  <code>e=&gt;end: Nombre</code></li> <li> <p>Rect\u00e1ngulo:  <code>op=&gt;operation: texto de nombre</code></p> </li> <li> <p>Condici\u00f3n:  <code>cond=&gt;condition: texto de la condici\u00f3n (Si o No?)</code></p> </li> <li> <p>Subrutina: <code>sub1=&gt;subroutine: nombre subtarea</code></p> </li> <li>EntradaSalida: <code>io1=&gt;inputoutput: nombre elemento entrada/salida</code></li> <li> <p>L\u00edneas:  <code>st-&gt;op-&gt;cond</code></p> </li> <li> <p>Caminos de condiciones:  <code>cond(yes)**-&gt;**e</code>   y <code>cond(no)-&gt;op</code></p> </li> <li> <p>L\u00ednea de cierre:  <code>```</code> </p> </li> </ul> <p>Ejemplo:</p> <pre><code>```flow\nst=&gt;start: Usuario\ne=&gt;end: Acceso\nop=&gt;operation: Operacion de usuario\ncond=&gt;condition: S\u00ed o No?\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op\n```\n</code></pre> <p>Visualizaci\u00f3n:</p> <p></p> <p>Intenta realizar un diagrama para \"programar\" un almuerzo. En \u00e9l, deber\u00e1s dar los buenos d\u00edas, indicar que es hora del descanso, y preguntar si algui\u00e9n quiere almorzar. Si no hay nadie que quiera almorzar contigo, debes ir a otro grupo de amigos y volver a indicar que es hora del descanso. Si alguien s\u00ed quiere almorzar escribe en la pizarra que os vais a almorzar y sal al patio.</p>"},{"location":"UD01/UD01_T04_Markdown.html#crear-secuencias","title":"Crear secuencias","text":"<p>En la secuenciaci\u00f3n podemos observar que es bastante parecido a la creaci\u00f3n de diagramas; pero la primera l\u00ednea (crear un bloque de c\u00f3digo) no ser\u00e0 flow sino sequence.</p> <pre><code>```sequence\nAna-&gt;Mundo: Hola Mundo \nNote right of Mundo: Mundo est\u00e1 pensando\\nla respuesta\nMundo--&gt;Ana: C\u00f3mo est\u00e1s? \nAna-&gt;&gt;Mundo: Estoy bien gracias!\n```\n</code></pre> <p>Visualizaci\u00f3n:</p> <p></p>"},{"location":"UD01/UD01_T04_Markdown.html#crear-indice","title":"Crear \u00edndice","text":"<p>Para crear el \u00edndice a partir de los encabezados creados debemos insertar <code>[TOC]</code> .</p>"},{"location":"UD01/UD01_T04_Markdown.html#tarea","title":"Tarea","text":"<p>Como tarea, se propone:</p> <ul> <li>Crear un documento markdown en tu editor markdown favorito (por ejemplo Typora o VSCode) que documente informaci\u00f3n acerca de t\u00ed mismo.</li> <li>En dicho documento crear t\u00edtulo, \u00edndice.</li> <li>A\u00f1adir 4 encabezados principales (y otros encabezados secundarios dentro de \u00e9stos) en el que hables por ejemplo de: Tus datos, Curr\u00edculum, Aficiones y Otros datos de inter\u00e9s. No hace falta que indiques informaci\u00f3n personal relevante. (O te la puedes inventar)</li> <li>Se valorar\u00e1 la inclusi\u00f3n de distintos elementos como: negrita-cursiva-subrayado, listas ordenadas-desordenadas-tareas, enlaces, im\u00e1genes, citas, c\u00f3digo, etc.</li> <li>Si te atreves con ello, crea un diagrama de flujo en el que indiques los pasos que realizas un s\u00e1bado por la ma\u00f1ana.</li> <li>Exporta el documento a pdf.</li> </ul> <p>Subir a la plataforma AULES un documento Markdown (.md)  y otro documento PDF (.pdf) que sea la exportaci\u00f3n del primero.</p>"},{"location":"UD01/UD01_ejercicios_ES.html","title":"Ejercicios","text":""},{"location":"UD01/UD01_ejercicios_ES.html#ejercicios-de-la-ud01","title":"Ejercicios de la UD01","text":""},{"location":"UD01/UD01_ejercicios_ES.html#retos","title":"Retos","text":"<ol> <li> <p>(Reto1) Haga un programa que eval\u00fae una expresi\u00f3n que contenga literales de los cuatro tipos de datos  (booleano, entero, real y car\u00e1cter) y la muestre por pantalla.</p> </li> <li> <p>(Reto2) En su entorno de trabajo, cree el programa siguiente. Obs\u00e9rvese que  pasa exactamente. Entonces, intente arreglar el problema.</p> <pre><code>// Un programa que usa un entero muuuuy grande\npublic class TresMilMilions {\n    public static void main (String [] args) {\n        System.out.println (3000000000);\n    }\n}\n</code></pre> </li> <li> <p>(Reto3) Haga un programa con dos variables que, sin usar ning\u00fan literal ninguna parte excepto para  inicializar estas variables, vaya estimando e imprimiendo sucesivamente  los 5 primeros valores de la tabla de multiplicar del 4. Puede usar  operadores aritm\u00e9ticos y de asignaci\u00f3n, si desea.</p> </li> <li> <p>(Reto4) Haga dos programas, uno que muestre por pantalla la tabla de multiplicar del 3, y otro, la del 5. Los dos deben ser exactamente  iguales, letra por letra, excepto en un \u00fanico literal dentro de todo el  c\u00f3digo.</p> </li> <li> <p>(Reto5) Experimente qu\u00e9 pasa si en el siguiente programa inicializa la variable  realLargo con un valor con varios decimales. El programa contin\u00faa  compilando? \u00bfQu\u00e9 resultado da? Despu\u00e9s int\u00e9ntelo asignando un valor  superior al rango de los enteros (por ejemplo, 3000000000.0).</p> <pre><code>public class ConversionExplicita {\n    public static void main (String[] args) {\n        double realLlarg = 3000000000.0;\n        // Asignaci\u00f3n incorrecta. \u00bfUn real tiene decimales, no?\n        long enterLlarg = (long) realLlarg;\n        // Asignaci\u00f3n incorrecta. \u00bfUn entero largo tiene un rango mayor que un entero, no?\n        int enter = (int) enterLlarg;\n        System.out.println (enter);\n    }\n}\n</code></pre> </li> <li> <p>(Reto6) Haga un programa que muestre en pantalla de forma tabulada la tabla de verdad de una  expresi\u00f3n de disyunci\u00f3n entre dos variables booleanas.</p> </li> <li> <p>(Reto7) Haga un programa que muestre por pantalla la multiplicaci\u00f3n de tres n\u00fameros reales entrados por teclado.</p> </li> </ol>"},{"location":"UD01/UD01_ejercicios_ES.html#ejercicios","title":"Ejercicios","text":"<p>Solo se puede usar en esta actividad ya que no se ha explicado en profundidad en este tema y lo pueden confundir con el  <code>System.console().readLine()</code>; </p> <ol> <li> <p>(Ejs1) Probar la E/S elemental: Escribe el peque\u00f1o programa que aparece a continuaci\u00f3n.</p> <pre><code>import java.util.*;\npublic class EntradaSalida {\n    public static void main (String arg[]){\n        Scanner tec = new Scanner(System.in);\n        int a, b;\n        System.out.println(\"Introduce un n\u00famero entero\");\n        a = tec.nextInt();\n        System.out.println(\"Introduce otro n\u00famero entero\");\n        b = tec.nextInt();\n        System.out.println(\"Los n\u00fameros introducidos son \" + a + \" y \" + b);\n    }\n}\n</code></pre> <p>Ejec\u00fatalo para ver como se comporta el programa.</p> <p>\u00bfQu\u00e9 ocurre si cuando nos pide un n\u00famero entero le damos un n\u00famero real? \u00bfY si le damos un car\u00e1cter no num\u00e9rico?</p> <p>\u00bfQu\u00e9 ocurre si eliminamos la instrucci\u00f3n <code>import java.util.*</code>;</p> </li> <li> <p>(Ejs2) Averigua mediante pruebas:</p> <ol> <li>\u00bfEs posible escribir dos instrucciones en la misma l\u00ednea de un programa?</li> <li>\u00bfSe puede \"romper\" una instrucci\u00f3n entre varias l\u00edneas?</li> <li>Algunos lenguajes de programaci\u00f3n dan un valor por defecto a las variables cuando las declaramos sin inicializarlas. Otros no permiten usar el contenido de una variable que no haya sido previamente inicializada. \u00bfCu\u00e1l es comportamiento de Java? </li> </ol> </li> <li> <p>(Esj3) \u00bfCu\u00e1les de los siguientes identificadores son v\u00e1lidos y cuales no? Pru\u00e9balos cuando tengas duda</p> <ol> <li><code>n</code></li> <li><code>MiProblema</code></li> <li><code>MiJuego</code></li> <li><code>Mi Juego</code></li> <li><code>Int</code></li> <li><code>Jose&amp;Co</code></li> <li><code>A b</code></li> <li><code>1rApellido</code></li> <li><code>aaaaaaaaaaaa</code></li> <li><code>NombreApellidos</code> </li> <li><code>Saldo-actual</code> </li> <li><code>Universidad Alicante</code></li> <li><code>Juan=Rubio</code></li> <li><code>Edad5</code></li> <li><code>_5Java</code></li> <li><code>true</code></li> <li><code>_false</code></li> <li><code>f_alse</code></li> </ol> </li> <li> <p>(Por2) Escribir un programa que lea un entero desde teclado, lo multiplique por 2, y a continuaci\u00f3n escriba el resultado en la pantalla:</p> <p>Ejemplo de ejecuci\u00f3n:</p> <pre><code>Escribe un n\u00famero:\n3\nEl doble de 3 es 6\n</code></pre> </li> <li> <p>(Intercambio) Escribir un programa que \u2026</p> <ol> <li>Lea desde teclado dos valores de texto. Llama a las variables s1 y s2.</li> <li>Muestre los valores introducidos por el usuario</li> <li>Intercambie el valor de s1 y s2 (s1 pasa a  valer lo que val\u00eda s2 y viceversa)</li> <li>Muestre de nuevo los valores, ahora con su valor intercambiado</li> </ol> <p>Ejemplo de ejecuci\u00f3n:</p> <pre><code>Escribe un texto para s1: David\nEscribe un texto para s2: Maria\nAntes de intercambiar    s1: David  y   s2: Maria\nDespu\u00e9s de intercambiar  s1: Maria  y   s2: David\n</code></pre> </li> <li> <p>(ExpresionesMatematicas) Escribir las siguientes expresiones siguiendo la sintaxis de Java.</p> <ol> <li>\\(\\frac{x}{y}+1\\)</li> <li>\\(\\frac{x+y}{x-y}\\)</li> <li>\\([ \\frac{b}{c+d}]\\)</li> <li>\\((a+b)\u00b2\\)</li> <li>\\(\\frac{x+\\frac{y}{2}}{x-\\frac{y}{z}}\\)</li> <li>\\(\\frac{xy}{1-4Zx}\\)</li> <li>\\((a+b)\\frac{c}{d}\\)</li> <li>\\(\\frac{xy}{mn}\\)</li> </ol> </li> <li> <p>(Superficie) Escribir un programa que solicite al usuario la longitud y la anchura de una habitaci\u00f3n y a continuaci\u00f3n muestre su superficie (longitud por anchura).</p> </li> <li> <p>(Medidas) Escribir un programa que convierta una medida dada en pies a sus equivalentes en yardas, pulgadas, cent\u00edmetros  y metros, sabiendo que 1 pie = 12 pulgadas, 1 yarda = 3 pies, 1 pulgada = 2.54 cm, 1 m = 100 cm.</p> </li> <li> <p>(Segundos) Escribir un programa que, dada una cantidad de segundos, introducida por teclado, la desglose en d\u00edas, horas, minutos y segundos.  </p> <p>Ejemplo de ejecuci\u00f3n: </p> <pre><code>Introduce cantidad de segundos: 3661\n3661 segundos son:\n0 dias\n1 horas\n1 minutos\n1 segundos\n</code></pre> </li> <li> <p>(Fuerza) La fuerza de atracci\u00f3n entre dos masas m1 y m2 separadas por una distancia d, est\u00e1 dada por la f\u00f3rmula:     $$     F= \\frac{(G \u00b7 m1 \u00b7 m2)}{d^2}     $$</p> <p>donde G es la constante de gravitaci\u00f3n universal G= 6.67430 \u00b7 10 <sup>\u201311</sup>. </p> <p>Escribir un programa que lea la masa de dos cuerpos y la distancia entre ellos y a continuaci\u00f3n obtenga su fuerza de atracci\u00f3n.</p> </li> <li> <p>(C\u00edrculo) Escribir un programa que calcule la longitud de la circunferencia y el \u00e1rea del c\u00edrculo para un valor del radio introducido por teclado.</p> </li> <li> <p>(Dados) Escribir un programa que simula el lanzamiento de dos dados.</p> <pre><code>Dado 1 : 5\nDado 2: 4\nPuntuaci\u00f3n total: 9\n</code></pre> </li> <li> <p>(UltimaCifra) Escribir un programa que muestre la \u00faltima cifra de un n\u00famero entero que introduce el usuario por teclado.</p> <p>Pista: \u00bfQu\u00e9 devuelve <code>a%10</code> ?</p> <pre><code>Introduce un n\u00famero entero: 3761\nLa \u00faltima cifra de 3761 es 1\n</code></pre> </li> <li> <p>(PenultimaCifra) Escribir un programa que muestre la pen\u00faltima cifra de un n\u00famero entero que introduce el usuario por teclado.</p> <pre><code>Introduce un n\u00famero entero: 3761\nLa pen\u00faltima cifra de 3761 es 6\n</code></pre> <p>Una vez hayas comprobado que el programa funciona correctamente, prueba qu\u00e9 ocurre si el usuario introduce un valor de una sola cifra (por ejemlo 4). Explica el resultado mostrado por el programa.</p> </li> <li> <p>(Redondear1) <code>Math.round(x)</code> redondea x de manera que este queda sin decimales. (<code>Math.round(35.5289)</code> da como resultado <code>36</code>)</p> <p>Trata de escribir un programa en el que el usuario introduzca un n\u00famero real y a continuaci\u00f3n se muestre redondeado a un decimal. Pista : combinar productos, divisiones y Math.round()</p> <p>Ejemplo de ejecuci\u00f3n:</p> <pre><code>Introduce un n\u00famero real: 35.5289\nEl n\u00famero 35.5289, redondeado a un decimal es 35.5\n</code></pre> </li> <li> <p>(ExpresionesAritmeticas) 16. Cu\u00e1l es el valor resultante de dada una de las siguientes expresiones</p> <ol> <li><code>5 * 4 \u2013 3 * 6</code></li> <li><code>4 * 5 * 2</code></li> <li><code>(24 + 2 * 6) / 4</code></li> <li><code>8 / 2 / 2 * 5</code></li> <li><code>3 + 4 * (8  * (4 \u2013  (9 + 3) /  6 ))</code></li> <li><code>4 * 3 * 5 + 8 * 4 * 2</code></li> <li><code>4 \u2013 40 % 5</code></li> <li><code>4 * 3 / 2</code></li> <li><code>4 / 2 * 3</code></li> <li><code>213 /100</code></li> </ol> </li> <li> <p>(Einstein) La famosa ecuaci\u00f3n de Einstein para la conversi\u00f3n de una masa m en energ\u00eda viene dada por la f\u00f3rmula E=mc<sup>2</sup>, donde c es la velocidad de la luz que vale 2.997925 \u00b7 10<sup>8</sup> m/s. Escribir un programa que lea el valor de la masa y obtenga la energ\u00eda correspondiente seg\u00fan la anterior f\u00f3rmula.</p> </li> <li> <p>(FragmentosCodigo) Indica cuales ser\u00e1n los valores de las variables despu\u00e9s de ejecutar cada uno de los siguientes fragmentos de c\u00f3digo. Resuelve el ejercicio sin escribir los programas correspondientes y probarlos.</p> <ol> <li> <p><code>java     int a=3, b = 2;     a = b + b;     b = a + a;</code></p> </li> <li> <p><code>java     int a=3,b=0;     b = b - 1;     a = a + b;</code></p> </li> <li> <p><code>java     int a, b=5;     b++;     ++b;     a= b+1;</code></p> </li> <li> <p><code>java     int a = 5,b;     b = a++;</code></p> </li> <li> <p><code>java     int a = 5,b;     b = ++a;</code></p> </li> <li> <p><code>java     int a=2, b=3;     b+=a;</code></p> </li> <li> <p><code>java     int a=2, b=3;     b-=a;     a=-b;</code></p> </li> <li> <p><code>java     int a=2, b=3;     b%=a;</code></p> </li> <li> <p><code>java     int a=2,b=3,c=4;     a = --b + c++;     b+=a;</code></p> </li> </ol> </li> </ol>"},{"location":"UD01/UD01_ejercicios_ES.html#expresiones-logicas","title":"Expresiones L\u00f3gicas","text":"<ol> <li> <p>Sean 4 variables enteras:</p> <pre><code>int m, j, p, v ;\n</code></pre> <p>que contienen respectivamente la edad de Miguel, Julio, Pablo y Vicente. </p> <p>Expresar las siguientes afirmaciones utilizando operadores l\u00f3gicos y relacionales</p> <p>Ejemplo: <code>Miguel es mayor de edad.</code></p> <p>Soluci\u00f3n: <code>m &gt;= 18</code></p> <ol> <li>(Logica1) Miguel es menor de edad.</li> <li>(Logica2) Miguel es mayor que Julio</li> <li>(Logica3) Miguel es el m\u00e1s viejo.</li> <li>(Logica4) Miguel es el m\u00e1s joven.</li> <li>(Logica5) Miguel no es el m\u00e1s joven.</li> <li>(Logica6) Miguel no es el m\u00e1s viejo.</li> <li>(Logica7) Alguno de ellos es mayor de edad.</li> <li>(Logica8) Miguel y Julio son los m\u00e1s j\u00f3venes.</li> <li>(Logica9) Entre todos tienen m\u00e1s de 100 a\u00f1os.</li> <li>(Logica10) Entre Miguel y Julio suman m\u00e1s edad que Pablo.</li> <li>(Logica11) Entre Miguel y Julio suman m\u00e1s edad que Pablo y Vicente juntos.</li> <li>(Logica12) Si los ordenamos por edades de menor a mayor, Julio es el segundo.</li> <li>(Logica13) Si los ordenamos por edades de menor a mayor, Julio es el segundo y Pablo el tercero.</li> <li>(Logica14) Al menos uno de ellos es menor de edad.</li> <li>(Logica15) Al menos dos de ellos son menores de edad.</li> <li>(Logica16) Todos son menores de edad.</li> <li>(Logica17) Solo dos de ellos son menores de edad.</li> <li>(Logica18) Al menos dos de ellos nacieron el mismo a\u00f1o.</li> <li>(Logica19) Solo dos de ellos nacieron el mismo a\u00f1o.</li> <li>(Logica20) Al menos uno de ellos es menor que Julio</li> <li>(Logica21) Solo uno de ellos es menor que Julio</li> <li>(Logica22) Miguel es mayor de edad y alguno de los otros es menor de edad.</li> </ol> </li> </ol>"},{"location":"UD01/UD01_ejercicios_ES.html#actividades","title":"Actividades","text":"<ol> <li> <p>(Actividad1) Realiza un conversor de euros a pesetas. La cantidad de euros que se quiere convertir debe ser  introducida por teclado.</p> </li> <li> <p>(Actividad2) Realiza un conversor de pesetas a euros. La cantidad de pesetas que  se quiere convertir debe ser introducida por teclado.</p> </li> <li> <p>(Actividad3) Escribe un programa que calcule el \u00e1rea de un rect\u00e1ngulo. (<code>area = base * altura</code>)</p> </li> <li> <p>(Actividad4) Escribe un programa que calcule el \u00e1rea de un tri\u00e1ngulo. (<code>area = (base * altura) / 2</code>)</p> </li> <li> <p>(Actividad5) Escribe un programa que calcule el salario semanal de un empleado en base a las horas trabajadas, a raz\u00f3n de 12 euros la hora.</p> </li> <li> <p>(Actividad6) Realiza un conversor de MiB a KiB. Ayuda</p> </li> <li> <p>(Actividad7) Realiza un conversor de Kib a Mib. Ayuda</p> </li> <li> <p>(Actividad8) Realiza un programa en Java que genere letras de forma aleatoria.</p> </li> <li> <p>(Actividad9) Realiza un programa en Java que genere el n\u00famero premiado del Cup\u00f3n de la ONCE.</p> </li> <li> <p>(Actividad10) Modificar el siguiente programa para que compile y funcione:</p> <pre><code>public class Activ10 {\n    public static void main(String[] args) {\n        int n1 = 50, int n2 = 30,\n        boolean suma = 0;\n        suma = n1 + n2;\n        System.out.println(\"LA SUMA ES: \" + suma);\n    }\n}\n</code></pre> </li> <li> <p>(Actividad11) Modificar el siguiente programa para que compile y funcione:</p> <pre><code>public class Activ11 {\n    public static void main(String[] args) { \n        int numero = 2;\n        cuad = numero * n\u00famero;\n        System.out.println(\"EL CUADRADO DE \"+NUMERO+\" ES: \"+cuad);\n    }\n}\n</code></pre> </li> <li> <p>(Actividad12) Indicar que valor devolver\u00e1 la ejecuci\u00f3n del siguiente programa:</p> <pre><code>public class Activ12 {\n    public static void main(String[] args) {\n        int num = 5;\n        num += num - 1 * 4 + 1;\n        System.out.println(num);\n    }\n}\n</code></pre> </li> <li> <p>(Actividad13) Indicar que valor devolver\u00e1 la ejecuci\u00f3n del siguiente programa:</p> <pre><code>public class Activ13 {\n    public static void main(String[] args) {\n        int num = 4;\n        num %= 7 * num % 3 * 3;   \n        System.out.println(num);\n    }\n}\n</code></pre> </li> <li> <p>(Actividad14) Realizar un programa que muestre por pantalla respetando los saltos de carro el siguiente texto (con un solo <code>println</code>):</p> <pre><code>Me gusta la programaci\u00f3n\ncada d\u00eda m\u00e1s\n</code></pre> </li> <li> <p>(Actividad15) Realiza un programa en Java que tenga las variables edad, nivel de estudios e ingresos y almacene en una variable llamada jasp el valor verdadero si la edad es menor o igual a 28 y el nivel de estudios es mayor a 3, o bien la edad es menor de 30 y los ingresos superiores a 28000. En caso contrario almacenar el valor falso.</p> </li> <li> <p>(Actividad16) Realizar un programa que realice el c\u00e1lculo del precio de un producto teniendo en cuenta que el producto vale 120 \u20ac, tiene un descuento del 15% y el IVA que se le aplica es del 21%.</p> </li> <li> <p>(Actividad17) Realiza un programa que calcule la nota que hace falta sacar en el segundo examen de la asignatura Programaci\u00f3n para obtener la media deseada. Hay que tener en cuenta que la nota del primer examen cuenta el 40% y la del segundo examen un 60%.     Ejemplo 1:</p> <pre><code>Introduce la nota del primer examen: 7\n\u00bfQu\u00e9 nota quieres sacar en el trimestre? 8.5\nPara tener un 8.5 en el trimestre necesitas sacar un 9.5 en el segundo examen.\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Introduce la nota del primer examen: 8\n\u00bfQu\u00e9 nota quieres sacar en el trimestre? 7\nPara tener un 7 en el trimestre necesitas sacar un 6.333333333 en el segundo examen.\n</code></pre> </li> <li> <p>(Actividad18) Realizar un programa que dado un importe en euros nos indique el m\u00ednimo n\u00famero de billetes y la cantidad sobrante de euros. Debes usar el operador condicional <code>?:</code></p> <pre><code>\u00bfCu\u00e1ntos euros tienes?: 232\n1 billete de 200 \u20ac\n1 billete de 20 \u20ac\n1 billete de 10 \u20ac\nSobran 2 \u20ac\n</code></pre> </li> </ol>"},{"location":"UD02/UD02_ES.html","title":"Utilizaci\u00f3n de Objetos y Clases","text":""},{"location":"UD02/UD02_ES.html#utilizacion-de-objetos-y-clases","title":"Utilizaci\u00f3n de Objetos y Clases","text":""},{"location":"UD02/UD02_ES.html#introduccion-a-la-poo","title":"Introducci\u00f3n a la POO","text":"<p>Orientado a objetos hace referencia a una forma diferente de acometer la tarea del desarrollo de software, frente a otros modelos como el de la programaci\u00f3n imperativa, la programaci\u00f3n funcional o la programaci\u00f3n l\u00f3gica. Supone una reconsideraci\u00f3n de los m\u00e9todos de programaci\u00f3n, de la forma de estructurar la informaci\u00f3n y, ante todo, de la forma de pensar en la resoluci\u00f3n de problemas.</p> <p>La programaci\u00f3n orientada a objetos (POO) es un modelo para la elaboraci\u00f3n de programas que ha impuesto en los \u00faltimos a\u00f1os. Este auge se debe, en parte, a que esta forma de programar est\u00e1 fuertemente basada en la representaci\u00f3n de la realidad; pero tambi\u00e9n a que refuerza el uso de buenos criterios aplicables al desarrollo de programas.</p> <p>Atenci\u00f3n</p> <p>La orientaci\u00f3n a objetos no es un tipo de lenguaje de programaci\u00f3n. Es una metodolog\u00eda de trabajo para crear programas.</p> <p>En POO, un programa es una colecci\u00f3n de objetos que se relacionan entre s\u00ed de distintas formas.</p>"},{"location":"UD02/UD02_ES.html#caracteristicas-de-la-poo","title":"Caracter\u00edsticas de la POO","text":"<p>Cuando hablamos de Programaci\u00f3n Orientada a Objetos, existen una serie de caracter\u00edsticas que se deben cumplir. Cualquier lenguaje de programaci\u00f3n orientado a objetos las debe contemplar. Las caracter\u00edsticas m\u00e1s importantes del paradigma de la programaci\u00f3n orientada a objetos son:</p> <ul> <li>Abstracci\u00f3n. Es el proceso por el cual definimos las caracter\u00edsticas m\u00e1s importantes de un objeto, sin preocuparnos de c\u00f3mo se escribir\u00e1n en el c\u00f3digo del programa, simplemente lo definimos de forma general. En la Programaci\u00f3n Orientada a Objetos la herramienta m\u00e1s importante para soportar la abstracci\u00f3n es la clase. B\u00e1sicamente, una clase es un tipo de dato que agrupa las caracter\u00edsticas comunes de un conjunto de objetos. Poder ver los objetos del mundo real que deseamos trasladar a nuestros programas, en t\u00e9rminos abstractos, resulta de gran utilidad para un buen dise\u00f1o del software, ya que nos ayuda a comprender mejor el problema y a tener una visi\u00f3n global de todo el conjunto. Por ejemplo, si pensamos en una clase Veh\u00edculo que agrupa las caracter\u00edsticas comunes de todos ellos, a partir de dicha clase podr\u00edamos crear objetos como Coche y Cami\u00f3n. Entonces se dice que Veh\u00edculo es una abstracci\u00f3n de Coche y de Cami\u00f3n.</li> <li>Modularidad. Una vez que hemos representado el escenario del problema en nuestra aplicaci\u00f3n, tenemos como resultado un conjunto de objetos software a utilizar. Este conjunto de objetos se crean a partir de una o varias clases. Cada clase se encuentra en un archivo diferente, por lo que la modularidad nos permite modificar las caracter\u00edsticas de la clase que define un objeto, sin que esto afecte al resto de clases de la aplicaci\u00f3n.</li> <li>Encapsulaci\u00f3n. Tambi\u00e9n llamada \"ocultamiento de la informaci\u00f3n\". La encapsulaci\u00f3n o encapsulamiento es el mecanismo b\u00e1sico para ocultar la informaci\u00f3n de las partes internas de un objeto a los dem\u00e1s objetos de la aplicaci\u00f3n. Con la encapsulaci\u00f3n un objeto puede ocultar la informaci\u00f3n que contiene al mundo exterior, o bien restringir el acceso a la misma para evitar ser manipulado de forma inadecuada. Por ejemplo, pensemos en un programa con dos objetos, un objeto Persona y otro Coche. Persona se comunica con el objeto Coche para llegar a su destino, utilizando para ello las acciones que Coche tenga definidas como por ejemplo conducir. Es decir, Persona utiliza Coche pero no sabe c\u00f3mo funciona internamente, s\u00f3lo sabe utilizar sus m\u00e9todos o acciones.</li> <li>Jerarqu\u00eda. Mediante esta propiedad podemos definir relaciones de jerarqu\u00edas entre clases y objetos. Las dos jerarqu\u00edas m\u00e1s importantes son la jerarqu\u00eda \"es un\" llamada generalizaci\u00f3n o especializaci\u00f3n y la jerarqu\u00eda \"es parte de\", llamada agregaci\u00f3n. Conviene detallar algunos aspectos:</li> <li>La generalizaci\u00f3n o especializaci\u00f3n, tambi\u00e9n conocida como herencia, permite crear una clase nueva en t\u00e9rminos de una clase ya existente (herencia simple) o de varias clases ya existentes (herencia m\u00faltiple). Por ejemplo, podemos crear la clase CochedeCarreras a partir de la clase Coche, y as\u00ed s\u00f3lo tendremos que definir las nuevas caracter\u00edsticas que tenga.</li> <li>La agregaci\u00f3n, tambi\u00e9n conocida como inclusi\u00f3n, permite agrupar objetos relacionados entre s\u00ed dentro de una clase. As\u00ed, un Coche est\u00e1 formado por Motor, Ruedas, Frenos y Ventanas. Se dice que Coche es una agregaci\u00f3n y Motor, Ruedas, Frenos y Ventanas son agregados de Coche.</li> <li>Polimorfismo. Esta propiedad indica la capacidad de que varias clases creadas a partir de una antecesora realicen una misma acci\u00f3n de forma diferente. Por ejemplo, pensemos en la clase <code>Animal</code> y la acci\u00f3n de expresarse. Nos encontramos que cada tipo de <code>Animal</code> puede hacerlo de manera distinta, los <code>Perros</code> ladran, los <code>Gatos</code> maullan, las <code>Personas</code> hablamos, etc. Dicho de otra manera, el polimorfismo indica la posibilidad de tomar un objeto (de tipo <code>Animal</code>, por ejemplo), e indicarle que realice la acci\u00f3n de expresarse, esta acci\u00f3n ser\u00e1 diferente seg\u00fan el tipo de mam\u00edfero del que se trate.</li> </ul>"},{"location":"UD02/UD02_ES.html#objetos-y-clases","title":"Objetos y Clases","text":""},{"location":"UD02/UD02_ES.html#caracteristicas-de-los-objetos","title":"Caracter\u00edsticas de los objetos","text":"<p>En este contexto, un objeto de software es una representaci\u00f3n de un objeto del mundo real, compuesto de una serie de caracter\u00edsticas y un comportamiento espec\u00edfico. Pero \u00bfqu\u00e9 es m\u00e1s concretamente un objeto en Programaci\u00f3n Orientada a Objetos? Ve\u00e1moslo.</p> <p>Definici\u00f3n</p> <p>Un objeto es un conjunto de datos con las operaciones definidas para ellos. Los objetos tienen un estado y un comportamiento.</p> <p>Por tanto, estudiando los objetos que est\u00e1n presentes en un problema podemos dar con la soluci\u00f3n a dicho problema. Los objetos tienen unas caracter\u00edsticas fundamentales que los distinguen:</p> <ul> <li>Identidad. Es la caracter\u00edstica que permite diferenciar un objeto de otro. De esta manera, aunque dos objetos sean exactamente iguales en sus atributos, son distintos entre s\u00ed. Puede ser una direcci\u00f3n de memoria, el nombre del objeto o cualquier otro elemento que utilice el lenguaje para distinguirlos. Por ejemplo, dos veh\u00edculos que hayan salido de la misma cadena de fabricaci\u00f3n y sean iguales aparentemente, son distintos porque tienen un c\u00f3digo que los identifica.</li> <li>Estado. El estado de un objeto viene determinado por una serie de par\u00e1metros o atributos que lo describen, y los valores de \u00e9stos. Por ejemplo, si tenemos un objeto <code>Coche</code>, el estado estar\u00eda definido por atributos como <code>Marca</code>, <code>Modelo</code>, <code>Color</code>, <code>Cilindrada</code>, etc.</li> <li>Comportamiento. Son las acciones que se pueden realizar sobre el objeto. En otras palabras, son los m\u00e9todos o procedimientos que realiza el objeto. Siguiendo con el ejemplo del objeto Coche, el el comportamiento ser\u00edan acciones como: <code>arrancar()</code>, <code>parar()</code>, <code>acelerar()</code>, <code>frenar()</code>, etc. Definici\u00f3n de clases.</li> </ul> <p>Una clase java se escribe en un fichero con extensi\u00f3n <code>.java</code> que tiene el mismo nombre que la clase. Por ejemplo la clase <code>Veh\u00edculo</code> se escribir\u00eda en el fichero <code>Vehiculo.java</code>.</p> <p>Cuando la clase se compila se obtiene un fichero con el mismo nombre que la clase y extensi\u00f3n <code>.class</code>. Ej.: <code>Vehiculo.class</code>.</p> <p>Atenci\u00f3n</p> <p>Los identificadores de clase siguen las mismas reglas que otros identificadores de Java (contienen car\u00e1cter alfanum\u00e9ricos y especiales, no pueden comenzar por un d\u00edgito, no pueden coincidir con una palabra reservada, etc.). Por convenio los identificadores de las clases comienzan por may\u00fasculas.</p>"},{"location":"UD02/UD02_ES.html#propiedades-y-metodos-de-los-objetos","title":"Propiedades y m\u00e9todos de los objetos","text":"<p>Como acabamos de ver todo objeto tiene un estado y un comportamiento. Concretando un poco m\u00e1s, las partes de un objeto son:</p> <ul> <li>Campos, Atributos o Propiedades: Parte del objeto que almacena los datos. Tambi\u00e9n se les denomina Variables Miembro. Estos datos pueden ser de cualquier tipo primitivo (<code>boolean</code>, <code>char</code>, <code>int</code>, <code>double</code>, etc) o ser a su vez otro objeto. Por ejemplo, un objeto de la clase <code>Coche</code> puede tener un objeto de la clase <code>Ruedas</code> (o m\u00e1s concretamente cuatro).</li> <li>M\u00e9todos o Funciones Miembro: Parte del objeto que lleva a cabo las operaciones sobre los atributos definidos para ese objeto.</li> </ul> <p>La idea principal es que el objeto re\u00fane en una sola entidad los datos y las operaciones, y para acceder a los datos privados del objeto debemos utilizar los m\u00e9todos que hay definidos para ese objeto.</p> <p>La \u00fanica forma de manipular la informaci\u00f3n del objeto es a trav\u00e9s de sus m\u00e9todos. Es decir, si queremos saber el valor de alg\u00fan atributo, tenemos que utilizar el m\u00e9todo que nos muestre el valor de ese atributo.  De esta forma, evitamos que m\u00e9todos externos puedan alterar los datos del objeto de manera inadecuada. Se dice que los datos y los m\u00e9todos est\u00e1n encapsulados dentro del objeto.</p>"},{"location":"UD02/UD02_ES.html#atributos","title":"Atributos","text":"<p>Los atributos representan la informaci\u00f3n que almacenan los objetos de la clase. Los atributos son declaraciones de variables dentro de la clase.</p> <p>Se sigue la siguiente sintaxis (los corchetes indican opcionalidad):</p> <pre><code>[\u00e1mbito] tipo nombreDelAtributo;\n[\u00e1mbito] tipo nombreDelAtributo1, nombreDelAtributo2, ...;\n</code></pre> <p>donde  \u2026</p> <ul> <li>\u00e1mbito permite indicar desde qu\u00e9 clases es accesible el atributo.</li> <li>tipo indica el tipo de dato del atributo.</li> <li>nombreDelAtributo es el identificador del atributo.</li> </ul>"},{"location":"UD02/UD02_ES.html#metodos","title":"M\u00e9todos","text":"<p>Los m\u00e9todos determinan qu\u00e9 puede hacer un objeto de la clase, es decir, su comportamiento.</p> <p>Los m\u00e9todos realizan alg\u00fan tipo de acci\u00f3n o tarea y, en ocasiones, devuelven un resultado.</p> <p>Para realizar su trabajo puede ser necesario que pasemos al m\u00e9todo cierta informaci\u00f3n. Por ejemplo, cuando llamamos al m\u00e9todo <code>round</code> de la clase <code>Math</code>, para redondear un n\u00famero real, debemos indicar al m\u00e9todo cual es el n\u00famero que queremos redondear. A esa informaci\u00f3n que pasamos a los m\u00e9todos se le llama par\u00e1metros o argumentos.</p> <p>Ejemplo</p> <pre><code>//Al llamar a Math.round, pasamos al m\u00e9todo un par\u00e1metro \nint redondeado1 = Math.round(numero);\nint redondeado2 = Math.round(125.687);\n...\n//Al llamar a Math.pow, pasamos al m\u00e9todo dos par\u00e1metros\nint pot1 = Math.pow(a,b);\nint pot2 = Math.pow(a,6);\n...\n</code></pre> <p>En la definici\u00f3n de un m\u00e9todo se distinguen dos partes</p> <ul> <li>La cabecera, en la cual se indica informaci\u00f3n relevante sobre el m\u00e9todo.</li> <li>El cuerpo, que contiene las instrucciones mediante las cuales el m\u00e9todo realiza su tarea.</li> </ul> <p>Para definirlos, se sigue la siguiente sintaxis (los corchetes indican opcionalidad):</p> <p>Ejemplo</p> <p></p><pre><code>public static void main (String[] args)\n[\u00e1mbito] [static] tipoDevuelto nombreDelMetodo ([par\u00e1metros]){\n    //Cuerpo del m\u00e9todo (instrucciones)\n    ...\n    ...\n    ...\n}\n</code></pre> donde... <ul> <li> <p>\u00e1mbito permite indicar desde qu\u00e9 clases es accesible el m\u00e9todo.</p> </li> <li> <p>static, cuando aparece, indica que el m\u00e9todo es est\u00e1tico.</p> </li> <li> <p>tipoDevuelto  indica el tipo de dato que devuelve el m\u00e9todo. La palabra reservada void (que no es ning\u00fan tipo de dato), indicar\u00eda que el m\u00e9todo no devuelve nada.</p> </li> <li> <p>nombreDelMetodo es el identificador del m\u00e9todo</p> </li> <li> <p>par\u00e1metros es una lista, separada por comas, de los par\u00e1metros que recibe el m\u00e9todo. De cada par\u00e1metro se indica el tipo y un identificador.</p> </li> </ul>"},{"location":"UD02/UD02_ES.html#interaccion-entre-objetos","title":"Interacci\u00f3n entre objetos","text":"<p>Dentro de un programa los objetos se comunican llamando unos a otros a sus m\u00e9todos. Los m\u00e9todos est\u00e1n dentro de los objetos y describen el comportamiento de un objeto cuando recibe una llamada a uno de sus m\u00e9todos. En otras palabras, cuando un objeto, <code>objeto1</code>, quiere actuar sobre otro, <code>objeto2</code>, tiene que ejecutar uno de sus m\u00e9todos. Entonces se dice que el <code>objeto2</code> recibe un mensaje del <code>objeto1</code>.</p> <p>Un mensaje es la acci\u00f3n que realiza un objeto. Un m\u00e9todo es la funci\u00f3n o procedimiento al que se llama para actuar sobre un objeto.</p> <p>Los distintos mensajes que puede recibir un objeto o a los que puede responder reciben el nombre de protocolo de ese objeto.</p> <p>El proceso de interacci\u00f3n entre objetos se suele resumir diciendo que se ha \"enviado un mensaje\" (hecho una petici\u00f3n) a un objeto, y el objeto determina \"qu\u00e9 hacer con el mensaje\" (ejecuta el c\u00f3digo del m\u00e9todo). Cuando se ejecuta un programa se producen las siguientes acciones:</p> <ul> <li>Creaci\u00f3n de los objetos a medida que se necesitan.</li> <li>Comunicaci\u00f3n entre los objetos mediante el env\u00edo de mensajes unos a otros, o el usuario a los objetos.</li> <li>Eliminaci\u00f3n de los objetos cuando no son necesarios para dejar espacio libre en la memoria del computador.</li> </ul> <p>Recuerda</p> <p>Los objetos se pueden comunicar entre ellos invocando a los m\u00e9todos de los otros objetos.</p>"},{"location":"UD02/UD02_ES.html#clases","title":"Clases","text":"<p>Hasta ahora hemos visto lo que son los objetos. Un programa inform\u00e1tico se compone de muchos objetos, algunos de los cuales comparten la misma estructura y comportamiento. Si tuvi\u00e9ramos que definir su estructura y comportamiento del objeto cada vez que queremos crear un objeto, estar\u00edamos utilizando mucho c\u00f3digo redundante. Por ello lo que se hace es crear una clase, que es una descripci\u00f3n de un conjunto de objetos que comparten una estructura y un comportamiento com\u00fan. Y a partir de la clase, se crean tantas \"copias\" o \"instancias\" como necesitemos. Esas copias son los objetos de la clase.</p> <p>Recuerda</p> <p>Las clases constan de datos y m\u00e9todos que resumen las caracter\u00edsticas comunes de un conjunto de objetos. Un programa inform\u00e1tico est\u00e1 compuesto por un conjunto de clases, a partir de las cuales se crean objetos que interact\u00faan entre s\u00ed.</p> <p>En otras palabras, una clase es una plantilla o prototipo donde se especifican:</p> <ul> <li>Los atributos comunes a todos los objetos de la clase.</li> <li>Los m\u00e9todos que pueden utilizarse para manejar esos objetos.</li> </ul> <p>Para declarar una clase en Java se utiliza la palabra reservada <code>class</code>. La declaraci\u00f3n de una clase est\u00e1 compuesta por:</p> <ul> <li>Cabecera de la clase. La cabecera es un poco m\u00e1s compleja que como aqu\u00ed definimos, pero por ahora   s\u00f3lo nos interesa saber que est\u00e1 compuesta por una serie de modificadores, en este caso hemos puesto public que indica que es una clase p\u00fablica a la que pueden acceder otras clases del programa, la palabra reservada class y el nombre de la clase.</li> <li>Cuerpo de la clase. En \u00e9l se especifican encerrados entre llaves los atributos y los m\u00e9todos que va a tener la clase.</li> </ul> <p>Ejemplo</p> <pre><code>//Paquete al que pertenece la clase\npackage NombreDePaquete;\n\n//Paquetes que importa la clase\nimport ...\n\n...\n\npublic class NombreDeLaClase {\n    // Atributos de la clase\n    ...\n    ...\n    ...\n    // M\u00e9todos de la clase\n    ...\n    ...\n    ...\n}\n</code></pre> <p>Ejemplo</p> <p>En la unidad anterior ya hemos utilizado clases, aunque a\u00fan no sab\u00edamos su significado exacto. Por ejemplo, en los ejemplos de la unidad o en la tarea, est\u00e1bamos utilizando clases, todas ellas eran clases principales, no ten\u00edan ning\u00fan atributo y el \u00fanico m\u00e9todo del que dispon\u00edan era el m\u00e9todo <code>main()</code>.</p> <p>Ejemplo</p> <p>Tambi\u00e9n es una clase <code>Math</code> y su m\u00e9todo era <code>random()</code>, el que nos permit\u00eda usar n\u00fameros aleatorios.</p> <p>Ejemplo</p> <p>El m\u00e9todo <code>main()</code> se utiliza para indicar que se trata de una clase principal, a partir de la cual va a empezar la ejecuci\u00f3n del programa. Este m\u00e9todo no aparece si la clase que estamos creando no va a ser la clase principal del programa.</p>"},{"location":"UD02/UD02_ES.html#que-significa-public-class","title":"\u00bfQu\u00e9 significa <code>public class</code>?","text":"<p>Significa que la clase que se define es p\u00fablica. Una clase p\u00fablica es una clase accesible desde otras clases o, dicho de otra forma,  que puede ser utilizada por otras clases. Ya hemos dicho que un programa, de alguna manera, consiste en la creaci\u00f3n de objetos de distintas clases, que se relacionan entre s\u00ed. Lo m\u00e1s com\u00fan es que las clases que definimos sean p\u00fablicas y que en cada fichero de extensi\u00f3n <code>.java</code> se defina una \u00fanica clase.</p> <p>Sin embargo, en ocasiones se definen clases (<code>A</code>) que solo van a ser utilizadas por una clase determinada (<code>B</code>). En ese caso, decimos que la clase <code>A</code> es una clase privada de la clase <code>B</code>.  Las clases <code>A</code> y <code>B</code> se definen en el mismo fichero <code>.java</code>.</p> <p>Atenci\u00f3n</p> <p>En un fichero pueden definirse varias clases pero solo una de ellas puede ser p\u00fablica. De esta forma, si en un fichero se definen varias clases, una de ellas ser\u00eda p\u00fablica y el resto ser\u00edan clases privadas de la primera, a las que solo \u00e9sta tendr\u00eda acceso.</p>"},{"location":"UD02/UD02_ES.html#utilizacion-de-objetos","title":"Utilizaci\u00f3n de Objetos","text":"<p>Una vez que hemos creado una clase, podemos crear objetos en nuestro programa a partir de esas clases.</p> <p>Cuando creamos un objeto a partir de una clase se dice que hemos creado una \"instancia de la clase\". A efectos pr\u00e1cticos, \"objeto\" e \"instancia de clase\" son t\u00e9rminos similares. Es decir, nos referimos a objetos como instancias cuando queremos hacer hincapi\u00e9 que son de una clase particular.</p> <p>Los objetos se crean a partir de las clases, y representan casos individuales de \u00e9stas.</p> <p>Ejemplo</p> <p>Para entender mejor el concepto entre un objeto y su clase, piensa en un molde de galletas y las galletas. El molde ser\u00eda la clase, que define las caracter\u00edsticas del objeto, por ejemplo su forma y tama\u00f1o. Las galletas creadas a partir de ese molde son los objetos o instancias.</p> <p>Otro ejemplo, imagina una clase Persona que re\u00fana las caracter\u00edsticas comunes de las personas (<code>color de pelo</code>, <code>ojos</code>, <code>peso</code>, <code>altura</code>, etc.) y las acciones que pueden realizar (<code>crecer</code>, <code>dormir</code>, <code>comer</code>, etc.). Posteriormente dentro del programa podremos crear un objeto <code>Trabajador</code> que est\u00e9 basado en esa clase Persona. Entonces se dice que el objeto <code>Trabajador</code> es una instancia de la clase <code>Persona</code>, o que la clase <code>Persona</code> es una abstracci\u00f3n del objeto <code>Trabajador</code>.</p> <p>Cualquier objeto instanciado de una clase contiene una copia de todos los atributos definidos en la clase. En otras palabras, lo que estamos haciendo es reservar un espacio en la memoria del ordenador para guardar sus atributos y m\u00e9todos. Por tanto, cada objeto tiene una zona de almacenamiento propia donde se guarda toda su informaci\u00f3n, que ser\u00e1 distinta a la de cualquier otro objeto. A las variables miembro instanciadas tambi\u00e9n se les llama variables instancia. De igual forma, a los m\u00e9todos que manipulan esas variables se les llama m\u00e9todos instancia.</p> <p>En el ejemplo del objeto Trabajador, las variables instancia ser\u00edan <code>color_de_pelo</code>, <code>peso</code>, <code>altura</code>, etc. Y los m\u00e9todos instancia ser\u00edan <code>crecer()</code>, <code>dormir()</code>, <code>comer()</code>, etc.</p>"},{"location":"UD02/UD02_ES.html#ciclo-de-vida-de-los-objetos","title":"Ciclo de vida de los objetos","text":"<p>Todo programa en Java parte de una \u00fanica clase, que como hemos comentado se trata de la clase principal.</p> <p>Esta clase ejecutar\u00e1 el contenido de su m\u00e9todo <code>main()</code>, el cual ser\u00e1 el que utilice las dem\u00e1s clases del programa, cree objetos y lance mensajes a otros objetos.</p> <p>Las instancias u objetos tienen un tiempo de vida determinado. Cuando un objeto no se va a utilizar m\u00e1s en el programa, es destruido por el recolector de basura para liberar recursos que pueden ser reutilizados por otros objetos.</p> <p>A la vista de lo anterior, podemos concluir que los objetos tienen un ciclo de vida, en el cual podemos distinguir las siguientes fases:</p> <ul> <li>Creaci\u00f3n, donde se hace la reserva de memoria e inicializaci\u00f3n de atributos.</li> <li>Manipulaci\u00f3n, que se lleva a cabo cuando se hace uso de los atributos y m\u00e9todos del objeto.</li> <li>Destrucci\u00f3n, eliminaci\u00f3n del objeto y liberaci\u00f3n de recursos.</li> </ul>"},{"location":"UD02/UD02_ES.html#declaracion","title":"Declaraci\u00f3n","text":"<p>Para la creaci\u00f3n de un objeto hay que seguir los siguientes pasos:</p> <ul> <li> <p>Declaraci\u00f3n: Definir el tipo de objeto.</p> </li> <li> <p>Instanciaci\u00f3n: Creaci\u00f3n del objeto utilizando el operador <code>new</code>. Pero \u00bfen qu\u00e9 consisten estos pasos a nivel de programaci\u00f3n en Java? Veamos primero c\u00f3mo declarar un objeto. Para la definici\u00f3n del tipo de objeto debemos emplear la siguiente instrucci\u00f3n:</p> </li> </ul> <pre><code>&lt;tipo&gt; nombre_objeto;\n</code></pre> <p>Donde:</p> <ul> <li>tipo es la case a partir de la cual se va a crear el objeto, y</li> <li>nombre_objeto es el nombre de la variable referencia con la cual nos referiremos al objeto.</li> </ul> <p>Los tipos referenciados o referencias se utilizan para guardar la direcci\u00f3n de los datos en la memoria del ordenador.</p> <p>Nada m\u00e1s crear una referencia, \u00e9sta se encuentra vac\u00eda. Cuando una referencia a un objeto no contiene ninguna instancia se dice que es una referencia nula, es decir, que contiene el valor <code>null</code>.</p> <p>Esto quiere decir que la referencia est\u00e1 creada pero que el objeto no est\u00e1 instanciado todav\u00eda, por eso la referencia apunta a un objeto inexistente llamado \"nulo\".</p> <p>Para entender mejor la declaraci\u00f3n de objetos veamos un ejemplo. Cuando ve\u00edamos los tipos de datos, dec\u00edamos que Java proporciona un tipo de dato especial para los textos o cadenas de caracteres que era el tipo de dato <code>String</code>. Ve\u00edamos que realmente este tipo de dato es un tipo referenciado y cre\u00e1bamos una variable mensaje de ese tipo de dato de la siguiente forma:</p> <pre><code>String mensaje;\n</code></pre> <p>Los nombres de la clase empiezan con may\u00fascula, como <code>String</code>, y los nombres de los objetos con min\u00fascula, como <code>mensaje</code>, as\u00ed sabemos qu\u00e9 tipo de elemento utilizando.</p> <p>Pues bien, <code>String</code> es realmente la clase a partir de la cual creamos nuestro objeto llamado mensaje(\ud83e\udd2f).</p> <p>Si observas, poco se diferencia esta declaraci\u00f3n de las declaraciones de variables que hac\u00edamos para los tipos primitivos. Antes dec\u00edamos que <code>mensaje</code> era una variable del tipo de dato <code>String</code>. Ahora realmente vemos que <code>mensaje</code> es un objeto de la clase <code>String</code>. Pero mensaje a\u00fan no contiene el objeto porque no ha sido instanciado, veamos c\u00f3mo hacerlo.</p> <p>Por tanto, cuando creamos un objeto estamos haciendo uso de una variable que almacena la direcci\u00f3n de ese objeto en memoria. Esa variable es una referencia o un tipo de datos referenciado, porque no contiene el dato si no la posici\u00f3n del dato en la memoria del ordenador.</p> <pre><code>String saludo = new String(\"Bienvenido a Java\");\nString s; //s vale null\ns = saludo; //asignaci\u00f3n de referencias\n</code></pre> <p>En las instrucciones anteriores, las variables <code>s</code> y <code>saludo</code> apuntan al mismo objeto de la clase <code>String</code>. Esto implica que cualquier modificaci\u00f3n en el objeto saludo modifica tambi\u00e9n el objeto al que hace referencia la variable <code>s</code>, ya que realmente son el mismo.</p>"},{"location":"UD02/UD02_ES.html#instanciacion","title":"Instanciaci\u00f3n","text":"<p>Una vez creada la referencia al objeto, debemos crear la instancia u objeto que se va a guardar en esa referencia. Para ello utilizamos la orden <code>new</code> con la siguiente sintaxis:</p> <pre><code>[&lt;tipo&gt;] nombre_objeto = new &lt;Constructor_de_la_Clase&gt;([&lt;par1&gt;, &lt;par2&gt;, ..., &lt;parN&gt;]);\n</code></pre> <p>Donde:</p> <ul> <li>nombre_objeto es el nombre de la variable referencia con la cual nos referiremos al objeto.</li> <li>new es el operador para crear el objeto.</li> <li>Constructor_de_la_Clase es un m\u00e9todo especial de la clase, que se llama igual que ella, y se encarga de inicializar el objeto, es decir, de dar unos valores iniciales a sus atributos.</li> <li>par1-parN, son par\u00e1metros que puede o no necesitar el constructor para dar los valores iniciales a los atributos del objeto.</li> </ul> <p>Durante la instanciaci\u00f3n del objeto, se reserva memoria suficiente para el objeto. De esta tarea se encarga Java y juega un papel muy importante el <code>recolector de basura</code>, que se encarga de eliminar de la memoria los objetos no utilizados para que \u00e9sta pueda volver a ser utilizada.</p> <p>De este modo, para instanciar un objeto <code>String</code>, har\u00edamos lo siguiente:</p> <pre><code>mensaje = new String;\n</code></pre> <p>As\u00ed estar\u00edamos instanciando el objeto mensaje. Para ello utilizar\u00edamos el operador <code>new</code> y el constructor de la clase <code>String</code> a la que pertenece el objeto seg\u00fan la declaraci\u00f3n que hemos hecho en el apartado anterior. A continuaci\u00f3n utilizamos el constructor, que se llama igual que la clase, <code>String</code>.</p> <p>En el ejemplo anterior el objeto se crear\u00eda con la cadena vac\u00eda (<code>\"\"</code>), si queremos que tenga un contenido debemos utilizar par\u00e1metros en el constructor, as\u00ed:</p> <pre><code>mensaje = new String (\"El primer programa\");\n</code></pre> <p>Java permite utilizar la clase <code>String</code> como si de un tipo de dato primitivo se tratara, por eso no hace falta utilizar el operador <code>new</code> para instanciar un objeto de la clase <code>String</code> (pero no es lo habitual en el resto de clases).</p> <pre><code>mensaje = \"El primer programa\";\n</code></pre> <p>La declaraci\u00f3n e instanciaci\u00f3n de un objeto puede realizarse en la misma instrucci\u00f3n, as\u00ed:</p> <pre><code>String mensaje = new String (\"El primer programa\");\n</code></pre> <p>o para la clase <code>String</code>:</p> <pre><code>String mensaje = \"El primer programa\";\n</code></pre>"},{"location":"UD02/UD02_ES.html#manipulacion","title":"Manipulaci\u00f3n","text":"<p>Una vez creado e instanciado el objeto \u00bfc\u00f3mo accedemos a su contenido? Para acceder a los atributos y m\u00e9todos del objeto utilizaremos el nombre del objeto seguido del operador punto (<code>.</code>) y el nombre del atributo o m\u00e9todo que queremos utilizar. Cuando utilizamos el operador <code>punto</code> se dice que estamos enviando un mensaje al objeto. La forma general de enviar un mensaje a un objeto es:</p> <pre><code>nombre_objeto.mensaje\n</code></pre> <p>Por ejemplo, para acceder a las variables instancia o atributos se utiliza la siguiente sintaxis:</p> <pre><code>nombre_objeto.atributo\n</code></pre> <p>Y para acceder a los m\u00e9todos o funciones miembro del objeto se utiliza la sintaxis es:</p> <pre><code>nombre_objeto.m\u00e9todo( [par1, par2, ..., parN] )\n</code></pre> <p>En la sentencia anterior <code>par1</code>, <code>par2</code>, etc. son los par\u00e1metros que utiliza el m\u00e9todo. (Aparece entre corchetes para indicar son opcionales).</p> <p>Para entender mejor c\u00f3mo se manipulan objetos vamos a utilizar un ejemplo. Para ello necesitamos la Biblioteca de Clases Java o API (Application Programming Interface \u2010 Interfaz de programaci\u00f3n de aplicaciones). Uno de los paquetes de librer\u00edas o bibliotecas es <code>java.awt</code>. Este paquete contiene clases destinadas a la creaci\u00f3n de objetos gr\u00e1ficos e im\u00e1genes. Vemos por ejemplo c\u00f3mo crear un rect\u00e1ngulo.</p> <p>En primer lugar, instanciamos el objeto utilizando el m\u00e9todo constructor, que se llama igual que el objeto, e indicando los par\u00e1metros correspondientes a la posici\u00f3n y a las dimensiones del rect\u00e1ngulo:</p> <pre><code>Rectangle rect = new Rectangle(50, 50, 150, 150);\n</code></pre> <p>Una vez instanciado el objeto rect\u00e1ngulo si queremos cambiar el valor de los atributos utilizamos el operador punto. Por ejemplo, para cambiar la dimensi\u00f3n del rect\u00e1ngulo:</p> <pre><code>rect.height=100;\nrect.width=100;\n</code></pre> <p>O bien podemos utilizar un m\u00e9todo para hacer lo anterior:</p> <pre><code>rect.setSize(200, 200);\n</code></pre> <p>A continuaci\u00f3n puedes acceder al c\u00f3digo del ejemplo:</p> <p>Ejemplo</p> <pre><code>/*\n * Muestra como se manipulan objetos en Java\n */\nimport java.awt.Rectangle;\npublic class Manipular {\n    public static void main(String[] args) {\n        // Instanciamos el objeto rect indicando posicion y dimensiones\n        Rectangle rect = new Rectangle( 50, 50, 150, 150 );\n        //Consultamos las coordenadas x e y del rectangulo\n        System.out.println( \"------- Coordenadas esquina superior izqda. -------\");\n        System.out.println(\"\\tx = \" + rect.x + \"\\n\\ty = \" + rect.y);\n        // Consultamos las dimensiones (altura y anchura) del rectangulo\n        System.out.println( \"\\n----------------- Dimensiones -------------------\");\n        System.out.println(\"\\tAlto = \" + rect.height );\n        System.out.println( \"\\tAncho = \" + rect.width);\n        //Cambiar coordenadas del rectangulo\n        rect.height=100;\n        rect.width=100;\n        rect.setSize(200, 200);\n        System.out.println( \"\\n-- Nuevos valores de los atributos --\");\n        System.out.println(\"\\tx = \" + rect.x + \"\\n\\ty = \" + rect.y);\n        System.out.println(\"\\tAlto = \" + rect.height );\n        System.out.println( \"\\tAncho = \" + rect.width);\n    }\n}\n</code></pre>"},{"location":"UD02/UD02_ES.html#destruccion-de-objetos-y-liberacion-de-memoria","title":"Destrucci\u00f3n de objetos y liberaci\u00f3n de memoria","text":"<p>Cuando un objeto deja de ser utilizado, es necesario liberar el espacio de memoria y otros recursos que pose\u00eda para poder ser reutilizados por el programa. A esta acci\u00f3n se le denomina destrucci\u00f3n del objeto.</p> <p>En Java la destrucci\u00f3n de objetos corre a cargo del recolector de basura (garbage collector). Es un sistema de destrucci\u00f3n autom\u00e1tica de objetos que ya no son utilizados. Lo que se hace es liberar una zona de memoria que hab\u00eda sido reservada previamente mediante el operador <code>new</code>. Esto evita que los programadores tengan que preocuparse de realizar la liberaci\u00f3n de memoria.</p> <p>El recolector de basura se ejecuta en modo segundo plano y de manera muy eficiente para no afectar a la velocidad del programa que se est\u00e1 ejecutando. Lo que hace es que peri\u00f3dicamente va buscando objetos que ya no son referenciados, y cuando encuentra alguno lo marca para ser eliminado.</p> <p>Despu\u00e9s los elimina en el momento que considera oportuno.</p> <p>Justo antes de que un objeto sea eliminado por el recolector de basura, se ejecuta su m\u00e9todo <code>finalize()</code>. Si queremos forzar que se ejecute el proceso de finalizaci\u00f3n de todos los objetos del programa podemos utilizar el m\u00e9todo <code>runFinalization()</code> de la clase <code>System</code>. La clase <code>System</code> forma parte de la Biblioteca de Clases de Java y contiene diversas clases para la entrada y salida de informaci\u00f3n, acceso a variables de entorno del programa y otros m\u00e9todos de diversa utilidad. Para forzar el proceso de finalizaci\u00f3n ejecutar\u00edamos:</p> <pre><code>System.runFinalization();\n</code></pre>"},{"location":"UD02/UD02_ES.html#utilizacion-de-metodos","title":"Utilizaci\u00f3n de M\u00e9todos","text":"<p>Los m\u00e9todos, junto con los atributos, forman parte de la estructura interna de un objeto. Los m\u00e9todos contienen la declaraci\u00f3n de variables locales y las operaciones que se pueden realizar para el objeto, y que son ejecutadas cuando el m\u00e9todo es invocado. Se definen en el cuerpo de la clase y posteriormente son instanciados para convertirse en m\u00e9todos instancia de un objeto.</p> <p>Para utilizar los m\u00e9todos adecuadamente es conveniente conocer la estructura b\u00e1sica de que disponen.</p> <p>Al igual que las clases, los m\u00e9todos est\u00e1n compuestos por una cabecera y un cuerpo. La cabecera tambi\u00e9n tiene modificadores, en este caso hemos utilizado <code>public</code> para indicar que el m\u00e9todo es p\u00fablico, lo cual quiere decir que le pueden enviar mensajes no s\u00f3lo los m\u00e9todos del objeto sino los m\u00e9todos de cualquier otro objeto externo.</p> <p>Dentro de un m\u00e9todo nos encontramos el cuerpo del m\u00e9todo que contiene el c\u00f3digo de la acci\u00f3n a realizar. Las acciones que un m\u00e9todo puede realizar son:</p> <ul> <li>Inicializar los atributos del objeto</li> <li>Consultar los valores de los atributos</li> <li>Modificar los valores de los atributos</li> <li>Llamar a otros m\u00e9todos, del mismo del objeto o de objetos externos</li> </ul>"},{"location":"UD02/UD02_ES.html#parametros-y-valores-devueltos","title":"Par\u00e1metros y valores devueltos","text":"<p>Los m\u00e9todos se pueden utilizar tanto para consultar informaci\u00f3n sobre el objeto como para modificar su estado. La informaci\u00f3n consultada del objeto se devuelve a trav\u00e9s de lo que se conoce como valor de retorno, y la modificaci\u00f3n del estado del objeto, o sea, de sus atributos, se hace mediante la lista de par\u00e1metros. En general, la lista de par\u00e1metros de un m\u00e9todo se puede declarar de dos formas diferentes:</p> <ul> <li>Por valor. El valor de los par\u00e1metros no se devuelve al finalizar el m\u00e9todo, es decir, cualquier modificaci\u00f3n que se haga en los par\u00e1metros no tendr\u00e1 efecto una vez se salga del m\u00e9todo. Esto es as\u00ed porque cuando se llama al m\u00e9todo desde cualquier parte del programa, dicho m\u00e9todo recibe una copia de los argumentos, por tanto cualquier modificaci\u00f3n que haga ser\u00e1 sobre la copia, no sobre las variables originales.</li> <li>Por referencia. La modificaci\u00f3n en los valores de los par\u00e1metros s\u00ed tienen efecto tras la finalizaci\u00f3n del m\u00e9todo. Cuando pasamos una variable a un m\u00e9todo por referencia lo que estamos haciendo es pasar la direcci\u00f3n del dato en memoria, por tanto cualquier cambio en el dato seguir\u00e1 modificado una vez que salgamos del m\u00e9todo.</li> </ul> <p>Atenci\u00f3n</p> <p>En el lenguaje Java, todas las variables se pasan por valor, excepto los objetos que se pasan por referencia.</p> <p>En Java, la declaraci\u00f3n de un m\u00e9todo tiene dos restricciones:</p> <ul> <li>Un m\u00e9todo siempre tiene que devolver un valor (no hay valor por defecto). Este valor de retorno es el valor que devuelve el m\u00e9todo cuando termina de ejecutarse, al m\u00e9todo o programa que lo llam\u00f3. Puede ser un tipo primitivo, un tipo referenciado o bien el tipo <code>void</code>, que indica que el m\u00e9todo no devuelve ning\u00fan valor.</li> <li>Un m\u00e9todo tiene un n\u00famero fijo de argumentos. Los argumentos son variables a trav\u00e9s de las cuales se pasa informaci\u00f3n al m\u00e9todo desde el lugar del que se llame, para que \u00e9ste pueda utilizar dichos valores durante su ejecuci\u00f3n. Los argumentos reciben el nombre de par\u00e1metros cuando aparecen en la declaraci\u00f3n del m\u00e9todo.</li> </ul> <p>Recuerda</p> <p>El valor de retorno es la informaci\u00f3n que devuelve un m\u00e9todo tras su ejecuci\u00f3n.</p> <p>Seg\u00fan hemos visto en el apartado anterior, la cabecera de un m\u00e9todo se declara como sigue:</p> <pre><code>public tipo_de_dato_devuelto nombreMetodo (lista_de_parametros);\n</code></pre> <p>Como vemos, el tipo de dato devuelto aparece despu\u00e9s del modificador <code>public</code> y se corresponde con el valor de retorno.</p> <p>La lista de par\u00e1metros aparece al final de la cabecera del m\u00e9todo, justo despu\u00e9s del nombre, encerrados entre signos de par\u00e9ntesis y separados por comas. Se debe indicar el tipo de dato de cada par\u00e1metro as\u00ed:</p> <pre><code>(tipo_par\u00e1metro1 nombre_par\u00e1metro1, ..., tipo_par\u00e1metroN nombre_par\u00e1metroN)\n</code></pre> <p>Atenci\u00f3n</p> <p>Cuando se llame al m\u00e9todo, se deber\u00e1 utilizar el nombre del m\u00e9todo, seguido de los argumentos que  deben coincidir con la lista de par\u00e1metros.</p> <p>La lista de argumentos en la llamada a un m\u00e9todo debe coincidir en n\u00famero, tipo y orden con los par\u00e1metros del m\u00e9todo, ya que de lo contrario se producir\u00eda un error de sintaxis.</p>"},{"location":"UD02/UD02_ES.html#constructores","title":"Constructores","text":"<p>\u00bfRecuerdas cuando habl\u00e1bamos de la creaci\u00f3n e instanciaci\u00f3n de un objeto? Dec\u00edamos que utiliz\u00e1bamos el operador <code>new</code> seguido del nombre de la clase y una pareja de abrir\u2010cerrar par\u00e9ntesis.</p> <p>Adem\u00e1s, el nombre de la clase era realmente el constructor de la misma, y lo defin\u00edamos como un m\u00e9todo especial que sirve para inicializar valores. En este apartado vamos a ver un poco m\u00e1s sobre los constructores.</p> <p>Un constructor es un m\u00e9todo especial con el mismo nombre de la clase y que no devuelve ning\u00fan valor tras su ejecuci\u00f3n.</p> <p>Cuando creamos un objeto debemos instanciarlo utilizando el constructor de la clase. Veamos la clase <code>Date</code> proporcionada por la Biblioteca de Clases de Java. Si queremos instanciar un objeto a partir de la clase <code>Date</code> tan s\u00f3lo tendremos que utilizar el constructor seguido de una pareja de abrir\u2010cerrar par\u00e9ntesis:</p> <pre><code>Date fecha = new Date();\n</code></pre> <p>Con la anterior instrucci\u00f3n estamos creando un objeto fecha de tipo <code>Date</code>, que contendr\u00e1 la fecha y hora actual del sistema.</p> <p>La estructura de los constructores es similar a la de cualquier m\u00e9todo, salvo que no tiene tipo de dato devuelto porque no devuelve ning\u00fan valor. Est\u00e1 formada por una cabecera y un cuerpo, que contiene la inicializaci\u00f3n de atributos y resto de instrucciones del constructor.</p> <p>El m\u00e9todo constructor tiene las siguientes particularidades:</p> <ul> <li>El constructor es invocado autom\u00e1ticamente en la creaci\u00f3n de un objeto, y s\u00f3lo esa vez.</li> <li>Los constructores no empiezan con min\u00fascula, como el resto de los m\u00e9todos, ya que se llaman igual que la clase y las clases empiezan con letra may\u00fascula.</li> <li>Puede haber varios constructores para una clase.</li> <li>Como cualquier m\u00e9todo, el constructor puede tener par\u00e1metros para definir qu\u00e9 valores dar a los atributos del objeto.</li> <li>El constructor por defecto es aqu\u00e9l que no tiene argumentos o par\u00e1metros. Cuando creamos un objeto llamando al nombre de la clase sin argumentos, estamos utilizando el constructor por defecto.</li> <li>Es necesario que toda clase tenga al menos un constructor. Si no definimos constructores para una clase, y s\u00f3lo en ese caso, el compilador crea un constructor por defecto vac\u00edo, que inicializa los atributos a sus valores por defecto, seg\u00fan del tipo que sean: <code>0</code> para los tipos num\u00e9ricos, <code>false</code> para los <code>boolean</code> y <code>null</code> para los tipo car\u00e1cter y las referencias. Dicho constructor lo que hace es llamar al constructor sin argumentos de la superclase (clase de la cual hereda); si la superclase no tiene constructor sin argumentos se produce un error de compilaci\u00f3n.</li> </ul> <p>Atenci\u00f3n</p> <p>Cuando definimos constructores personalizados, el constructor por defecto deja de existir, y si no definimos nosotros un constructor sin argumentos cuando intentemos utilizar el constructor por defecto nos dar\u00e1 un error de compilaci\u00f3n.</p>"},{"location":"UD02/UD02_ES.html#el-operador-this","title":"El operador <code>this</code>","text":"<p>Los constructores y m\u00e9todos de un objeto suelen utilizar el operador <code>this</code>. Este operador sirve para referirse a los atributos de un objeto cuando estamos dentro de \u00e9l. Sobre todo se utiliza cuando existe ambig\u00fcedad entre el nombre de un par\u00e1metro y el nombre de un atributo, entonces en lugar del nombre del atributo solamente escribiremos <code>this.nombre_atributo</code>, y as\u00ed no habr\u00e1 duda de a qu\u00e9 elemento nos estamos refiriendo.</p>"},{"location":"UD02/UD02_ES.html#metodos-estaticos","title":"M\u00e9todos est\u00e1ticos","text":"<p>Cuando trabaj\u00e1bamos con cadenas de caracteres utilizando la clase <code>String</code>, ve\u00edamos las operaciones que pod\u00edamos hacer con ellas: obtener longitud, comparar dos cadenas de caracteres, cambiar a may\u00fasculas o min\u00fasculas, etc. Pues bien, sin saberlo est\u00e1bamos utilizando m\u00e9todos est\u00e1ticos definidos por Java para la clase <code>String</code>. Pero \u00bfqu\u00e9 son los m\u00e9todos est\u00e1ticos? Ve\u00e1moslo.</p> <p>Los m\u00e9todos est\u00e1ticos son aquellos m\u00e9todos definidos para una clase que se pueden usar directamente, sin necesidad de crear un objeto de dicha clase. Tambi\u00e9n se llaman m\u00e9todos de clase.</p> <p>Para llamar a un m\u00e9todo est\u00e1tico utilizaremos:</p> <ul> <li> <p>El nombre del m\u00e9todo, si lo llamamos desde la misma clase en la que se encuentra definido.</p> </li> <li> <p>El nombre de la clase, seguido por el operador punto (<code>.</code>) m\u00e1s el nombre del m\u00e9todo est\u00e1tico, si lo llamamos desde una clase distinta a la que se encuentra definido:</p> </li> </ul> <pre><code>Nombre_clase.nombre_metodo_estatico\n</code></pre> <ul> <li>El nombre del objeto, seguido por el operador punto (<code>.</code>) m\u00e1s el nombre del m\u00e9todo est\u00e1tico. Utilizaremos esta forma cuando tengamos un objeto instanciado de la clase en la que se encuentra definido el m\u00e9todo est\u00e1tico, y no podamos utilizar la anterior:</li> </ul> <pre><code>nombre_objeto.nombre_metodo_no_estatico\n</code></pre> <p>Los m\u00e9todos est\u00e1ticos no afectan al estado de los objetos instanciados de la clase (variables instancia), y suelen utilizarse para realizar operaciones comunes a todos los objetos de la clase. Por ejemplo, si necesitamos contar el n\u00famero de objetos instanciados de una clase, podr\u00edamos utilizar un m\u00e9todo est\u00e1tico que fuera incrementando el valor de una variable entera de la clase conforme se van creando los objetos.</p> <p>En la Biblioteca de Clases de Java existen muchas clases que contienen m\u00e9todos est\u00e1ticos. Pensemos en las clases que ya hemos utilizado en unidades anteriores, como hemos comentado la clase <code>String</code> con todas las operaciones que pod\u00edamos hacer con ella y con los objetos instanciados a partir de ella. O bien la clase <code>Math</code> para la conversi\u00f3n de tipos de datos. Todos ellos son m\u00e9todos est\u00e1ticos que la API de Java define para esas clases. Lo importante es que tengamos en cuenta que al tratarse de m\u00e9todos est\u00e1ticos, para utilizarlos no necesitamos crear un objeto de dichas clases.</p> <p>Fij\u00e9monos en esta secuencia de instrucciones</p> <pre><code>//Creamos dos c\u00edrculos de radio 100  en distintas posiciones\nCirculo c1 = new Circulo(50,50,100); \nCirculo c2 = new Circulo(80,80,100); \n...\n//Aumentamos el radio del primer c\u00edrculo a 200\nc1.setRadio(200);\n</code></pre> <p>y en esta otra</p> <pre><code>System.out.println(Math.sqrt(4));\n</code></pre> <p>En el primer ejemplo, <code>.setRadio(200)</code> va precedido por un objeto. La variable <code>c1</code> es un objeto de la clase C\u00edrculo, por tanto, la instrucci\u00f3n est\u00e1 modificando el radio de un c\u00edrculo concreto, el que se encuentra en la posici\u00f3n (50,50) . El m\u00e9todo <code>setRadio</code> es un m\u00e9todo no est\u00e1tico. Los m\u00e9todos no est\u00e1ticos act\u00faan siempre sobre alg\u00fan objeto (el que figura a la izquierda del punto).</p> <p>En el segundo ejemplo, en cambio, a la izquierda de <code>.sqrt(4)</code> no se ha puesto el nombre de un objeto, sino el de una clase, la clase <code>Math</code>. El m\u00e9todo <code>sqrt</code> no est\u00e1 actuando sobre un objeto concreto: no tiene sentido hacerlo, solo pretendemos calcular la ra\u00edz cuadrada de <code>4</code>. <code>Sqrt</code> es un m\u00e9todo est\u00e1tico. Los m\u00e9todos est\u00e1ticos se usan poniendo delante del punto el nombre de la clase en que se encuentran definidos.</p>"},{"location":"UD02/UD02_ES.html#librerias-de-objetos-paquetes","title":"Librer\u00edas de Objetos (Paquetes)","text":"<p>Conforme nuestros programas se van haciendo m\u00e1s grandes, el n\u00famero de clases va creciendo. Meter todas las clases en \u00fanico directorio no ayuda a que est\u00e9n bien organizadas, lo mejor es hacer grupos de clases, de forma que todas las clases que est\u00e9n relacionadas o traten sobre un mismo tema est\u00e9n en el mismo grupo.</p> <p>Un paquete de clases es una agrupaci\u00f3n de clases que consideramos que est\u00e1n relacionadas entre s\u00ed o tratan de un tema com\u00fan.</p> <p>Recuerda</p> <p>Las clases de un mismo paquete tienen un acceso privilegiado a los atributos y m\u00e9todos de otras clases de dicho paquete. Es por ello por lo que se considera que los paquetes son tambi\u00e9n, en cierto modo, unidades de encapsulaci\u00f3n y ocultaci\u00f3n de informaci\u00f3n.</p> <p>Java nos ayuda a organizar las clases en paquetes. En cada fichero <code>.java</code> que hagamos, al principio, podemos indicar a qu\u00e9 paquete pertenece la clase que hagamos en ese fichero.</p> <p>Los paquetes se declaran utilizando la palabra clave <code>package</code> seguida del nombre del paquete.</p> <p>Para establecer el paquete al que pertenece una clase hay que poner una sentencia de declaraci\u00f3n como la siguiente al principio de la clase:</p> <pre><code>package nombre_de_Paquete;\n</code></pre> <p>Por ejemplo, si decidimos agrupar en un paquete <code>ejemplos</code> un programa llamado <code>Bienvenida</code>, pondr\u00edamos  en nuestro fichero <code>Bienvenida.java</code> lo siguiente:</p> <pre><code>package ejemplos;\n\npublic class Bienvenida {\n    [...]\n}\n</code></pre> <p>El c\u00f3digo es exactamente igual que como hemos venido haciendo hasta ahora, solamente hemos a\u00f1adido la l\u00ednea <code>package ejemplos;</code> al principio.</p>"},{"location":"UD02/UD02_ES.html#sentencia-import","title":"Sentencia <code>import</code>","text":"<p>Cuando queremos utilizar una clase que est\u00e1 en un paquete distinto a la clase que estamos utilizando, se suele utilizar la sentencia <code>import</code>. Por ejemplo, si queremos utilizar la clase <code>Scanner</code> que est\u00e1 en el paquete <code>java.util</code> de la Biblioteca de Clases de Java, tendremos que utilizar esta sentencia:</p> <pre><code>import java.util.Scanner;\n</code></pre> <p>Se pueden importar todas las clases de un paquete, as\u00ed:</p> <pre><code>import java.awt.*;\n</code></pre> <p>Esta sentencia debe aparecer al principio de la clase, justo despu\u00e9s de la sentencia package, si \u00e9sta existiese.</p> <p>Tambi\u00e9n podemos utilizar la clase sin sentencia <code>import</code>, en cuyo caso cada vez que queramos usarla debemos indicar su ruta completa:</p> <pre><code>java.util.Scanner teclado = new java.util.Scanner (System.in);\n</code></pre> <p>Hasta aqu\u00ed todo correcto. Sin embargo, al trabajar con paquetes, Java nos obliga a organizar los directorios, compilar y ejecutar de cierta forma para que todo funcione adecuadamente.</p>"},{"location":"UD02/UD02_ES.html#librerias-java","title":"Librer\u00edas Java","text":"<p>Cuando descargamos el entorno de compilaci\u00f3n y ejecuci\u00f3n de Java, obtenemos la API de Java. Como ya sabemos, se trata de un conjunto de bibliotecas que nos proporciona paquetes de clases \u00fatiles para nuestros programas. Utilizar las clases y m\u00e9todos de la Biblioteca de Java nos va ayudar a reducir el tiempo de desarrollo considerablemente, por lo que es importante que aprendamos a consultarla y conozcamos las clases m\u00e1s utilizadas.</p> <p>Ejemplo</p> <pre><code>import java.lang.System; // Se importa la clase System.\nimport java.awt.*;       // Se importa todas las clases del paquete awt;\n</code></pre> <p>Los paquetes m\u00e1s importantes que ofrece el lenguaje Java son:</p> Paquete o librer\u00eda Descripci\u00f3n java.io Contiene las clases que gestionan la entrada y salida, ya sea para manipular ficheros, leer o escribir en pantalla, en memoria, etc. Este paquete contiene por ejemplo la clase BufferedReader que se utiliza para la entrada por teclado. java.lang Contiene las clases b\u00e1sicas del lenguaje. Este paquete no es necesario importarlo, ya que es importado autom\u00e1ticamente por el entorno de ejecuci\u00f3n. En este paquete se encuentra la clase Object, que sirve como ra\u00edz para la jerarqu\u00eda de clases de Java, o la clase System que ya hemos utilizado en algunos ejemplos y que representa al sistema en el que se est\u00e1 ejecutando la aplicaci\u00f3n. Tambi\u00e9n podemos encontrar en este paquete las clases que \"envuelven\" los tipos primitivos de datos. Lo que proporciona una serie de m\u00e9todos para cada tipo de dato de utilidad, como por ejemplo las conversiones de datos. java.util Biblioteca de clases de utilidad general para el programador. Este paquete contiene por ejemplo la clase Scanner utilizada para la entrada por teclado de diferentes tipos de datos, la clase Date, para el tratamiento de fechas, etc. java.math Contiene herramientas para manipulaciones matem\u00e1ticas. java.awt Incluye las clases relacionadas con la construcci\u00f3n de interfaces de usuario, es decir, las que nos permiten construir ventanas, cajas de texto, botones, etc. Algunas de las clases que podemos encontrar en este paquete son Button, TextField, Frame, Label, etc. java.swing Contiene otro conjunto de clases para la construcci\u00f3n de interfaces avanzadas de usuario. Los componentes que se engloban dentro de este paquete se denominan componentes Swing, y suponen una alternativa mucho m\u00e1s potente que AWT para construir interfaces de usuario. java.net Conjunto de clases para la programaci\u00f3n en la red local e Internet. java.sql Contiene las clases necesarias para programar en Java el acceso a las bases de datos. java.security Biblioteca de clases para implementar mecanismos de seguridad. <p>Como se puede comprobar Java ofrece una completa jerarqu\u00eda de clases organizadas a trav\u00e9s de paquetes.</p>"},{"location":"UD02/UD02_ES.html#cadenas-de-caracteres-la-clase-string","title":"Cadenas de caracteres. La clase <code>String</code>","text":""},{"location":"UD02/UD02_ES.html#cadenas-de-caracteres","title":"Cadenas de caracteres","text":"<p>Hasta ahora hemos utilizado literales de cadenas de caracteres que, como sabemos, se ponen entre comillas dobles, como en la siguiente expresi\u00f3n</p> <pre><code>System.out.println(\"Hola\");\n</code></pre> <p>Para almacenar cadenas de caracteres en variables se utiliza la clase <code>String</code>. <code>String</code> se encuentra definida en el paquete <code>java.lang</code>. Recordemos que no es necesario importar este paquete para utilizar sus clases.</p> <p>La forma de <code>String</code> es la siguiente:</p> <pre><code>String variable = new String(\"texto\");\n</code></pre> <p>Ejemplo:</p> <pre><code>String nombre = new String(\"Javier\");\nSystem.out.println(\"Mi nombre es \" + nombre);\n</code></pre> <p>Sin embargo, debido a que es una clase que se utiliza ampliamente en los programas, Java permite una forma abreviada de crear objetos String:</p> <pre><code>String nombreVariable = \"texto\";\n</code></pre> <p>Ejemplo:</p> <pre><code>String nombre = \"Javier\";\nSystem.out.println(\"Mi nombre es \" + nombre);\n</code></pre>"},{"location":"UD02/UD02_ES.html#leer-cadenas-desde-teclado","title":"Leer cadenas desde teclado","text":""},{"location":"UD02/UD02_ES.html#clase-scanner","title":"Clase <code>Scanner</code>","text":"<p>Para leer cadenas de caracteres desde teclado podemos utilizar la clase <code>Scanner</code>. \u00c9sta dispone de dos m\u00e9todos para leer cadenas:</p> <ul> <li><code>next()</code>: Lee desde la entrada est\u00e1ndar (teclado) una secuencia de caracteres hasta encontrar un delimitador (un espacio). Devuelve un <code>String</code>.</li> <li><code>nextLine()</code>: Lee desde la entrada est\u00e1ndar (teclado) una secuencia de caracteres hasta encontrar un salto de l\u00ednea. Devuelve un <code>String</code>.</li> </ul> <p>Ejemplo:</p> <pre><code>Scanner tec = new Scanner(System.in);\n//De lo que introduce el usuario, lee la 1\u00ba palabra.\nString nombre = tec.next();\n//Lee lo que introduce el usuario hasta que pulsa intro.\nString nombreCompleto = tec.nextLine(); \n</code></pre>"},{"location":"UD02/UD02_ES.html#ejemplos-de-la-ud01-pero-utilizando-scanner-compatible-con-los-ides","title":"Ejemplos de la UD01 pero utilizando <code>Scanner</code> (compatible con los IDE's)","text":"<p>A continuaci\u00f3n vamos a ver los mismos ejemplos de la UD01, pero utilizando la clase <code>Scanner</code> que si es compatible con los IDE's. Para poder usar la clase <code>Scanner</code> necesitamos importar el paquete:  <code>java.util.Scanner</code>.</p> <pre><code>import java.util.Scanner;\n\npublic class EjemploUD02 {\n\n    public static void main(String[] args) {\n\n        Scanner teclado = new Scanner(System.in);\n\n        //Introducir texto desde teclado\n        String texto;\n        System.out.print(\"Introduce un texto: \");\n        texto = teclado.nextLine(); \n        System.out.println(\"El texto introducido es: \"+ texto);\n\n        //Introducir un n\u00famero entero desde teclado\n        String texto2;\n        int entero2;\n        System.out.print(\"Introduce un n\u00famero: \");\n        texto2 = teclado.nextLine(); \n        entero2 = Integer.parseInt(texto2);\n        System.out.println(\"El n\u00famero introducido es:\"+entero2);\n\n        //Introducir un n\u00famero decimal desde teclado\n        String texto3;\n        double doble3;\n        System.out.print(\"Introduce un n\u00famero decimal: \");\n        texto3 = teclado.nextLine(); \n        doble3 = Double.parseDouble(texto3); // convertimos texto a doble\n        System.out.println(\"N\u00famero decimal introducido es: \"+doble3);\n    }\n}\n</code></pre>"},{"location":"UD02/UD02_ES.html#la-clase-string","title":"La clase <code>String</code>","text":"<p>Adem\u00e1s de permitir almacenar cadenas de caracteres, <code>String</code> tiene m\u00e9todos para realizar c\u00e1lculos u operaciones con ellas.</p> <p>As\u00ed por ejemplo, la clase tiene un m\u00e9todo <code>toUpperCase()</code> que devuelve el <code>String</code> convertido a may\u00fasculas. El siguiente ejemplo ilustra su uso:</p> <pre><code>String nombre = \"Javier\";\nSystem.out.println(nombre.toUpperCase()); // Se muestra JAVIER por pantalla\n</code></pre> <p>Accede a la documentaci\u00f3n en l\u00ednea de Java y estudia los siguientes m\u00e9todos de la clase:</p> <ul> <li><code>charAt</code></li> <li><code>indexOf</code></li> <li><code>subString</code></li> <li><code>toLowerCase</code></li> <li><code>trim</code></li> </ul>"},{"location":"UD02/UD02_ES.html#printf-o-format","title":"<code>printf</code> o <code>format</code>","text":"<p>El m\u00e9todo <code>printf()</code> o <code>format()</code> (son sin\u00f3nimos) utilizan unos c\u00f3digos de conversi\u00f3n para indicar si el contenido a mostrar de qu\u00e9 tipo es. Estos c\u00f3digos se caracterizan porque llevan delante el s\u00edmbolo %, algunos de ellos son:</p> <ul> <li><code>%c</code>: Escribe un car\u00e1cter.</li> <li><code>%s</code>: Escribe una cadena de texto.</li> <li><code>%d</code>: Escribe un entero.</li> <li><code>%f</code>: Escribe un n\u00famero en punto flotante.</li> <li><code>%e</code>: Escribe un n\u00famero en punto flotante en notaci\u00f3n cient\u00edfica.</li> </ul> <p>Por ejemplo, si queremos escribir el n\u00famero float <code>12345.1684</code> con el punto de los miles y s\u00f3lo dos cifras decimales la orden ser\u00eda:</p> <pre><code>System.out.printf(\"%,.2f\\n\", 12345.1684);\n</code></pre> <p>Esta orden mostrar\u00eda el n\u00famero <code>12.345,17</code> por pantalla.</p> <p>Otro ejemplo seria:</p> <pre><code>System.out.format(\"El valor de la variable float es\" +\n     \"%f, mientras que el valor del entero es %d\" +\n     \"y el string contiene %s\", variableFloat, variableInt, variableString); \n</code></pre> <p>Puedes investigar m\u00e1s sobre <code>printf</code> o <code>format</code> en este enlace</p>"},{"location":"UD02/UD02_ES.html#salida-de-error","title":"Salida de error","text":"<p>La salida de error est\u00e1 representada por el objeto <code>System.err</code>. No parece muy \u00fatil utilizar <code>out</code> y <code>err</code> si su destino es la misma pantalla, o al menos en el caso de la consola del sistema donde las dos salidas son representadas con el mismo color y no notamos diferencia alguna. En cambio en la consola de varios entornos integrados de desarrollo como NetBeans o Eclipse la salida de <code>err</code> se ve en un color diferente. Teniendo el siguiente c\u00f3digo:</p> <pre><code>System.out.println(\"Salida est\u00e1ndar por pantalla\");\nSystem.err.println(\"Salida de error por pantalla\");\n</code></pre> <p>Tanto NetBeans, Eclipse como IntelliJ Idea mostraran el mensaje <code>err</code> en color rojo.</p>"},{"location":"UD02/UD02_ES.html#ejemplo-ud02","title":"Ejemplo UD02","text":""},{"location":"UD02/UD02_ES.html#clase-pajaro","title":"Clase <code>Pajaro</code>","text":"<p>Vamos a ilustrar mediante un ejemplo la utilizaci\u00f3n de objetos y m\u00e9todos, as\u00ed como el uso de par\u00e1metros y el operador <code>this</code>. Aunque la creaci\u00f3n de clases la veremos en las siguientes unidades, en este ejercicio creamos una peque\u00f1a clase para que podamos instanciar el objeto con el que vamos a trabajar.</p> <p>Las clases se suelen representar como un rect\u00e1ngulo, y dentro de \u00e9l se sit\u00faan los atributos y los m\u00e9todos de dicha clase.</p> <p>En la imagen, la clase <code>Pajaro</code> est\u00e1 compuesta por tres atributos, uno de ellos el <code>nombre</code> y otros dos que indican la posici\u00f3n del ave, <code>posX</code> y <code>posY</code>. Tiene tres m\u00e9todos constructores y un m\u00e9todo <code>volar()</code>. Como sabemos, los m\u00e9todos constructores reciben el mismo nombre de la clase, y puede haber varios para una misma clase, dentro de ella se diferencian unos de otros por los par\u00e1metros que utilizan.</p> <p>Enunciado:</p> <p>Dada una clase principal llamada <code>Pajaro</code>, se definen los atributos y m\u00e9todos que aparecen en la imagen. Los m\u00e9todos realizan las siguientes acciones:</p> <pre><code>classDiagram\n    Pajaro\n    class Pajaro{\n        -String nombre\n        -int posX\n        -int posY\n        +Pajaro()\n        +Pajaro(String nombre)\n        +Pajaro(String nombre, int posX, int posY)\n        +double volar(int posX, int posY)\n    }</code></pre> <ul> <li><code>Pajaro()</code>. Constructor por defecto. En este caso, el constructor por defecto no contiene ninguna instrucci\u00f3n, ya que Java inicializa de forma autom\u00e1tica las variables miembro, si no le damos ning\u00fan valor.</li> <li><code>Pajaro(String nombre)</code>. Constructor que recibe como argumentos una cadena de texto (el nombre del p\u00e1jaro).</li> <li><code>Pajaro(String nombre, int posX, int posY)</code>. Constructor que recibe como argumentos una cadena de texto y dos enteros para inicializar el valor de los atributos.</li> <li><code>double volar(int posX, int posY)</code>. M\u00e9todo que recibe como argumentos dos enteros: <code>posX</code> y <code>posY</code>, y devuelve un valor de tipo <code>double</code> como resultado, usando la palabra clave <code>return</code>. El valor devuelto es el resultado de aplicar un desplazamiento de acuerdo con la siguiente f\u00f3rmula:</li> </ul> \\[ desplazamiento = \\sqrt{posX \u00b7 posX + posY \u00b7 posY} \\] <p>Dise\u00f1a un programa que utilice la clase <code>Pajaro</code>, cree una instancia de dicha clase y ejecute sus m\u00e9todos.</p> <p>Lo primero que debemos hacer es crear la clase <code>Pajaro</code>, con sus m\u00e9todos y atributos. De acuerdo con los datos que tenemos, el c\u00f3digo de la clase ser\u00eda el siguiente:</p> <pre><code>public class Pajaro {\n    //atributos/variables\n    private String nombre;\n    private int posX;\n    private int posY;\n    //constructores\n    public Pajaro() {\n    }\n    public Pajaro(String nombre) {\n        this.nombre = nombre;\n    }\n    public Pajaro(String nombre, int posX, int posY) {\n        this.nombre = nombre;\n        this.posX = posX;\n        this.posY = posY;\n    }\n\n    //metodos\n    public double volar(int posX, int posY) {\n        double desplazamiento = Math.sqrt((posX * posX) + (posY * posY));\n        //desplazamiento=Math.sqrt(Math.pow(posX,2)+Math.pow(posY,2));\n        this.posX = posX;\n        this.posY = posY;\n        return desplazamiento;\n    }\n    //m\u00e9todo main()\n    [...] \n}\n</code></pre> <p>Debemos tener en cuenta que se trata de una clase principal, lo cual quiere decir que debe contener un m\u00e9todo <code>main()</code> dentro de ella. En el m\u00e9todo <code>main()</code> vamos a situar el c\u00f3digo de nuestro programa. El ejercicio dice que tenemos que crear una instancia de la clase y ejecutar sus m\u00e9todos, entre los que est\u00e1n el constructor y el m\u00e9todo <code>volar()</code>.</p> <p>Tambi\u00e9n es conveniente imprimir el resultado de ejecutar el m\u00e9todo <code>volar()</code>. Por tanto, lo que har\u00eda el programa ser\u00eda:</p> <ul> <li>Crear un objeto de la clase e inicializarlo.</li> <li>Invocar al m\u00e9todo volar.</li> <li>Imprimir por pantalla la distancia recorrida.</li> </ul> <p>Para inicializar el objeto utilizaremos el constructor con par\u00e1metros, despu\u00e9s ejecutaremos el m\u00e9todo <code>volar()</code> del objeto creado y finalmente imprimiremos el valor que nos devuelve el m\u00e9todo.</p> <p>Luego crearemos otro <code>pajaro2</code> usando el constructor por defecto (sin par\u00e1metros). Le asignaremos el nombre y la posici\u00f3n manualmente, y calcularemos su desplazamiento llamando al m\u00e9todo, pero usando los atributos del objeto (<code>pajaro2.posX</code> y <code>pajaro2.posY</code>) en lugar de constantes. El c\u00f3digo del m\u00e9todo <code>main()</code> quedar\u00eda como sigue:</p> <pre><code>public static void main(String[] args) {\n    //creamos el objeto con par\u00e1metros\n    Pajaro pajaro1 = new Pajaro(\"WoodPecker\", 50, 50);\n    double d1 = pajaro1.volar(50, 50);\n    System.out.println(\"El desplazamiento de \" + pajaro1.nombre + \" ha sido \" + d1);\n\n    Pajaro pajaro2 = new Pajaro();\n    //damos nombre y cambiamos la posici\u00f3n de \"Piolin\" a mano\n    pajaro2.nombre=\"Piol\u00edn\";\n    pajaro2.posX=30;\n    pajaro2.posY=30;\n    double d2 = pajaro2.volar(pajaro2.posX, pajaro2.posY);\n    System.out.println(\"El desplazamiento de \" + pajaro2.nombre + \" ha sido \" + d2);\n}\n</code></pre> <p>Si ejecutamos nuestro programa el resultado ser\u00eda el siguiente:</p> <pre><code>El desplazamiento de WoodPecker ha sido 70.71067811865476\nEl desplazamiento de Piol\u00edn ha sido 42.42640687119285\n</code></pre>"},{"location":"UD02/UD02_ES.html#clase-string","title":"Clase <code>String</code>","text":"<p>Ejemplo:</p> <pre><code>package UD02;\n\nimport java.util.Scanner;\n\npublic class EjemploUD02 {\n\n    public static void main(String[] args) {\n\n        Scanner teclado = new Scanner(System.in);\n\n        //Introducir texto desde teclado\n        String texto;\n        System.out.print(\"Introduce un texto: \");\n        texto = teclado.nextLine();\n        System.out.println(\"El texto introducido es: \" + texto);\n\n        //Introducir un n\u00famero entero desde teclado\n        String texto2;\n        int entero2;\n        System.out.print(\"Introduce un n\u00famero: \");\n        texto2 = teclado.nextLine();\n        entero2 = Integer.parseInt(texto2);\n        System.out.println(\"El n\u00famero introducido es:\" + entero2);\n\n        //Introducir un n\u00famero decimal desde teclado\n        String texto3;\n        double doble3;\n        System.out.print(\"Introduce un n\u00famero decimal: \");\n        texto3 = teclado.nextLine();\n        doble3 = Double.parseDouble(texto3); // convertimos texto a doble\n        System.out.println(\"N\u00famero decimal introducido es: \" + doble3);\n\n        System.out.println(\"La clase String\");\n        String nombre = \"Javier \"; //Observa que hay un espacio final\n        System.out.println(nombre.toUpperCase()); //JAVIER \n        System.out.println(nombre.charAt(4)); //e\n        System.out.println(nombre.indexOf(\"i\"));//3\n        System.out.println(nombre.substring(0, 3));//Javi\n        System.out.println(nombre.toLowerCase());//javier\n        System.out.println(nombre.trim());//Javier sin espacios finales\n        System.out.printf(\"%,.2f\\n\", 12345.1684);\n        nombre.toUpperCase().substring(0,3).indexOf(\"I\"); //3\n        System.out.format(\"El valor de la variable float es %f\"\n                + \", mientras que el valor del entero es %d\"\n                + \" y el string contiene %s\", doble3, entero2, texto);\n\n        System.err.println(\"Salida de error por pantalla\");\n    }\n}\n</code></pre>"},{"location":"UD02/UD02_ES.html#ejemplos-ud02","title":"Ejemplos UD02","text":"<p>EjemploUD02.java</p> <p>Pajaro.java</p>"},{"location":"UD02/UD02_ES.html#pildoras-informaticas-relacionadas","title":"P\u00edldoras inform\u00e1ticas relacionadas","text":""},{"location":"UD02/UD02_T01_GitHubClassroom.html","title":"T01 GitHub Classroom","text":""},{"location":"UD02/UD02_T01_GitHubClassroom.html#taller-ud02_01-github-classroom","title":"Taller UD02_01: GitHub Classroom","text":""},{"location":"UD02/UD02_T01_GitHubClassroom.html#requisitos-previos","title":"Requisitos previos","text":"<p>Necesitamos:</p> <ul> <li>Una cuenta de GitHub</li> <li>Tener el IDE IntelliJ instalado en nuestro ordenador</li> </ul>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#unirnos-a-github-classroom","title":"Unirnos a GitHub Classroom","text":"<p>Aceptamos el Assignement (la tarea/ejercicio) a partir del link del profesor, en este caso: https://classroom.github.com/a/LTEIJf5H</p> <p></p> <p>Nos mostrar\u00e1 la siguiente pantalla:</p> <p></p> <p>Abrimos el enlace que aparece con fondo azul: https://github.com/IES-Eduardo-Primo-Marques/ud02-martinezpenya (Vuestro enlace ser\u00e1 diferente, este es el mio)</p> <p>Esto nos lleva al repositorio en GitHub, y desde all\u00ed, copiamos la URL del repositorio, pero la de <code>ssh</code> en lugar de <code>https</code>:</p> <p></p>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#preparar-nuestra-autenticacion-a-github-mediante-clave-privadapublica-necesaria-para-usar-ssh","title":"Preparar nuestra autenticaci\u00f3n a GitHub mediante clave privada/p\u00fablica (necesaria para usar ssh)","text":"<p>En agosto 2021 GitHub elimin\u00f3 la autenticaci\u00f3n por contrase\u00f1a para operaciones Git en la l\u00ednea de comandos. Desde el 13 de agosto de 2021, es OBLIGATORIO usar:</p> <ul> <li>Tokens de acceso personal (Personal Access Tokens - PAT) para HTTPS</li> <li>Claves SSH para conexiones SSH</li> <li>GitHub CLI con su propio sistema de autenticaci\u00f3n</li> </ul>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#paso-1-generar-una-nueva-clave-ssh","title":"Paso 1: Generar una nueva clave SSH","text":"<ol> <li> <p>Abre la consola o PowerShell</p> </li> <li> <p>Genera la clave SSH:     </p><pre><code>ssh-keygen -t ed25519 -C \"tu_email@ejemplo.com\"\n</code></pre>     Reemplaza <code>\"tu_email@ejemplo.com\"</code> con tu email de GitHub <p>Para sistemas m\u00e1s antiguos, usa: <code>ssh-keygen -t rsa -b 4096 -C \"tu_email@ejemplo.com\"</code></p> </li> <li> <p>Sigue las instrucciones:     </p><pre><code>Enter file in which to save the key (C:\\Users\\tunombre/.ssh/id_ed25519):\n</code></pre> </li> </ol> <p>\u200b   Presiona Enter para aceptar la ubicaci\u00f3n por defecto</p> <ol> <li> <p>Establece una contrase\u00f1a segura (opcional pero recomendado):     </p><pre><code>Enter passphrase (empty for no passphrase):\nEnter same passphrase again:\n</code></pre> </li> <li> <p>Introduce una contrase\u00f1a segura y conf\u00edrmala.</p> </li> </ol>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#paso-2-localizar-y-copiar-la-clave-publica","title":"Paso 2: Localizar y copiar la clave p\u00fablica","text":"<ol> <li> <p>Navega al directorio <code>.ssh</code>:    Deber\u00edas ver <code>id_ed25519</code> (clave privada) y <code>id_ed25519.pub</code> (clave p\u00fablica)</p> </li> <li> <p>Copia la clave p\u00fablica <code>id_ed25519.pub</code>:</p> </li> </ol> <p>Abre el archivo en el Bloc de notas y copia el contenido del fichero</p>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#paso-3-iniciar-el-agente-y-agregar-la-clave-privada-opcional","title":"Paso 3: Iniciar el agente y agregar la clave privada (opcional)","text":"<ol> <li> <p>Abre PowerShell (esta vez necesitaras hacerlo como Administrador)</p> </li> <li> <p>Verifica si el servicio SSH est\u00e1 instalado:</p> </li> </ol> <pre><code>Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH*'\n</code></pre> <ol> <li>Si falta alg\u00fan componente, inst\u00e1lalo:</li> </ol> <pre><code>#Instalar cliente SSH\nAdd-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0\n#Instalar servidor SSH\nAdd-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0\n</code></pre> <ol> <li>Inicia el agente SSH:</li> </ol> <pre><code># Iniciar servicio\nStart-Service ssh-agent\n\n# Configurar para inicio autom\u00e1tico\nSet-Service -Name ssh-agent -StartupType Automatic\n</code></pre> <ol> <li>Agrega tu clave SSH:</li> </ol> <pre><code>ssh-add $env:USERPROFILE\\.ssh\\id_ed25519\n</code></pre>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#paso-4-configurar-la-clave-ssh-en-github","title":"Paso 4: Configurar la clave SSH en GitHub","text":"<ol> <li>Inicia sesi\u00f3n en tu cuenta de GitHub    - Ve a github.com y accede a tu cuenta</li> <li>Accede a la configuraci\u00f3n de SSH:    - Haz clic en tu foto de perfil (esquina superior derecha)    - Selecciona Settings    - En el men\u00fa lateral, haz clic en SSH and GPG keys</li> <li>Agrega una nueva clave SSH:    - Haz clic en el bot\u00f3n New SSH key o Add SSH key</li> <li>Completa los campos:    - Title: Un nombre descriptivo (ej: \"Mi PC Windows\")    - Key type: Dejar como \"Authentication Key\"    - Key: Pega la clave p\u00fablica que copiaste anteriormente</li> <li>Guarda la clave:    - Haz clic en Add SSH key    - Confirma tu contrase\u00f1a de GitHub si es necesario</li> </ol>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#paso-5-verificar-la-conexion-ssh","title":"Paso 5: Verificar la conexi\u00f3n SSH","text":"<ol> <li> <p>Prueba la conexi\u00f3n en la terminal o PowerShell:</p> <p>Si ejecutas este comando:</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>Deber\u00edas ver algo parecido a esto (despu\u00e9s de contestar <code>yes</code> a la pregunta, f\u00edjate que aparece tu nombre de GitHub, en mi caso <code>martinezpenya</code>):</p> <pre><code>The authenticity of host 'github.com (140.82.121.3)' can't be established.\nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\nHi martinezpenya! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre> </li> </ol> <p>Ahora abriremos IntelliJ y crearemos un nuevo proyecto (New Project from Version Control, o Project/Clone Repository) a partir de la url que hemos copiado en el punto anterior:</p> <p></p> <ol> <li>Pegamos la URL del paso anterior</li> <li>Elegimos la ubicaci\u00f3n de nuestro PC donde guardaremos el proyecto</li> <li>Pulsamos el bot\u00f3n clonar</li> </ol> <p>A continuaci\u00f3n nos pedir\u00e1 hacer Login con nuestra cuenta de GitHub:</p> <p></p> <p>Y en nuestro navegador debemos Autorizar la vinculaci\u00f3n de GitHub en el IDE de JetBrains:</p> <p></p> <p>Y cuando todo est\u00e9 correcto aparecer\u00e1:</p> <p></p> <p>Y ahora en nuestro IDE IntelliJ tenemos:</p> <p></p> <p>Ahora en la carpeta <code>src</code> debemos buscar el enunciado del ejercicio, en este caso <code>src/main/java/es/martinezpenya/UD02/_01_Temperatura.java</code></p> <pre><code>package es.martinezpenya.UD02;\n\nimport java.util.Scanner;\n\n/**\n *\n * @author David Mart\u00ednez (https://wwww.martinezpenya.es | https://martinezpenya.es/1DAMProgramacion/)\n */\n\n/*\nENUNCIADO (Puntos: 2)\n    (Temperatura) Crear una clase llamada Temperatura con dos m\u00e9todos:\n\n   - `celsiusToFarenheit`. Convierte grados *Celsius* a *Farenheit*.\n        $$\n            F=(1,8*C)+32\n        $$\n\n   - `farenheitToCelsius`. Convierte grados *Farenheit* a *Celsius*.\n        $$\n            C=\\frac{F-32}{1,8}\n        $$\n\n*/\n\npublic class _01_Temperatura {\n/* TODO: Tu solucion aqui */\n}\n</code></pre> <p>Debemos leer el enunciado y escribir nuestro c\u00f3digo donde pone:</p> <pre><code>...\n/* TODO: Tu solucion aqui */\n...\n</code></pre> <p>Una vez comprobamos que el c\u00f3digo funciona correctamente, vamos a comprobar si pasar\u00e1 los test impuestos por el profesor.</p> <p>Importante</p> <p>En las siguientes capturas se asume que hemos resuelto correctamente el primer ejercicio, por tanto pasamos 2 de los 69 tests que contiene la UD02.</p>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#crear-el-proyecto-en-intellij","title":"Crear el proyecto en IntelliJ","text":""},{"location":"UD02/UD02_T01_GitHubClassroom.html#comprobar-los-tests-maven","title":"Comprobar los tests (Maven)","text":"<p>Debemos realizar dos acciones:</p> <ol> <li>Primero compilar el proyecto completo con Maven:</li> </ol> <p></p> <p>Una vez comprobado que aparece BUIL SUCCESS (seguimos).</p> <ol> <li>Lanzar la tarea test y comprobar que sea correcta:</li> </ol> <p></p> <p>O mejor todavia, podemos ejecutar todos los test con informaci\u00f3n m\u00e1s visual:</p> <ol> <li>Buscamos la carpeta <code>test</code> en el proyecto</li> <li>Pulsamos el bot\u00f3n derecho del rat\u00f3n sobre la carpeta <code>java</code></li> <li>Elegimos la opci\u00f3n \"<code>Run 'All Tests'</code>\"</li> </ol> <p></p> <p>Y deber\u00edamos ver un apartado similar en la parte inferior izquierda de nuestro IDE:</p> <p></p> <p>Debes tener en cuenta que:</p> <ol> <li>Los tests no se ordenan alfab\u00e9ticamente.</li> <li>Si aparece un circulo amarillo con una X dentro, el test no pasa (aunque alguno de los tests internos funcionen)</li> <li>Si el tick aparece en verde es que el test ha pasado.</li> <li>Solo se conceden puntos en GitHub Classroom si todos los test de la clase funcionan. En este caso solo la clase <code>_01_Temperatura</code> nos otorgar\u00e1 puntos</li> </ol>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#subir-nuestra-solucion-a-github-classroom","title":"Subir nuestra soluci\u00f3n a GitHub Classroom","text":"<p>Una vez comprobado que pasamos los tests lo que queda es subir nuestra soluci\u00f3n a GitHub Classroom para que sea evaluada y valorada por el docente (Podemos repetir el proceso tantas veces como queramos, as\u00ed que lo podemos ir haciendo segun vayamos realizando los ejercicios).</p> <p></p> <ol> <li>Pasamos al apartado de control de versiones</li> <li>Elegimos los archivos que hemos cambiado y que queremos subir al repositorio para ser evaluados</li> <li>Indicamos el mensaje del commit (recomiendo que los puedas identificar de alguna manera, indicando lo que has cambiado, un n\u00famero de versi\u00f3n, etc.)</li> <li>Finalmente pulsamos el bot\u00f3n <code>Commit adn Push</code></li> </ol> <p>Si aparece este error:</p> <p></p> <p>Podemos elegir la opci\u00f3n <code>Commit anyway and push</code> si hemos pasado alguno de los test correctamente, o bien <code>Review code analysis</code> para ver porque IntelliJ ha detectado algun problema.</p> <p>Por \u00faltimo aparece esta pantalla, y pulsamos directamente el bot\u00f3n <code>Push</code>:</p> <p></p> <p>Tambi\u00e9n podemos ver que test hemos pasado satisfactoriamente en nuestro repositorio de Github:</p> <p></p> <p>Por \u00faltimo, cuando el docente evalue nuestra soluci\u00f3n y si todo ha ido bien acabaremos viendo en GitHub Classroom que nuestra soluci\u00f3n ha pasado los tests y nos ha asignado una puntuaci\u00f3n:</p> <p>Primero aparecer\u00e1 como enviado (submitted):</p> <p></p> <p>Y cuando est\u00e9 evaluado tendr\u00e1 puntuaci\u00f3n, en este caso 1 punto de un total de 1:</p> <p></p>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#ojo-no-esta-permitido-modificar-archivos-del-proyecto-que-no-esten-en-la-carpeta-srcjava","title":"OJO: No est\u00e1 permitido modificar archivos del proyecto que no est\u00e9n en la carpeta <code>src/java</code>","text":"<p>Aunque aparentemente todo te funcionar\u00e1 el docente ser\u00e1 notificado e invalidar\u00e1 los resultados de los test:</p> <p></p>"},{"location":"UD02/UD02_T01_GitHubClassroom.html#tarea","title":"Tarea","text":"<p>Debes enviar tus soluciones a GitHub Classroom y superar al menos la mitad de los tests, cuantos m\u00e1s tests superados, mejor nota tendr\u00e1s en la tarea.</p>"},{"location":"UD02/UD02_ejercicios_ES.html","title":"Ejercicios","text":""},{"location":"UD02/UD02_ejercicios_ES.html#ejercicios-de-la-ud02","title":"Ejercicios de la UD02","text":""},{"location":"UD02/UD02_ejercicios_ES.html#actividades","title":"Actividades","text":"<ol> <li> <p>(Temperatura) Crear una clase llamada Temperatura con dos m\u00e9todos:</p> <ul> <li><code>celsiusToFahrenheit</code>. Convierte grados Celsius a Fahrenheit.</li> </ul> \\[ F=(1,8*C)+32 \\] <ul> <li><code>fahrenheitToCelsius</code>. Convierte grados Fahrenheit a Celsius.</li> </ul> \\[ C=\\frac{F-32}{1,8} \\] </li> <li> <p>(Moto) A partir de la siguiente clase:</p> <pre><code>public class Moto {\n\n    private int velocidad;\n\n    public Moto() {\n        velocidad=0;\n    }\n}\n</code></pre> <p>A\u00f1ade los siguientes m\u00e9todos:</p> <ul> <li><code>int getVelocidad()</code>. Devuelve la velocidad del objeto moto.</li> <li><code>void acelera(int mas)</code>. Permite aumentar la velocidad del objeto moto.</li> <li><code>void frena(int menos)</code>. Permite reducir la velocidad del objeto moto.</li> </ul> </li> <li> <p>(Rebajas) Crea una clase <code>Rebajas</code> con un m\u00e9todo <code>descubrePorcentaje()</code> que descubra el descuento aplicado en un producto. El m\u00e9todo recibe el precio original del producto y el rebajado y devuelve el porcentaje aplicado. Podemos calcular el descuento realizando la operaci\u00f3n:     $$     porcentajeDescuento = \\frac{precioOriginal-precioRebajado}{precioOriginal}     $$</p> </li> <li> <p>(Finanzas) Realiza una clase <code>Finanzas</code> que convierta d\u00f3lares a euros y viceversa. Codifica los m\u00e9todos <code>dolaresToEuros</code> y <code>eurosToDolares</code>. Prueba que dicha clase funciona correctamente haciendo conversiones entre euros y d\u00f3lares. La clase tiene que tener:</p> <ul> <li>Un constructor <code>Finanzas()</code> por defecto el cual establece el cambio D\u00f3lar-Euro en 1.36.</li> <li>Un constructor <code>Finanzas(double cambio)</code>, el cual permitir\u00e1 configurar el cambio D\u00f3lar-euro a una cantidad personalizada.</li> </ul> </li> <li> <p>(MiNumero) Realiza una clase <code>MiNumero</code> que proporcione el doble, triple y cu\u00e1druple de un n\u00famero proporcionado en su constructor (realiza un m\u00e9todo para <code>doble</code>, otro para <code>triple</code> y otro para <code>cuadruple</code>). </p> <p>(Opcional, no hay puntos) Haz que la clase tenga un m\u00e9todo <code>main</code> y comprueba los distintos m\u00e9todos.</p> </li> <li> <p>(Numero) Realiza una clase <code>Numero</code> que almacene un n\u00famero entero y tenga las siguientes caracter\u00edsticas:</p> <ul> <li>Constructor por defecto que inicializa a 0 el n\u00famero interno.</li> <li>Constructor que inicializa el n\u00famero interno.</li> <li>M\u00e9todo <code>anade</code> que permite sumarle un n\u00famero al valor interno.</li> <li>M\u00e9todo <code>resta</code> que resta un n\u00famero al valor interno.</li> <li>M\u00e9todo <code>getValor</code>. Devuelve el valor interno.</li> <li>M\u00e9todo <code>getDoble</code>. Devuelve el doble del valor interno.</li> <li>M\u00e9todo <code>getTriple</code>. Devuelve el triple del valor interno.</li> <li>M\u00e9todo <code>setNumero</code>. Inicializa de nuevo el valor interno.</li> </ul> </li> <li> <p>(Peso) Crea la clase <code>Peso</code>, la cual tendr\u00e1 las siguientes caracter\u00edsticas:</p> <ul> <li>Deber\u00e1 tener un atributo donde se almacene el peso de un objeto en kilogramos.   En el constructor se le pasar\u00e1 el peso y la medida en la que se ha tomado (\"Lb\" para libras, \"Li\" para lingotes, \"Oz\" para onzas, \"P\" para peniques, \"K\" para kilos, \"G\" para gramos y \"Q\" para quintales).</li> <li>Deber\u00e1 de tener los siguientes m\u00e9todos:</li> <li><code>getLibras</code>. Devuelve el peso en libras.</li> <li><code>getLingotes</code>. Devuelve el peso en lingotes.</li> <li><code>getPeso</code>. Devuelve el peso en la medida que se pase como par\u00e1metro (\"Lb\" para libras, \"Li\" para lingotes, \"Oz\" para onzas, \"P\" para peniques, \"K\" para kilos, \"G\" para gramos y \"Q\" para quintales).</li> <li>Para la realizaci\u00f3n del ejercicio toma como referencia los siguientes datos:</li> <li>1 Libra = 16 onzas = 453 gramos.</li> <li>1 Lingote = 32,17 libras = 14,59 kg.</li> <li>1 Onza = 0,0625 libras = 28,35 gramos.</li> <li>1 Penique = 0,05 onzas = 1,55 gramos.</li> <li>1 Quintal = 100 libras = 43,3 kg.</li> </ul> <p>(Opcional, no hay puntos) Crea adem\u00e1s un m\u00e9todo <code>main</code> para testear y verificar los m\u00e9todos de esta clase.</p> </li> <li> <p>(Millas) Crea una clase con un m\u00e9todo <code>millasAMetros()</code> que toma como par\u00e1metro de entrada un valor en millas marinas y las convierte a metros. Una vez tengas este m\u00e9todo escribe otro <code>millasAKilometros()</code> que realice la misma conversi\u00f3n, pero esta vez exprese el resultado en kil\u00f3metros.</p> <p>Nota: 1 milla marina equivale a 1852 metros.</p> </li> <li> <p>(Coche) Crea la clase <code>Coche</code> con dos constructores. Uno no toma par\u00e1metros y el otro s\u00ed. Los dos constructores inicializar\u00e1n los atributos <code>marca</code> y <code>modelo</code> de la clase.  El constructor por defecto (sin parametros) crea el coche \"Ford\" modelo \"C-MAX\". </p> <p>(Opcional, no hay puntos)  Crea dos objetos (cada objeto llama a un constructor distinto) y verifica que todo funciona correctamente.</p> </li> <li> <p>(Consumo) Implementa una clase <code>Consumo</code>, la cual forma parte del \"ordenador de a bordo\" de un coche y tiene las siguientes caracter\u00edsticas:</p> <ul> <li>Atributos:</li> <li>kilometros.</li> <li>litros. Litros de combustible consumido.</li> <li>vmed. Velocidad media.</li> <li>pgas. Precio de la gasolina.</li> <li>M\u00e9todos:</li> <li><code>getTiempo</code>. Indicar\u00e1 el tiempo empleado en realizar el viaje.</li> <li><code>consumoMedio</code>. Consumo medio del veh\u00edculo (en litros cada 100 kil\u00f3metros).</li> <li><code>consumoEuros</code>. Consumo medio del veh\u00edculo (en euros cada 100 kil\u00f3metros).</li> </ul> <p>No olvides crear un constructor para la clase que establezca el valor de los atributos. Elige el tipo de datos m\u00e1s apropiado para cada atributo.</p> </li> <li> <p>(ConsumoModificadores) Para la clase anterior implementa los siguientes m\u00e9todos, los cuales podr\u00e1n modificar los valores de los atributos de la clase:</p> <ul> <li><code>setKms</code></li> <li><code>setLitros</code></li> <li><code>setVmed</code></li> <li><code>setPgas</code></li> </ul> </li> <li> <p>(Restaurante) Un restaurante cuya especialidad son las patatas con carne nos pide dise\u00f1ar un m\u00e9todo (<code>calcularClientes</code>) con el que se pueda saber cu\u00e1ntos clientes pueden atender con la materia prima que tienen en el almac\u00e9n. El m\u00e9todo recibe la cantidad de patatas y carne en kilos y devuelve el n\u00famero de clientes que puede atender el restaurante teniendo en cuenta que por cada tres personas, utilizan un dos kilos de patatas y un kilo de carne.</p> </li> <li> <p>(RestauranteClase) Modifica el programa anterior creando una clase que permita almacenar los kilos de patatas y carne del restaurante. Implementa los siguientes m\u00e9todos:</p> <ul> <li><code>public void addCarne(int x)</code>. A\u00f1ade x kilos de carne a los ya existentes.</li> <li><code>public void addPatatas(int x)</code>. A\u00f1ade x kilos de patatas a los ya existentes.</li> <li><code>public int getComensales()</code>. Devuelve el n\u00famero de clientes que puede atender el restaurante (este es el m\u00e9todo del ejercicio anterior).</li> <li><code>public double getCarne()</code>. Devuelve los kilos de carne que hay en el almac\u00e9n.</li> <li><code>public double getPatatas()</code>. Devuelve los kilos de patatas que hay en el almac\u00e9n.</li> </ul> </li> <li> <p>(Proveedor) Crear un clase llamada <code>Proveedor</code> con las siguientes propiedades:</p> <ul> <li><code>CIF</code></li> <li><code>nombreEmpresa</code></li> <li><code>descripcion</code></li> <li><code>sector</code></li> <li><code>direccion</code></li> <li><code>telefono</code></li> <li><code>poblacion</code></li> <li><code>codPostal</code></li> <li><code>correo</code></li> </ul> <p>Crear para la clase <code>Proveedor</code> los m\u00e9todos:</p> <ul> <li>Constructor que permite crear una instancia con los datos de un proveedor.</li> <li>M\u00e9todos get (getters).</li> <li>M\u00e9todos set (setters).</li> <li>M\u00e9todo <code>verificaCorreo</code> que devuelve true si la direcci\u00f3n de correo contiene <code>@</code>.</li> <li>M\u00e9todo que muestre todos los datos del proveedor.</li> </ul> <p>Crear una clase principal <code>main</code> ejecutable que:</p> <ul> <li>Cree una instancia del objeto <code>Proveedor</code> llamado <code>proveedor</code>.</li> <li>Cambie el sector del <code>proveedor</code>.</li> <li>Muestre el sector del <code>proveedor</code>.</li> <li>Verifique si el correo es v\u00e1lido.</li> <li>Muestre todos los datos del <code>proveedor</code>.</li> </ul> </li> <li> <p>(Producto) Crear una clase llamada <code>Producto</code> con las siguientes propiedades:</p> <ul> <li><code>codProducto</code></li> <li><code>nombreProducto</code></li> <li><code>descripcion</code></li> <li><code>categoria</code></li> <li><code>peso</code></li> <li><code>precio</code></li> <li><code>stock</code></li> </ul> <p>Crear para la clase <code>Producto</code> los siguiente m\u00e9todos:</p> <ul> <li><code>Producto</code>: Permite crear una instancia con los datos de un producto.</li> <li>Getters y Setters para todas las propiedades.</li> <li><code>aumentaStock</code>: Permite aumentar el stock de unidades del producto. Se le pasa el dato de unidades que aumentamos.</li> <li><code>disminuyeStock</code>: Permite disminuir el stock de unidades del producto. Se le pasa el dato de unidades que disminuimos.</li> <li><code>ivaProducto</code>: Permite calcular el IVA aplicado al precio del producto. Se le pasa el dato del porcentaje de IVA.</li> <li><code>mostrarDatos</code>: Muestra los datos del producto.</li> </ul> <p>Crear una clase principal <code>main</code> ejecutable que:</p> <ul> <li>Crear dos instancias de la clase <code>Producto</code> llamadas <code>productoHardware</code> y <code>productoSoftware</code>.</li> <li>Mostrar los datos de los dos objetos <code>Producto</code> que hemos creado.</li> <li>Aumenta el stock de unidades del <code>productoHardware</code> en 12 unidades.</li> <li>Disminuir el stock de unidades del <code>productoSoftware</code> en 5 unidades.</li> <li>Calcula el IVA de los dos objetos <code>Producto</code> que hemos creado.</li> <li>Mostrar los datos de los dos objetos <code>Producto</code>, as\u00ed como sus importes de IVA y los precios finales de cada una de las instancias.</li> </ul> </li> <li> <p>(Cuenta) Crea una clase llamada <code>Cuenta</code> que tendr\u00e1 los siguientes atributos: <code>titular</code> y <code>cantidad</code> (puede tener decimales).</p> <p>Al crear una instancia del objeto Cuenta, el titular ser\u00e1 obligatorio y la cantidad es opcional. Crea dos constructores que cumplan lo anterior, es decir debemos crear dos m\u00e9todos constructores con el mismo nombre que ser\u00e1 el nombre del objeto.</p> <p>Crea sus m\u00e9todos get, set y el m\u00e9todo <code>mostrarDatos</code> que muestre los datos de la cuenta. Tendr\u00e1 dos m\u00e9todos especiales:</p> <ul> <li><code>ingresar(double cantidad)</code>: se ingresa una cantidad a la cuenta, si la cantidad introducida es negativa, no se har\u00e1 nada.</li> <li><code>retirar(double cantidad)</code>: se retira una cantidad a la cuenta, si restando la cantidad actual a la que nos pasan es negativa, la cantidad de la cuenta pasa a ser 0 retirando el importe m\u00e1ximo en funci\u00f3n de la cantidad disponible en el objeto.</li> </ul> <p>Crear una clase principal <code>main</code> ejecutable:</p> <ul> <li>Crear una instancia del objeto Cuenta llamada <code>cuentaParticular1</code> con el nombre del titular.</li> <li>Crear una instancia del objeto Cuenta llamada <code>cuentaEmpresa1</code> con el nombre del titular y una cantidad inicial de dinero.</li> <li>Mostrar el titular de la instancia <code>cuentaParticular1</code>.</li> <li>Mostrar el saldo de la instancia <code>cuentaEmpresa1</code>.</li> <li>Ingresar 1000 \u20ac en la instancia <code>cuentaParticular1</code>.</li> <li>Retirar 500 \u20ac en la instancia <code>cuentaEmpresa1</code>.</li> <li>Mostrar los datos de las dos instancias del objeto <code>Cuenta</code>.</li> </ul> </li> <li> <p>(Libro) Crea una clase llamada <code>Libro</code> que guarde la informaci\u00f3n de cada uno de los libros de una biblioteca. La clase debe guardar las siguientes propiedades:</p> <ul> <li><code>t\u00edtulo</code></li> <li><code>autor</code></li> <li><code>editorial</code></li> <li><code>n\u00famero de ejemplares totales</code></li> <li><code>n\u00famero de prestados</code></li> </ul> <p>La clase contendr\u00e1 los siguientes m\u00e9todos:</p> <ul> <li>Constructor por defecto.</li> <li>Constructor con par\u00e1metros.</li> <li>M\u00e9todos Setters/getters.</li> <li>M\u00e9todo <code>prestamo</code> que incremente el atributo correspondiente cada vez que se realice un pr\u00e9stamo del libro. No se podr\u00e1n prestar libros de los que no queden ejemplares disponibles para prestar. Devuelve <code>true</code> si se ha podido realizar la operaci\u00f3n y <code>false</code> en caso contrario.</li> <li>M\u00e9todo <code>devolucion</code> que decremente el atributo correspondiente cuando se produzca la devoluci\u00f3n de un libro. No se podr\u00e1n devolver libros que no se hayan prestado. Devuelve <code>true</code> si se ha podido realizar la operaci\u00f3n y <code>false</code> en caso contrario.</li> <li>M\u00e9todo <code>perdido</code> que decremente el atributo n\u00famero de ejemplares por perdida de ejemplar. No se podr\u00e1n perder libros que no tengan ejemplares o no se hayan prestado. Devuelve <code>true</code> si se ha podido realizar la operaci\u00f3n y <code>false</code> en caso contrario.</li> <li>M\u00e9todo <code>mostrarDatos</code> para mostrar los datos de los libros.</li> </ul> <p>Crear una clase principal <code>main</code> ejecutable:</p> <ul> <li>Crear una instancia del objeto libro <code>libroInformatica1</code> con los datos de un libro.</li> <li>Consultar el t\u00edtulo de la instancia <code>libroInformatica1</code>.</li> <li>Cambiar la editorial de la instancia <code>libroInformatica1</code> por Anaya.</li> <li>Realiza el pr\u00e9stamo de la instancia <code>libroInformatica1</code>.</li> <li>Realiza otro pr\u00e9stamo de la instancia <code>libroInformatica1</code>.</li> <li>Muestra los prestamos de la instancia <code>libroInformatica1</code>.</li> <li>Realiza la devoluci\u00f3n de la instancia <code>libroInformatica1</code>.</li> <li>Muestra los prestamos de la instancia <code>libroInformatica1</code>.</li> <li>Gestiona la p\u00e9rdida de un ejemplar de la instancia <code>libroInformatica1</code>.</li> <li>Muestra los ejemplares de la instancia <code>libroInformatica1</code>.</li> <li>Muestra todos los datos de la instancia <code>libroInformatica1</code>.</li> </ul> </li> <li> <p>(Hospital) Crear una clase llamada <code>Hospital</code> con las siguientes propiedades y m\u00e9todos: </p> <ul> <li> <p>Propiedades:</p> <ul> <li><code>codHospital</code></li> <li><code>nombreHospital</code></li> <li><code>direccion</code></li> <li><code>telefono</code></li> <li><code>poblacion</code></li> <li><code>codPostal</code></li> <li><code>habitacionesTotales</code></li> <li><code>habitacionesOcupadas</code></li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>Hospital</code>: Permite crear una instancia con los datos de un hospital.</li> <li>M\u00e9todos get.</li> <li>M\u00e9todos set.</li> <li>M\u00e9todo <code>ingreso</code> que incrementa las habitaciones ocupadas. No puede realizarse el ingreso si las habitaciones ocupadas son iguales a las habitaciones totales del hospital. Devuelve <code>true</code> si se ha podido realizar el ingreso.</li> <li>M\u00e9todo <code>alta</code> que decrementa las habitaciones ocupadas. No puede realizarse el alta las habitaciones ocupadas son 0. Devuelve <code>true</code> si se ha podido realizar el alta.</li> <li>M\u00e9todo que muestre todos los datos del hospital.</li> </ul> </li> <li> <p>Crear una clase principal <code>main</code> ejecutable que:</p> <ul> <li>Cree una instancia de la clase <code>Hospital</code> llamada <code>hospitalRibera</code>.</li> <li>Cambie el n\u00famero de habitaciones de la instancia <code>hospitalRibera</code>.</li> <li>Muestre el n\u00famero de habitaciones de la instancia <code>hospitalRibera</code>.</li> <li>Realiza un ingreso de la instancia <code>hospitalRibera</code>.</li> <li>Muestra las habitaciones ocupadas de la instancia <code>hospitalRibera</code>.</li> <li>Realiza un alta de la instancia <code>hospitalRibera</code>.</li> <li>Muestra las habitaciones ocupadas de la instancia <code>hospitalRibera</code>.</li> <li>Muestre todos los datos de la instancia <code>hospitalRibera</code>.</li> </ul> </li> </ul> </li> <li> <p>(Medico) Crear un clase llamada <code>Medico</code> con las siguientes propiedades y m\u00e9todos:</p> <ul> <li> <p>Propiedades:</p> <ul> <li><code>codMedico</code></li> <li><code>nombre</code></li> <li><code>apellidos</code></li> <li><code>dni</code></li> <li><code>direccion</code></li> <li><code>telefono</code></li> <li><code>poblacion</code></li> <li><code>codPostal</code></li> <li><code>fechaNacimiento</code></li> <li><code>especialidad</code></li> <li><code>sueldo</code></li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li>Medico: Permite crear una instancia con los datos de un m\u00e9dico.</li> <li>M\u00e9todos get. Recuperan datos de la instancia del objeto.</li> <li>M\u00e9todos set. Asignan datos a la instancia del objeto.</li> <li><code>retencionMedico</code>: Permite calcular la retenci\u00f3n aplicada al sueldo del m\u00e9dico. Se le pasa el dato del porcentaje de retenci\u00f3n.</li> <li><code>mostrarDatos</code>: Muestra los datos del m\u00e9dico.</li> </ul> </li> <li> <p>Crear una clase principal <code>main</code> ejecutable que:</p> <ul> <li>Crear dos instancias de la clase <code>Medico</code> llamados <code>medicoDigestivo</code> y <code>medicoTraumatologo</code>.</li> <li>Cambia el sueldo del <code>medicoTraumatologo</code>.</li> <li>Muestra el sueldo del <code>medicoTraumatologo</code>.</li> <li>Cambia el dni del <code>medicoDigestivo</code>.</li> <li>Muestra el dni del <code>medicoDigestivo</code>.</li> <li>Calcula la retenci\u00f3n de las dos instancias de la clase <code>Medico</code> que hemos creado.</li> <li>Mostrar los datos de las dos instancias de la clase <code>Medico</code> que hemos creado, as\u00ed como las retenciones y los sueldos finales de cada una.</li> </ul> </li> </ul> </li> </ol>"},{"location":"UD02/UD02_ejercicios_ES.html#ejercicios","title":"Ejercicios","text":"<p>Estos ejercicios utilizan la interfaz gr\u00e1fica a la que dedicaremos m\u00e1s tiempo hacia finales de curso. De momento con entender algunos conceptos muy b\u00e1sicos de como dibujar elementos gr\u00e1ficos en una ventana podemos intentar resolverlos usando los conceptos de objetos, clases, herencia, m\u00e9todos, etc\u00e9tera que hemos visto en teor\u00eda.</p> <p>El primero est\u00e1 resuelto y comentado para que te ayude a resolver el resto por tu cuenta o con la ayuda del docente.</p> <ol> <li> <p>(LlenarConCirculo) Crear una pizarra cuadrada y dibujar en ella un c\u00edrculo que la ocupe por completo.</p> <pre><code>//importaciones necesarias para los ejercicios, no necesitas m\u00e1s.\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport java.awt.Color;\nimport java.awt.Graphics;\n\n/*\n  Necesitamos que nuestra clase LlenarConCirculo herede de JPanel para poder\n  pintar en su interior.\n*/\npublic class LlenarConCirculo extends JPanel {\n\n    @Override\n    public void paint(Graphics g) {\n        //Fijamos el color que tendr\u00e1 la figura\n        g.setColor(Color.RED);\n        /*\n          Dibujamos un ovalo relleno fijando las 4 esquinas que lo delimitan:\n          - x1, y1, x2, y2\n          En nuestro caso adem\u00e1s hacemos uso de la funci\u00f3n reflexiva\n          this.getWidth() y this.getHeight() para conocer la anchura y altura\n          (respectivamente) de nuestra ventana.\n        */        \n        g.fillOval(0, 0, this.getWidth(), this.getHeight());\n        /* \n          Otras funciones disponibles para dibujar son:\n          - fill3DRect(int x, int y, int width, int height, boolean raised)\n            Paints a 3-D highlighted rectangle filled with the current color.\n          - fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)\n            Fills a circular or elliptical arc covering the specified rectangle.\n          - fillOval(int x, int y, int width, int height)\n            Fills an oval bounded by the specified rectangle with the current color.\n          - fillPolygon(int[] xPoints, int[] yPoints, int nPoints)\n            Fills a closed polygon defined by arrays of x and y coordinates.\n          - fillPolygon(Polygon p)\n            Fills the polygon defined by the specified Polygon object with the graphics \n            context's current color.\n          - fillRect(int x, int y, int width, int height)\n            Fills the specified rectangle.\n          - fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)\n            Fills the specified rounded corner rectangle with the current color.                \n          - fill3DRect(int x, int y, int width, int height, boolean raised)\n            Paints a 3-D highlighted rectangle filled with the current color.\n          - fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)\n            Fills a circular or elliptical arc covering the specified rectangle.\n          - fillOval(int x, int y, int width, int height)\n            Fills an oval bounded by the specified rectangle with the current color.\n          - fillPolygon(int[] xPoints, int[] yPoints, int nPoints)\n            Fills a closed polygon defined by arrays of x and y coordinates.\n          - fillPolygon(Polygon p)\n            Fills the polygon defined by the specified Polygon object with the graphics \n            context's current color.\n          - fillRect(int x, int y, int width, int height)\n            Fills the specified rectangle.\n          - fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)\n            Fills the specified rounded corner rectangle with the current color.            - \n        */\n    }\n\n    public static void main(String[] args) {\n        //Creamos una nueva ventana\n        JFrame MainFrame = new JFrame();\n        //Fijamos su tama\u00f1o en 300px de ancho por 300px de alto\n        MainFrame.setSize(300, 300);\n        //Creamos el objeto que vamos a dibujar con el m\u00e9todo paint()\n        LlenarConCirculo circlePanel = new LlenarConCirculo();\n        //A\u00f1adimos el objeto recien creado a la ventana\n        MainFrame.add(circlePanel);\n        //Hacemos visible la ventana (con el dibujo)\n        MainFrame.setVisible(true);\n    }\n}\n</code></pre> <p>Este es el esquema b\u00e1sico que necesitas para resolver todos los ejercicios planteados:</p> <pre><code>//importaciones necesarias para los ejercicios, no necesitas m\u00e1s.\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport java.awt.Color;\nimport java.awt.Graphics;\n\n/*\n  Necesitamos que nuestra clase herede de JPanel para poder\n  pintar en su interior.\n*/\npublic class TuClaseEjercicio extends JPanel {\n\n    @Override\n    public void paint(Graphics g) {\n        // INSERTA TU C\u00d3DIGO AQU\u00cd!!! &lt;&lt;--\n        //Fijamos el color que tendr\u00e1 la figura\n        //Dibuja la/s figura/s que te pide el ejercicio\n    }\n\n    public static void main(String[] args) {\n        //Creamos una nueva ventana\n        JFrame MainFrame = new JFrame();\n        //Fijamos su tama\u00f1o en 300px de ancho por 300px de alto\n        MainFrame.setSize(300, 300);\n        //Creamos el objeto que vamos a dibujar con el m\u00e9todo paint()\n        LlenarConCirculo tuDibujo = new LlenarConCirculo();\n        //A\u00f1adimos el objeto recien creado a la ventana\n        MainFrame.add(tuDibujo);\n        //Hacemos visible la ventana (con el dibujo)\n        MainFrame.setVisible(true);\n    }\n}\n</code></pre> </li> <li> <p>(LlenarConRectangulo) Crear una pizarra de tama\u00f1o aleatorio y dibujar en ella un rect\u00e1ngulo que la ocupe por completo. </p> </li> <li> <p>(MitadYMitad) Crear una pizarra de tama\u00f1o aleatorio y dibujar un rect\u00e1ngulo ROJO que ocupe la mitad izquierda y uno VERDE que ocupe la mitad derecha.</p> </li> <li> <p>(Dos partes) Crear una pizarra de tama\u00f1o aleatorio y dibujar un rect\u00e1ngulo ROJO que ocupe la parte superior (25% de la altura) y uno VERDE que ocupe la parte inferior (75% restante).</p> </li> <li> <p>(CentrarFiguras) Crear una pizarra de tama\u00f1o aleatorio. Dibujar en el centro un cuadrado de lado 100 y  un circulo de radio 25.</p> </li> <li> <p>(RadioAleatorioCentrado) Crear una pizarra de tama\u00f1o aleatorio. Dibujar en centro de la pizarra un c\u00edrculo de radio aleatorio (entre 50 y 200 pixels de radio)</p> </li> <li> <p>(RadioAleatorio) Crear una pizarra de tama\u00f1o aleatorio. Dibujar en la esquina superior izquierda un c\u00edrculo de radio aleatorio (entre 50 y 200)</p> </li> </ol>"},{"location":"UD03/UD03_ES.html","title":"Estructuras de control y Excepciones","text":""},{"location":"UD03/UD03_ES.html#estructuras-de-control-y-excepciones","title":"Estructuras de control y Excepciones","text":""},{"location":"UD03/UD03_ES.html#introduccion","title":"Introducci\u00f3n","text":"<p>En unidades anteriores has podido aprender cuestiones b\u00e1sicas sobre el lenguaje JAVA: definici\u00f3n de variables, tipos de datos, asignaci\u00f3n de valores, uso de literales, diferentes operadores que se pueden aplicar, conversiones de tipos, inserci\u00f3n de comentarios, etc. Posteriormente, nos sumergimos de lleno en el mundo de los objetos. Primero hemos conocido su filosof\u00eda, para m\u00e1s tarde ir recorriendo los conceptos y t\u00e9cnicas m\u00e1s importantes relacionadas con ellos: Propiedades, m\u00e9todos, clases, declaraci\u00f3n y uso de objetos, librer\u00edas, etc.</p> <p>Vale, parece ser que tenemos los elementos suficientes para comenzar a generar programas escritos en JAVA, \u00bfSeguro?</p> <p>Como habr\u00e1s deducido, con lo que sabemos hasta ahora no es suficiente. Existen m\u00faltiples situaciones que nuestros programas deben representar y que requieren tomar ciertas decisiones, ofrecer diferentes alternativas o llevar a cabo determinadas operaciones repetitivamente para conseguir sus objetivos.</p> <p>Si has programado alguna vez o tienes ciertos conocimientos b\u00e1sicos sobre lenguajes de programaci\u00f3n, sabes que la gran mayor\u00eda de lenguajes poseen estructuras que permiten a los programadores controlar el flujo de la informaci\u00f3n de sus programas. Esto realmente es una ventaja para la persona que est\u00e1 aprendiendo un nuevo lenguaje, o tiene previsto aprender m\u00e1s de uno, ya que estas estructuras suelen ser comunes a todos (con algunos cambios de sintaxis o conjunto de reglas que definen las secuencias correctas de los elementos de un lenguaje de programaci\u00f3n.). Es decir, si conoc\u00edas sentencias de control de flujo en otros lenguajes, lo que vamos a ver a lo largo de esta unidad te va a sonar bastante.</p> <p>Para alguien que no ha programado nunca, un ejemplo sencillo le va a permitir entender qu\u00e9 es eso de las sentencias de control de flujo. Piensa en un fontanero (programador), principalmente trabaja con agua (datos) y se encarga de hacer que \u00e9sta fluya por donde \u00e9l quiere (programa) a trav\u00e9s de un conjunto de tuber\u00edas, codos, latiguillos, llaves de paso, etc. (sentencias de control de flujo).</p> <p>Pues esas estructuras de control de flujo son las que estudiaremos, conoceremos su estructura, funcionamiento, c\u00f3mo utilizarlas y d\u00f3nde. A trav\u00e9s de ellas, al construir nuestros programas podremos hacer que los datos (agua) fluyan por los caminos adecuados para representar la realidad del problema y obtener un resultado adecuado.</p> <p>Los tipos de estructuras de programaci\u00f3n que se emplean para el control del flujo de los datos son los siguientes:</p> <ul> <li>Secuencia: compuestas por \\(0\\), \\(1\\) o \\(N\\) sentencias que se ejecutan en el orden en que han sido escritas. Es la estructura m\u00e1s sencilla y sobre la que se construir\u00e1n el resto de estructuras. </li> <li>Selecci\u00f3n: es un tipo de sentencia especial de decisi\u00f3n y de un conjunto de secuencias de instrucciones asociadas a ella. Seg\u00fan la evaluaci\u00f3n de la sentencia de decisi\u00f3n se generar\u00e1 un resultado (que suele ser verdadero o falso) y en funci\u00f3n de \u00e9ste, se ejecutar\u00e1n una secuencia de instrucciones u otra. Las estructuras de selecci\u00f3n podr\u00e1n ser simples, compuestas y m\u00faltiples.</li> <li>Iteraci\u00f3n: es un tipo de sentencia especial de decisi\u00f3n y una secuencia de instrucciones que pueden ser repetidas seg\u00fan el resultado de la evaluaci\u00f3n de la sentencia de decisi\u00f3n. Es decir, la secuencia de instrucciones se ejecutar\u00e1 repetidamente si la sentencia de decisi\u00f3n arroja un valor correcto, en otro la estructura de repetici\u00f3n se detendr\u00e1.</li> </ul> <p>Adem\u00e1s de las sentencias t\u00edpicas de control de flujo, en esta unidad haremos una revisi\u00f3n de las sentencias de salto, que aunque no son demasiado recomendables, es necesario conocerlas. Como nuestros programas podr\u00e1n generar errores y situaciones especiales, echaremos un vistazo al manejo de excepciones en JAVA. Posteriormente, analizaremos la mejor manera de llevar a cabo las pruebas de nuestros programas y la depuraci\u00f3n de los mismos. Y finalmente, aprenderemos a valorar y utilizar las herramientas de documentaci\u00f3n de programas.</p>"},{"location":"UD03/UD03_ES.html#sentencias-y-bloques","title":"Sentencias y bloques","text":"<p>Este ep\u00edgrafe lo utilizaremos para reafirmar cuestiones que son obvias y que en el transcurso de anteriores unidades se han dado por sabidas. Aunque, a veces, es conveniente recordar. Lo haremos como un conjunto de FAQ's:</p> <ul> <li> <p>\u00bfC\u00f3mo se escribe un programa sencillo? Si queremos que un programa sencillo realice instrucciones o sentencias para obtener un determinado resultado, es necesario colocar \u00e9stas una detr\u00e1s de la otra, exactamente en el orden en que deben ejecutarse.</p> </li> <li> <p>\u00bfPodr\u00edan colocarse todas las sentencias una detr\u00e1s de otra, separadas por puntos y comas en una misma l\u00ednea?, claro que s\u00ed, pero no es muy recomendable. Cada sentencia debe estar escrita en una l\u00ednea, de esta manera tu c\u00f3digo ser\u00e1 mucho m\u00e1s legible y la localizaci\u00f3n de errores en tus programas ser\u00e1 m\u00e1s sencilla y r\u00e1pida. De hecho, cuando se utilizan herramientas de programaci\u00f3n, los errores suelen asociarse a un n\u00famero o n\u00fameros de l\u00ednea.</p> </li> <li> <p>\u00bfPuede una misma sentencia ocupar varias l\u00edneas en el programa?, s\u00ed. Existen sentencias que, por su tama\u00f1o, pueden generar varias l\u00edneas. Pero siempre finalizar\u00e1n con un punto y coma.</p> </li> <li> <p>\u00bfEn Java todas las sentencias se terminan con punto y coma?, Efectivamente. Si detr\u00e1s de una sentencia ha de venir otra, pondremos un punto y coma. Escribiendo la siguiente sentencia en una nueva l\u00ednea. Pero en algunas ocasiones, sobre todo cuando utilizamos estructuras de control de flujo, detr\u00e1s de la cabecera de una estructura de este tipo no debe colocarse punto y coma. No te preocupes, lo entender\u00e1s cuando analicemos cada una de ellas.</p> </li> <li> <p>\u00bfQu\u00e9 es la sentencia nula en Java? La sentencia nula es una l\u00ednea que no contiene ninguna instrucci\u00f3n y en la que s\u00f3lo existe un punto y coma. Como su nombre indica, esta sentencia no hace nada.</p> </li> <li> <p>\u00bfQu\u00e9 es un bloque de sentencias? Es un conjunto de sentencias que se encierra entre llaves y que se ejecutar\u00eda como si fuera una \u00fanica orden. Sirve para agrupar sentencias y para clarificar el c\u00f3digo. Los bloques de sentencias son utilizados en Java en la pr\u00e1ctica totalidad de estructuras de control de flujo, clases, m\u00e9todos, etc. La siguiente tabla muestra dos formas de construir un bloque de sentencias.</p> </li> </ul> Bloque de sentencias 1 Bloque de sentencias 2 <code>{sentencia1; sentencia2; ...; sentenciaN;}</code> <code>{</code> <code>sentencia1;</code> <code>sentencia2;</code> <code>...;</code> <code>sentenciaN;</code><code>}</code> <ul> <li>\u00bfEn un bloque de sentencias, \u00e9stas deben estar colocadas con un orden exacto? En ciertos casos s\u00ed, aunque si al final de su ejecuci\u00f3n se obtiene el mismo resultado, podr\u00edan ocupar diferentes posiciones en nuestro programa.</li> </ul> <p>DEBES CONOCER Observa los tres archivos que te ofrecemos a continuaci\u00f3n y compara su c\u00f3digo fuente. Ver\u00e1s que los tres obtienen el mismo resultado, pero la organizaci\u00f3n de las sentencias que los componen es diferente entre ellos.</p> <p>Ejemplo 1:</p> <pre><code>package organizacion_sentencias1;\n/**\n*\n* Organizaci\u00f3n de sentencias secuencial\n*/\npublic class Organizacion_sentencias_1 {\n    public static void main(String[] args) {\n        System.out.println (\"Organizaci\u00f3n secuencial de sentencias\");\n        int dia=12;\n        System.out.println (\"El d\u00eda es: \" + dia);\n        int mes=11;\n        System.out.println (\"El mes es: \" + mes);\n        int anio=2011;\n        System.out.println (\"El anio es: \" + anio);\n    }\n}\n</code></pre> <p>En este primer archivo, las sentencias est\u00e1n colocadas en orden secuencial.</p> <p>Ejemplo 2:</p> <pre><code>package organizacion_sentencias2;\n/**\n*\n* Organizaci\u00f3n de sentencias con declaraci\u00f3n previa de variables\n*/\npublic class Organizacion_sentencias_2 {\n    public static void main(String[] args) {\n        // Zona de declaraci\u00f3n de variables\n        int dia=10;\n        int mes=11;\n        int anio=2011;\n        System.out.println (\"Organizaci\u00f3n con declaraci\u00f3n previa de variables\");\n        System.out.println (\"El d\u00eda es: \" + dia);\n        System.out.println (\"El mes es: \" + mes);\n        System.out.println (\"El a\u00f1o es: \" + anio);\n    }\n}\n</code></pre> <p>En este segundo archivo, se declaran al principio las variables necesarias. En Java no es imprescindible hacerlo as\u00ed, pero s\u00ed que antes de utilizar cualquier variable \u00e9sta debe estar previamente declarada. Aunque la declaraci\u00f3n de dicha variable puede hacerse en cualquier lugar de nuestro programa.</p> <p>Ejemplo 3:</p> <pre><code>package organizacion_sentencias3;\n/**\n*\n* Organizaci\u00f3n de sentencias en zonas diferenciadas\n* seg\u00fan las operaciones que se realicen en el c\u00f3digo\n*/\npublic class Organizacion_sentencias_3 {\n    public static void main(String[] args) {\n        // Zona de declaraci\u00f3n de variables\n        int dia;\n        int mes;\n        int anio;\n        String fecha;\n        //Zona de inicializaci\u00f3n o entrada de datos\n        dia=10;\n        mes=11;\n        anio=2011;\n        fecha=\"\";\n        //Zona de procesamiento\n        fecha=dia+\"/\"+mes+\"/\"+anio;\n        //Zona de salida\n        System.out.println (\"Organizaci\u00f3n con zonas diferenciadas en el c\u00f3digo\");\n        System.out.println (\"La fecha es: \" + fecha);\n    }\n}\n</code></pre> <p>En este tercer archivo, podr\u00e1s apreciar que se ha organizado el c\u00f3digo en las siguientes partes: declaraci\u00f3n de variables, petici\u00f3n de datos de entrada, procesamiento de dichos datos y obtenci\u00f3n de la salida. Este tipo de organizaci\u00f3n est\u00e1 m\u00e1s estandarizada y hace que nuestros programas ganen en legibilidad.</p> <p>Construyas de una forma o de otra tus programas, debes tener en cuenta siempre en Java las siguientes premisas:</p> <ul> <li>Declara cada variable antes de utilizarla.</li> <li>Inicializa con un valor cada variable la primera vez que la utilices.</li> </ul> <p>No es recomendable usar variables no inicializadas en nuestros programas, pueden provocar errores o resultados imprevistos.</p>"},{"location":"UD03/UD03_ES.html#estructuras-de-seleccion","title":"Estructuras de selecci\u00f3n","text":"<p>\u00bfC\u00f3mo conseguimos que nuestros programas puedan tomar decisiones? Para comenzar, lo haremos a trav\u00e9s de las estructuras de selecci\u00f3n. Estas estructuras constan de una sentencia especial de decisi\u00f3n y de un conjunto de secuencias de instrucciones.</p> <p>El funcionamiento es sencillo, la sentencia de decisi\u00f3n ser\u00e1 evaluada y \u00e9sta devolver\u00e1 un valor (verdadero o falso), en funci\u00f3n del valor devuelto se ejecutar\u00e1 una secuencia de instrucciones u otra.</p> <p>Por ejemplo, si el valor de una variable es mayor o igual que 5 se imprime por pantalla la palabra APROBADO y si es menor, se imprime SUSPENSO. Para este ejemplo, la comprobaci\u00f3n del valor de la variable ser\u00e1 la sentencia especial de decisi\u00f3n. La impresi\u00f3n de la palabra APROBADO ser\u00e1 una secuencia de instrucciones y la impresi\u00f3n de la palabra SUSPENSO ser\u00e1 otra. Cada secuencia estar\u00e1 asociada a cada uno de los resultados que puede arrojar la evaluaci\u00f3n de la sentencia especial de decisi\u00f3n. Las estructuras de selecci\u00f3n se dividen en:</p> <ol> <li>Estructuras de selecci\u00f3n simples o estructura if.</li> <li>Estructuras de selecci\u00f3n compuesta o estructura if\u00adelse.</li> <li>Estructuras de selecci\u00f3n basadas en el operador condicional.</li> <li>Estructuras de selecci\u00f3n m\u00faltiples o estructura switch.</li> </ol> <p>A continuaci\u00f3n, detallaremos las caracter\u00edsticas y funcionamiento de cada una de ellas. Es importante que a trav\u00e9s de los ejemplos que vamos a ver, puedas determinar en qu\u00e9 circunstancias utilizar cada una de estas estructuras. Aunque un mismo problema puede ser resuelto con diferentes estructuras e incluso, con diferentes combinaciones de \u00e9stas.</p>"},{"location":"UD03/UD03_ES.html#estructura-if-if-else-if-else-if","title":"Estructura <code>if</code>, <code>if \u00adelse</code>, <code>if else if</code>","text":"<p>La estructura <code>if</code> es una estructura de selecci\u00f3n o estructura condicional, en la que se eval\u00faa una expresi\u00f3n l\u00f3gica o sentencia de decisi\u00f3n y en funci\u00f3n del resultado, se ejecuta una sentencia o un bloque de \u00e9stas. La estructura <code>if</code> puede presentarse de las siguientes formas:</p> <p>Estructura <code>if</code> simple:</p> <p></p><pre><code>if (expresi\u00f3n-l\u00f3gica)\n    sentencia1;\n</code></pre> <pre><code>if (expresi\u00f3n-l\u00f3gica){\n    sentencia1;\n    sentencia2;\n    ...;\n    sentenciaN;\n}\n</code></pre> <p>Si la evaluaci\u00f3n de la expresi\u00f3n\u2010l\u00f3gica ofrece un resultado verdadero, se ejecuta la sentencia1 o bien el bloque de sentencias asociado. Si el resultado de dicha evaluaci\u00f3n es falso, no se ejecutar\u00e1 ninguna instrucci\u00f3n asociada a la estructura condicional.</p> <p>Estructura <code>if</code> de doble alternativa.</p> <pre><code>if (expresi\u00f3n-l\u00f3gica)\n    sentencia1;\nelse\n    sentencia2;\nsentencia3;\n</code></pre> <pre><code>if (expresi\u00f3n-l\u00f3gica){\n    sentencia1;\n    ...;\n    sentenciaN;\n} else {\n    sentencia1;\n    ...;\n    sentenciaN;\n}\n</code></pre> <p>Si la evaluaci\u00f3n de la expresi\u00f3n\u2010l\u00f3gica ofrece un resultado  verdadero, se ejecutar\u00e1 la primera sentencia o el primer bloque de sentencias. Si, por el contrario, la evaluaci\u00f3n de la expresi\u00f3n\u2010l\u00f3gica ofrece un resultado falso, no se ejecutar\u00e1 la primera sentencia o el  primer bloque y s\u00ed se ejecutar\u00e1 la segunda sentencia o el segundo bloque.</p> <p>Haciendo una interpretaci\u00f3n cercana al pseudoc\u00f3digo tendr\u00edamos que si se cumple la condici\u00f3n (expresi\u00f3n l\u00f3gica), se ejecutar\u00e1 un conjunto de instrucciones y si no se cumple, se ejecutar\u00e1 otro conjunto de instrucciones. </p> <p>Hay que tener en cuenta que la cl\u00e1usula <code>else</code> de la sentencia <code>if</code> no es obligatoria. En algunos casos no necesitaremos utilizarla, pero s\u00ed se recomienda cuando es necesario llevar a cabo alguna acci\u00f3n en el caso de que la expresi\u00f3n l\u00f3gica no se cumpla.</p> <p>En aquellos casos en los que no existe cl\u00e1usula <code>else</code>, si la expresi\u00f3n l\u00f3gica es falsa, simplemente se continuar\u00e1n ejecutando las siguientes sentencias que aparezcan bajo la estructura condicional <code>if</code>.</p> <p>Los condicionales <code>if</code> e <code>if-else</code> pueden anidarse, de tal forma que dentro de un bloque de sentencias puede incluirse otro <code>if</code> o <code>if-else</code>. El nivel de anidamiento queda a criterio del programador, pero si \u00e9ste es demasiado profundo podr\u00eda provocar problemas de eficiencia y legibilidad en el c\u00f3digo. En otras ocasiones, un nivel de anidamiento excesivo puede denotar la necesidad de utilizaci\u00f3n de otras estructuras de selecci\u00f3n m\u00e1s adecuadas.</p> <p>Cuando se utiliza anidamiento de este tipo de estructuras, es necesario poner especial atenci\u00f3n en saber a qu\u00e9 <code>if</code> est\u00e1 asociada una cl\u00e1usula <code>else</code>. Normalmente, un <code>else</code> estar\u00e1 asociado con el <code>if</code> inmediatamente superior o m\u00e1s cercano que exista dentro del mismo bloque y que no se encuentre ya asociado a otro <code>else</code>.</p> <p>Estructura <code>if else if</code>.</p> <p>Esta estructura es una alternativa a la anidaci\u00f3n de sentencias <code>if else</code> funciona de modo que si se cumple una condici\u00f3n ejecuta unas sentencias y el caso contrario comprueba otra condici\u00f3n ejecutando unas sentencias si se cumple y as\u00ed sucesivamente. Veamos un ejemplo con <code>if</code> anidados:</p> <pre><code>if (condicion1) {\n    sentencias1;\n} else {\n    if (condicion2) {\n        sentencias2;\n    } else {\n        if (condicion3) {\n            sentencias3;\n        } else {\n            sentencias4;\n        }\n    }\n}\n</code></pre> <p>El mismo ejemplo usando <code>if else if</code> quedar\u00eda de este modo:</p> <pre><code>if (condicion1) {\n    sentencias1;\n} else if (condicion2) {\n    sentencias2;\n} else if (condicion3) {\n    sentencias3;\n} else {\n    sentencias4;\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#estructura-switch","title":"Estructura <code>switch</code>","text":"<p>\u00bfQu\u00e9 podemos hacer cuando nuestro programa debe elegir entre m\u00e1s de dos alternativas?, una posible soluci\u00f3n podr\u00eda ser emplear estructuras if anidadas, aunque no siempre esta soluci\u00f3n es la m\u00e1s eficiente. Cuando estamos ante estas situaciones podemos utilizar la estructura de selecci\u00f3n m\u00faltiple switch. En la siguiente tabla se muestra tanto la sintaxis, como el funcionamiento de esta estructura.</p> <p>Sintaxis:</p> <pre><code>switch (expresion) {\n    case valor1:\n        sentencia1_1;\n        sentencia1_2;\n        ....\n        break;\n    case valor2:\n        ....\n    case valorN:\n        sentenciaN_1;\n        sentenciaN_2;\n        ....\n        break;\n    default:\n    sentencias-default;\n}\n</code></pre> <p>Condiciones:</p> <ul> <li>Donde expresi\u00f3n debe ser del tipo <code>char</code>, <code>byte</code>, <code>short</code> o <code>int</code>, y las constantes de cada <code>case</code> deben ser de este tipo o de un tipo compatible.</li> <li>La <code>expresion</code> debe ir entre par\u00e9ntesis.</li> <li>Cada <code>case</code> llevar\u00e1 asociado un <code>valor</code> y se finalizar\u00e1 con dos puntos (<code>:</code>).</li> <li>El bloque de sentencias asociado a la cl\u00e1usula <code>default</code> puede finalizar con una sentencia de ruptura <code>break</code> o no.</li> </ul> <p>Funcionamiento:</p> <ul> <li>Las diferentes alternativas de esta estructura estar\u00e1n precedidas de la cl\u00e1usula case que se ejecutar\u00e1 cuando el valor asociado al case coincida con el valor obtenido al evaluar la expresi\u00f3n del switch.</li> <li>En las cl\u00e1usulas case, no pueden indicarse expresiones condicionales, rangos de valores o listas de valores. (otros lenguajes de programaci\u00f3n s\u00ed lo permiten). Habr\u00e1 que asociar una cl\u00e1usula case a cada uno de los valores que deban ser tenidos en cuenta.</li> <li>La cl\u00e1usula default ser\u00e1 utilizada para indicar un caso por defecto, las sentencias asociadas a la cl\u00e1usula default se ejecutar\u00e1n si ninguno de los valores indicados en las cl\u00e1usulas case coincide con el resultado de la evaluaci\u00f3n de la expresi\u00f3n de la estructura switch.</li> <li>La cl\u00e1usula default puede no existir, y por tanto, si ning\u00fan case ha sido activado finalizar\u00eda el switch.</li> <li>Cada cl\u00e1usula case puede llevar asociadas una o varias sentencias, sin necesidad de delimitar dichos bloques por medio de llaves.</li> <li>En el momento en el que el resultado de la evaluaci\u00f3n de la expresi\u00f3n coincide con alguno de los valores asociados a las cl\u00e1usulas case, se ejecutar\u00e1n todas las instrucciones asociadas hasta la aparici\u00f3n de una sentencia break de ruptura. (la sentencia break se analizar\u00e1 en ep\u00edgrafes posteriores)</li> </ul>"},{"location":"UD03/UD03_ES.html#expresiones-switch-mejoradas","title":"Expresiones switch mejoradas","text":"<p>En las novedades de Java 12 se a\u00f1adi\u00f3 la posibilidad de los switch fueran expresiones que retornan un valor en vez de sentencias y se evita el uso de la palabra reservada break.</p> <pre><code>int entero = 5;\n\nString numericString = switch (entero) {\n    case 0 -&gt; \"cero\";\n    case 1, 3, 5, 7, 9 -&gt; \"impar\";\n    case 2, 4, 6, 8, 10 -&gt; \"par\";\n    default -&gt; \"error\";\n};\nSystem.out.println(numericString); //impar\n</code></pre> <p>En Java 13 en vez de \u00fanicamente el valor a retornar se permite crear bloques de sentencias para cada rama <code>case</code> y retornar el valor con la palabra reservada <code>yield</code>. En los bloques de sentencias puede haber alg\u00fan c\u00e1lculo m\u00e1s complejo que directamente retornar el valor deseado.</p> <pre><code>int entero2 = 4;\n\nString numericString2 = switch (entero2) {\n    case 0 -&gt; {\n        String value = calculaCero();\n        yield value;\n    }\n    case 1, 3, 5, 7, 9 -&gt; {\n        String value = calculaImpar();\n        yield value;\n    }\n\n    case 2, 4, 6, 8, 10 -&gt; {\n        String value = calculaPar();\n        yield value;\n    }\n\n    default -&gt; {\n        String value = calculaDefecto();\n        yield value;\n    }\n};\nSystem.out.println(numericString); //calculaPar()\n</code></pre> <p>En resumen, se ha de comparar el valor de una expresi\u00f3n con un conjunto de constantes, si el valor de la expresi\u00f3n coincide con alg\u00fan valor de dichas constantes, se ejecutar\u00e1n los bloques de instrucciones asociados a cada una de ellas. Si no existiese coincidencia, se ejecutar\u00edan una serie de instrucciones por defecto.</p>"},{"location":"UD03/UD03_ES.html#estructuras-de-repeticion","title":"Estructuras de repetici\u00f3n","text":"<p>Nuestros programas ya son capaces de controlar su ejecuci\u00f3n teniendo en cuenta determinadas condiciones, pero a\u00fan hemos de aprender un conjunto de estructuras que nos permita repetir una secuencia de instrucciones determinada. La funci\u00f3n de estas estructuras es repetir la ejecuci\u00f3n de una serie de instrucciones teniendo en cuenta una condici\u00f3n.</p> <p>A este tipo de estructuras se las denomina estructuras de repetici\u00f3n, estructuras repetitivas, bucles o estructuras iterativas. En Java existen cuatro clases de bucles:</p> <ul> <li>Bucle <code>for</code> (repite para)</li> <li>Bucle <code>for/in</code> (repite para cada), aka <code>for each</code></li> <li>Bucle <code>while</code> (repite mientras)</li> <li>Bucle <code>do while</code> (repite hasta)</li> </ul> <p>Los bucles <code>for</code> y <code>for/in</code> se consideran bucles controlados por contador. Por el contrario, los bucles <code>while</code> y <code>do...while</code> se consideran bucles controlados por sucesos.</p> <p>La utilizaci\u00f3n de unos bucles u otros para solucionar un problema depender\u00e1 en gran medida de las siguientes preguntas:</p> <ul> <li>\u00bfSabemos a priori cu\u00e1ntas veces necesitamos repetir un conjunto de instrucciones?</li> <li>\u00bfSabemos si hemos de repetir un conjunto de instrucciones si una condici\u00f3n satisface un conjunto de valores?</li> <li>\u00bfSabemos hasta cu\u00e1ndo debemos estar repitiendo un conjunto de instrucciones?</li> <li>\u00bfSabemos si hemos de estar repitiendo un conjunto de instrucciones mientras se cumpla una condici\u00f3n?</li> </ul> <p>Estas y otras preguntas tendr\u00e1n su respuesta en cuanto analicemos cada una de estructuras repetitivas en detalle.</p> <p>Estudia cada tipo de estructura repetitiva, conoce su funcionamiento y podr\u00e1s llegar a la conclusi\u00f3n de que algunos de estos bucles son equivalentes entre s\u00ed. Un mismo problema, podr\u00e1 ser resuelto empleando diferentes tipos de bucles y obtener los mismos resultados. </p>"},{"location":"UD03/UD03_ES.html#estructura-for","title":"Estructura <code>for</code>","text":"<p>Hemos indicado anteriormente que el bucle <code>for</code> es un bucle controlado por contador. Este tipo de bucle tiene las siguientes caracter\u00edsticas:</p> <ul> <li>Se ejecuta un n\u00famero determinado de veces.</li> <li>Utiliza una variable contadora que controla las iteraciones del bucle.</li> </ul> <p>En general, existen tres operaciones que se llevan a cabo en este tipo de bucles:</p> <ul> <li>Se inicializa la variable contadora.</li> <li>Se eval\u00faa el valor de la variable contador, por medio de una comparaci\u00f3n de su valor con el n\u00famero de iteraciones especificado.</li> <li>Se modifica o actualiza el valor del contador a trav\u00e9s de incrementos o decrementos de \u00e9ste, en cada una de las iteraciones.</li> </ul> <p>La inicializaci\u00f3n de la variable contadora debe realizase correctamente para garantizar que el bucle lleve a cabo, al menos, la primera repetici\u00f3n de su c\u00f3digo interno.</p> <p>La condici\u00f3n de terminaci\u00f3n del bucle debe variar en el interior del mismo, de no ser as\u00ed, podemos caer en la creaci\u00f3n de un bucle infinito. Cuesti\u00f3n que se debe evitar por todos los medios.</p> <p>Es necesario estudiar el n\u00famero de veces que se repite el bucle, pues debe ajustarse al n\u00famero de veces estipulado.</p> <p>Sintaxis estructura <code>for</code> con una \u00fanica sentencia:</p> <pre><code>for (inicializaci\u00f3n; condici\u00f3n; iteraci\u00f3n)\n    sentencia;\n</code></pre> <p>Sintaxis estructura <code>for</code> con un bloque de sentencias:</p> <pre><code>for (inicializaci\u00f3n; condici\u00f3n; iteraci\u00f3n) {\n    sentencia1;\n    sentencia2;\n    ...\n    sentenciaN;\n}\n</code></pre> <p>Donde...:</p> <ul> <li><code>inicializaci\u00f3n</code> es una expresi\u00f3n en la que se inicializa una variable de control, que ser\u00e1 la encargada de controlar el final del bucle.</li> <li><code>condici\u00f3n</code> es una expresi\u00f3n que evaluar\u00e1 la variable de control. Mientras la  condici\u00f3n sea falsa, el cuerpo del bucle estar\u00e1 repiti\u00e9ndose. Cuando la condici\u00f3n se  cumpla, terminar\u00e1 la ejecuci\u00f3n del bucle.</li> <li><code>iteraci\u00f3n</code> indica la manera en la que la variable de control va cambiando en cada iteraci\u00f3n del bucle.  Podr\u00e1 ser mediante incremento o decremento, y no solo de uno en uno.</li> </ul>"},{"location":"UD03/UD03_ES.html#estructura-forin","title":"Estructura <code>for</code>/<code>in</code>","text":"<p>Junto a la estructura <code>for</code>, <code>for</code>/<code>in</code> tambi\u00e9n se considera un bucle controlado por contador. Este bucle es una mejora incorporada en la versi\u00f3n 5.0 de Java. </p> <p>Este tipo de bucles permite realizar recorridos sobre arrays y colecciones de objetos. Los arrays son colecciones de variables que tienen el mismo tipo y se referencian por un nombre com\u00fan. As\u00ed mismo, las colecciones de objetos son objetos que se dice son iterables, o que se puede iterar sobre ellos.</p> <p>Este bucle es nombrado tambi\u00e9n como bucle <code>for</code> mejorado, o bucle <code>foreach</code>. En otros lenguajes de programaci\u00f3n existen bucles muy parecidos a este.</p> <p>La sintaxis es la siguiente:</p> <pre><code>for (declaraci\u00f3n: expresi\u00f3n) {\n    sentencia1;\n    ...\n    sentenciaN;\n}\n</code></pre> <p>Donde...:</p> <ul> <li><code>expresion</code> es un array o una colecci\u00f3n de objetos.</li> <li><code>declaraci\u00f3n</code> es la declaraci\u00f3n de una variable cuyo tipo sea compatible con expresi\u00f3n. Normalmente, ser\u00e1 el tipo y el nombre de la variable a declarar.</li> </ul> <p>El funcionamiento consiste en que para cada elemento de la expresi\u00f3n, guarda el elemento en la variable declarada y haz las instrucciones contenidas en el bucle. Despu\u00e9s, en cada una de las iteraciones del bucle tendremos en la variable declarada el elemento actual de la expresi\u00f3n. Por tanto, para el caso de los arrays y de las colecciones de objetos, se recorrer\u00e1 desde el primer elemento que los forma hasta el \u00faltimo.</p> <p>Observa el contenido del c\u00f3digo representado en la siguiente imagen, puedes apreciar c\u00f3mo se construye un bucle de este tipo y su utilizaci\u00f3n sobre un array.</p> <p>Los bucles <code>for</code>/<code>in</code> permitir\u00e1n al programador despreocuparse del n\u00famero de veces que se ha de iterar, pero no sabremos en qu\u00e9 iteraci\u00f3n nos encontramos salvo que se a\u00f1ada artificialmente alguna variable contadora que nos pueda ofrecer esta informaci\u00f3n.</p> <p>Esta estructura tomar\u00e1 sentido cuando avancemos en el curso y veamos los Arrays y las colecciones de Objetos.</p>"},{"location":"UD03/UD03_ES.html#estructura-while","title":"Estructura <code>while</code>","text":"<p>El bucle <code>while</code> es la primera de las estructuras de repetici\u00f3n controladas por sucesos que vamos a estudiar. La utilizaci\u00f3n de este bucle responde al planteamiento de la siguiente pregunta: \u00bfQu\u00e9 podemos hacer si lo \u00fanico que sabemos es que se han de repetir un conjunto de instrucciones mientras se cumpla una determinada condici\u00f3n?.</p> <p>La caracter\u00edstica fundamental de este tipo de estructura repetitiva estriba en ser \u00fatil en aquellos casos en los que las instrucciones que forman el cuerpo del bucle podr\u00eda ser necesario ejecutarlas o no. Es decir, en el bucle <code>while</code> siempre se evaluar\u00e1 la condici\u00f3n que lo controla, y si dicha condici\u00f3n es cierta, el cuerpo del bucle se ejecutar\u00e1 una vez, y se seguir\u00e1 ejecutando mientras la condici\u00f3n sea cierta. Pero si en la evaluaci\u00f3n inicial de la condici\u00f3n \u00e9sta no es verdadera, el cuerpo del bucle no se ejecutar\u00e1.</p> <p>Es imprescindible que en el interior del bucle <code>while</code> se realice alguna acci\u00f3n que modifique la condici\u00f3n que controla la ejecuci\u00f3n del mismo, en caso contrario estar\u00edamos ante un bucle infinito.</p> <p>Sintaxis estructura <code>while</code> con una \u00fanica sentencia:</p> <pre><code>while (condici\u00f3n)\n    sentencia;\n</code></pre> <p>Sintaxis estructura <code>while</code> con un bloque de sentencias:</p> <pre><code>while (condici\u00f3n) {\n    sentencia1;\n    ...\n    sentenciaN;\n}\n</code></pre> <p>Funcionamiento: Mientras la condici\u00f3n sea cierta, el bucle se repetir\u00e1, ejecutando la/s instrucci\u00f3n/es de su interior.</p> <p>En el momento en el que la condici\u00f3n no se cumpla, el control del flujo del programa pasar\u00e1 a la siguiente instrucci\u00f3n que exista justo detr\u00e1s del bucle <code>while</code>.</p> <p>La condici\u00f3n se evaluar\u00e1 siempre al principio, y podr\u00e1 darse el caso de que las instrucciones contenidas en \u00e9l no lleguen a ejecutarse nunca si no se satisface la condici\u00f3n de partida.</p>"},{"location":"UD03/UD03_ES.html#estructura-do-while","title":"Estructura <code>do\u00ad while</code>","text":"<p>La segunda de las estructuras repetitivas controladas por sucesos es <code>do\u00ad while</code>. En este caso, la pregunta que nos planteamos es la siguiente: \u00bfQu\u00e9 podemos hacer si lo \u00fanico que sabemos es que se han de ejecutar, al menos una vez, un conjunto de instrucciones y seguir repiti\u00e9ndose hasta que se cumpla una determinada condici\u00f3n?.</p> <p>La caracter\u00edstica fundamental de este tipo de estructura repetitiva estriba en ser \u00fatil en aquellos casos en los que las instrucciones que forman el cuerpo del bucle necesitan ser ejecutadas, al menos, una vez y repetir su ejecuci\u00f3n hasta que la condici\u00f3n sea verdadera. Por tanto, en esta estructura repetitiva siempre se ejecuta el cuerpo del bucle una primera vez.</p> <p>Es imprescindible que en el interior del bucle se realice alguna acci\u00f3n que modifique la condici\u00f3n que controla la ejecuci\u00f3n del mismo, en caso contrario estar\u00edamos ante un bucle infinito.</p> <p>Sintaxis estructura <code>while</code> con una \u00fanica sentencia:</p> <pre><code>do\n    sentencia;\nwhile (condici\u00f3n);\n</code></pre> <p>Sintaxis estructura <code>while</code> con un bloque de sentencias:</p> <pre><code>do {\n    sentencia1;\n    ...\n    sentenciaN;\n} while (condici\u00f3n);\n</code></pre> <p>Funcionamiento:</p> <p>El cuerpo del bucle se ejecuta la primera vez, a continuaci\u00f3n se evaluar\u00e1 la condici\u00f3n y, si \u00e9sta es falsa, el cuerpo el bucle volver\u00e1 a repetirse. El bucle finalizar\u00e1 cuando la evaluaci\u00f3n de la condici\u00f3n sea verdadera. </p> <p>En ese momento el control del flujo del programa pasar\u00e1 a la siguiente instrucci\u00f3n que exista justo detr\u00e1s del bucle do\u2010while. La condici\u00f3n se evaluar\u00e1 siempre despu\u00e9s de una primera ejecuci\u00f3n del cuerpo del bucle, por lo que no se dar\u00e1 el caso de que las instrucciones contenidas en \u00e9l no lleguen a ejecutarse nunca.</p> <p></p>"},{"location":"UD03/UD03_ES.html#bucle-infinito","title":"Bucle infinito","text":"<p>Uno de los errores m\u00e1s comunes al implementar cualquier tipo de bucle es que nunca pueda salir, es decir, el bucle se ejecuta durante un n\u00famero infinito de veces.</p> <p>Podemos provocarlo intencionadamente como en estos dos ejemplos equivalentes (NO RECOMENDABLE):</p> <pre><code>for(;;){\n    //sentencias\n}\n</code></pre> <pre><code>while(true){\n    //sentencias\n}\n</code></pre> <p>O sucede cuando la condici\u00f3n falla por alguna raz\u00f3n, como en el siguiente ejemplo:</p> <pre><code>//Programa Java para ilustrar varias trampas de bucles.\npublic class BucleInfinito{\n\n    public static void main(String[] args)\n    {\n        // bucle infinito porque la condici\u00f3n no es apta\n        // la condici\u00f3n; deber\u00eda haber sido i&gt;0.\n        for (int i = 5; i != 0; i -= 2){\n            System.out.println(i);\n        }\n\n        int x = 5; \n        // bucle infinito porque la actualizaci\u00f3n\n        // no se proporciona\n        while (x == 5)\n        {\n            System.out.println(\"En el bucle\");\n        }\n    }\n}\n</code></pre> <p>Otro inconveniente es que puede estar agregando algo en su objeto de colecci\u00f3n a trav\u00e9s de un bucle y puede quedarse sin memoria. Si intenta ejecutar el siguiente programa, despu\u00e9s de un tiempo, se producir\u00e1 una excepci\u00f3n de falta de memoria. En este ejemplo se hace uso de la colecci\u00f3n ArrayList, pero de momento solo necesitamos saber que se comporta como un casillero al que vamos asignando elementos (que evidentemente ocupan memoria)</p> <pre><code>//Programa Java para la excepci\u00f3n de falta de memoria.\nimport java.util.ArrayList;\npublic class HeapSpace\n{\n    public static void main(String[] args)\n    {\n        ArrayList&lt;Integer&gt; ar = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; Integer.MAX_VALUE; i++)\n        {\n            ar.add(i);\n        }\n    }\n}\n</code></pre> <p>Salida:</p> <pre><code>Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\nat java.util.Arrays.copyOf(Unknown Source)\nat java.util.Arrays.copyOf(Unknown Source)\nat java.util.ArrayList.grow(Unknown Source)\nat java.util.ArrayList.ensureCapacityInternal(Unknown Source)\nat java.util.ArrayList.add(Unknown Source)\nat article.Integer1.main(Integer1.java:9)\n</code></pre>"},{"location":"UD03/UD03_ES.html#estructuras-de-salto","title":"Estructuras de salto","text":"<p>\u00bfSaltar o no saltar? he ah\u00ed la cuesti\u00f3n. En la gran mayor\u00eda de libros de programaci\u00f3n y publicaciones de Internet, siempre se nos recomienda que prescindamos de sentencias de salto incondicional, es m\u00e1s, se desaconseja su uso por provocar una mala estructuraci\u00f3n del c\u00f3digo y un incremento en la dificultad para el mantenimiento de los mismos. Pero Java incorpora ciertas sentencias o estructuras de salto que es necesario conocer y que pueden sernos \u00fatiles en algunas partes de nuestros programas.</p> <p>Estas estructuras de salto corresponden a las sentencias <code>break</code>, <code>continue</code>, las etiquetas de salto y la sentencia <code>return</code>. Pasamos ahora a analizar su sintaxis y funcionamiento.</p>"},{"location":"UD03/UD03_ES.html#sentencias-break-y-continue","title":"Sentencias <code>break</code> y <code>continue</code>","text":"<p>Se trata de dos instrucciones que permiten modificar el comportamiento de otras estructuras o sentencias de control, simplemente por el hecho de estar incluidas en alg\u00fan punto de su secuencia de instrucciones.</p> <p>La sentencia <code>break</code> incidir\u00e1 sobre las estructuras de control <code>switch</code>, <code>while</code>, <code>for</code> y <code>do\u00ad while</code> del siguiente modo:</p> <ul> <li> <p>Si aparece una sentencia <code>break</code> dentro de la secuencia de instrucciones de cualquiera de las estructuras mencionadas anteriormente, dicha estructura terminar\u00e1 inmediatamente. </p> </li> <li> <p>Si aparece una sentencia <code>break</code> dentro de un bucle anidado s\u00f3lo finalizar\u00e1 la sentencia de iteraci\u00f3n m\u00e1s interna, el resto se ejecuta de forma normal.</p> </li> </ul> <p>Es decir, que <code>break</code> sirve para romper el flujo de control de un bucle, aunque no se haya cumplido la condici\u00f3n del bucle. Si colocamos un <code>break</code> dentro del c\u00f3digo de un bucle, cuando se alcance el <code>break</code>, autom\u00e1ticamente se saldr\u00e1 del bucle pasando a ejecutarse la siguiente instrucci\u00f3n inmediatamente despu\u00e9s de \u00e9l.</p> <p>La sentencia <code>continue</code> incidir\u00e1 sobre las sentencias o estructuras de control <code>while</code>, <code>for</code> y <code>do while</code> del siguiente modo:</p> <ul> <li>Si aparece una sentencia <code>continue</code> dentro de la secuencia de instrucciones de cualquiera de las sentencias anteriormente indicadas, dicha sentencia dar\u00e1 por terminada la iteraci\u00f3n actual y se ejecuta una nueva iteraci\u00f3n, evaluando de nuevo la expresi\u00f3n condicional del bucle.</li> <li>Si aparece en el interior de un bucle anidado solo afectar\u00e1 a la sentencia de iteraci\u00f3n m\u00e1s interna, el resto se ejecutar\u00eda de forma normal.</li> </ul> <p>Es decir, la sentencia <code>continue</code> forzar\u00e1 a que se ejecute la siguiente iteraci\u00f3n del bucle, sin tener en cuenta las instrucciones que pudiera haber despu\u00e9s del <code>continue</code>, y hasta el final del c\u00f3digo del bucle.</p>"},{"location":"UD03/UD03_ES.html#etiquetas-de-salto","title":"Etiquetas de salto","text":"<p>Los saltos incondicionales y en especial, saltos a una etiqueta son totalmente desaconsejables.</p> <p>Java permite asociar etiquetas cuando se va a realizar un salto. De este modo puede conseguirse algo m\u00e1s de legibilidad en el c\u00f3digo.</p> <p>Las estructuras de salto <code>break</code> y <code>continue</code>, pueden tener asociadas etiquetas. Es a lo que se llama un <code>break</code> etiquetado o un <code>continue</code> etiquetado. Pero s\u00f3lo se recomienda su uso cuando se hace necesario salir de bucles anidados hacia diferentes niveles. \u00bfY c\u00f3mo se crea un salto a una etiqueta? En primer lugar, crearemos la etiqueta mediante un identificador seguido de dos puntos (<code>:</code>). A continuaci\u00f3n, se escriben las sentencias Java asociadas a dicha etiqueta encerradas entre llaves. Por as\u00ed decirlo, la creaci\u00f3n de una etiqueta es como fijar un punto de salto en el programa para poder saltar a \u00e9l desde otro lugar de dicho programa.</p> <p>\u00bfC\u00f3mo se lleva a cabo el salto? Es sencillo, en el lugar donde vayamos a colocar la sentencia <code>break</code> o <code>continue</code>, a\u00f1adiremos detr\u00e1s el identificador de la etiqueta. Con ello, conseguiremos que el salto se realice a un lugar determinado.</p> <p>La sintaxis ser\u00e1:</p> <pre><code>break &lt;etiqueta&gt;;\n</code></pre> <p>Quiz\u00e1 a aquellos/as que han programado en HTML les suene esta herramienta, ya que tiene cierta similitud con las anclas que pueden crearse en el interior de una p\u00e1gina web, a las que nos llevar\u00e1 el hiperenlace o link que hayamos asociado.</p> <p>Tambi\u00e9n para aquellos/as que han creado alguna vez archivos por lotes o archivos batch bajo MSDOS es probable que tambi\u00e9n les resulte familiar el uso de etiquetas, pues la sentencia GOTO que se utilizaba en este tipo de archivos, hac\u00eda saltar el flujo del programa al lugar donde se ubicaba la etiqueta que se indicara en dicha sentencia.</p>"},{"location":"UD03/UD03_ES.html#return","title":"<code>return</code>","text":"<p>Ya sabemos c\u00f3mo modificar la ejecuci\u00f3n de bucles y estructuras condicionales m\u00faltiples, pero \u00bfPodr\u00edamos modificar la ejecuci\u00f3n de un m\u00e9todo? \u00bfEs posible hacer que \u00e9stos detengan su ejecuci\u00f3n antes de que finalice el c\u00f3digo asociado a ellos?. S\u00ed es posible, a trav\u00e9s de la sentencia return podremos conseguirlo. La sentencia <code>return</code> puede utilizarse de dos formas:</p> <ul> <li>Para terminar la ejecuci\u00f3n del m\u00e9todo donde est\u00e9 escrita, con lo que transferir\u00e1 el control al punto desde el que se hizo la llamada al m\u00e9todo, continuando el programa por la sentencia inmediatamente posterior.</li> <li>Para devolver o retornar un valor, siempre que junto a <code>return</code> se incluya una expresi\u00f3n de un tipo determinado. Por tanto, en el lugar donde se invoc\u00f3 al m\u00e9todo se obtendr\u00e1 el valor resultante de la evaluaci\u00f3n de la expresi\u00f3n que acompa\u00f1aba al m\u00e9todo.</li> </ul> <p>En general, una sentencia <code>return</code> suele aparecer al final de un m\u00e9todo, de este modo el m\u00e9todo tendr\u00e1 una entrada y una salida. Tambi\u00e9n es posible utilizar una sentencia <code>return</code> en cualquier punto de un m\u00e9todo, con lo que \u00e9ste finalizar\u00e1 en el lugar donde se encuentre dicho <code>return</code>. No ser\u00e1 recomendable incluir m\u00e1s de un <code>return</code> en un m\u00e9todo y por regla general, deber\u00e1 ir al final del m\u00e9todo como hemos comentado.</p> <p>El valor de retorno es opcional, si lo hubiera deber\u00eda de ser del mismo tipo o de un tipo compatible al tipo del valor de retorno definido en la cabecera del m\u00e9todo, pudiendo ser desde un entero a un objeto creado por nosotros. Si no lo tuviera, el tipo de retorno ser\u00eda <code>void</code>, y <code>return</code> servir\u00eda para salir del m\u00e9todo sin necesidad de llegar a ejecutar todas las instrucciones que se encuentran despu\u00e9s del <code>return</code>.</p>"},{"location":"UD03/UD03_ES.html#excepciones","title":"Excepciones","text":"<p>A lo largo de nuestro aprendizaje de Java nos hemos topado en alguna ocasi\u00f3n con errores, pero \u00e9stos suelen ser los que nos ha indicado el compilador. Un punto y coma por aqu\u00ed, un nombre de variable incorrecto por all\u00e1, pueden hacer que nuestro compilador nos avise de estos descuidos.</p> <p>Cuando los vemos, se corrigen y obtenemos nuestra clase compilada correctamente. </p> <p>Pero, \u00bfS\u00f3lo existen este tipo de errores? \u00bfPodr\u00edan existir errores no sint\u00e1cticos en nuestros programas?. Est\u00e1 claro que s\u00ed, un programa perfectamente compilado en el que no existen errores de sintaxis, puede generar otros tipos de errores que quiz\u00e1 aparezcan en tiempo de ejecuci\u00f3n. A estos errores se les conoce como excepciones.</p> <p>Aprenderemos a gestionar de manera adecuada estas excepciones y tendremos la oportunidad de utilizar el potente sistema de manejo de errores que Java incorpora. La potencia de este sistema de manejo de errores radica en:</p> <ol> <li>Que el c\u00f3digo que se encarga de manejar los errores, es perfectamente identificable en los programas. Este c\u00f3digo puede estar separado del c\u00f3digo que maneja la aplicaci\u00f3n.</li> <li>Que Java tiene una gran cantidad de errores est\u00e1ndar asociados a multitud de fallos comunes, como por ejemplo divisiones por cero, fallos de entrada de datos, etc. Al tener tantas excepciones localizadas, podemos gestionar de manera espec\u00edfica cada uno de los errores que se produzcan.</li> </ol> <p>En Java se pueden preparar los fragmentos de c\u00f3digo que pueden provocar errores de ejecuci\u00f3n para que si se produce una excepci\u00f3n, el flujo del programa es lanzado (<code>throw</code>) hacia ciertas zonas o rutinas que han sido creadas previamente por el programador y cuya finalidad ser\u00e1 el tratamiento efectivo de dichas excepciones. Si no se captura la excepci\u00f3n, el programa se detendr\u00e1 con toda probabilidad.</p> <p>En Java, las excepciones est\u00e1n representadas por clases. El paquete <code>java.lang.Exception</code> y sus subpaquetes contienen todos los tipos de excepciones. Todas las excepciones derivar\u00e1n de la clase <code>Throwable</code>, existiendo clases m\u00e1s espec\u00edficas. Por debajo de la clase <code>Throwable</code> existen las clases <code>Error</code> y <code>Exception</code>. Error es una clase que se encargar\u00e1 de los errores que se produzcan en la m\u00e1quina virtual, no en nuestros programas. Y la clase <code>Exception</code> ser\u00e1 la que a nosotros nos interese conocer, pues gestiona los errores provocados en los programas.</p> <p>Java lanzar\u00e1 una excepci\u00f3n en respuesta a una situaci\u00f3n poco usual. Cuando se produce un error se genera un objeto asociado a esa excepci\u00f3n. Este objeto es de la clase <code>Exception</code> o de alguna de sus herederas. Este objeto se pasa al c\u00f3digo que se ha definido para manejar la excepci\u00f3n. Dicho c\u00f3digo puede manipular las propiedades del objeto <code>Exception</code>.</p> <p>El programador tambi\u00e9n puede lanzar sus propias excepciones. Las excepciones en Java ser\u00e1n objetos de clases derivadas de la clase base <code>Exception</code>. Existe toda una jerarqu\u00eda de clases derivada de la clase base <code>Exception</code>. Estas clases derivadas se ubican en dos grupos principales:</p> <ul> <li>Las excepciones en tiempo de ejecuci\u00f3n, que ocurren cuando el programador no ha tenido cuidado al escribir su c\u00f3digo.</li> <li>Las excepciones que indican que ha sucedido algo inesperado o fuera de control.</li> </ul> <p>En la siguiente imagen te ofrecemos una aproximaci\u00f3n a la jerarqu\u00eda de las excepciones en Java.</p> <pre><code>classDiagram\n    class Object\n    class Throwable\n    Object &lt;|-- Throwable\n    namespace Comprobadas_Checked {\n    class Exception\n        class IOException\n        class UsersExceptions\n        class Other1[\"...\"]\n        class Other2[\"...\"]\n        class Other3[\"...\"]\n    }\n    namespace No Comprobadas_Unchecked {\n        class RuntimeException\n    class Error\n        class ArithmeticException\n        class IndexOutOfBoundException\n        class Other4[\"...\"]\n    }\n    Exception &lt;|-- Other1\n    Exception &lt;|-- IOException\n    IOException &lt;|-- Other2\n    IOException &lt;|-- Other3\n    Exception &lt;|-- UsersExceptions\n    Exception &lt;|-- RuntimeException\n    RuntimeException &lt;|-- ArithmeticException\n    RuntimeException &lt;|-- IndexOutOfBoundException\n    RuntimeException &lt;|-- Other4\n    Throwable &lt;|-- Exception\n    Throwable &lt;|-- Error\n</code></pre> <p>Y aqu\u00ed tenemos una lista de las m\u00e1s habituales con su explicaci\u00f3n:</p> NOMBRE DESCRIPCI\u00d3N FileNotFoundException Lanza una excepci\u00f3n cuando el fichero no se encuentra. ClassNotFoundException Lanza una excepci\u00f3n cuando no existe la clase. EOFException Lanza una excepci\u00f3n cuando llega al final del fichero. ArrayIndexOutOfBoundsException Lanza una excepci\u00f3n cuando se accede a una posici\u00f3n de un array que no exista. NumberFormatException Lanza una excepci\u00f3n cuando se procesa un numero pero este es un dato alfanum\u00e9rico. NullPointerException Lanza una excepci\u00f3n cuando intentando acceder a un miembro de un objeto para el que todav\u00eda no hemos reservado memoria. IOException Generaliza muchas excepciones anteriores. La ventaja es que no necesitamos controlar cada una de las excepciones. Exception Es la clase padre de IOException y de otras clases. Tiene la misma ventaja que IOException. ArithmeticException Se lanza por ejemplo, cuando intentamos dividir un n\u00famero entre cero."},{"location":"UD03/UD03_ES.html#el-manejo-de-excepciones","title":"El manejo de excepciones","text":"<p>Como hemos comentado, siempre debemos controlar las excepciones que se puedan producir o de lo contrario nuestro software quedar\u00e1 expuesto a fallos. Las excepciones pueden tratarse de dos formas:</p> <ul> <li>Interrupci\u00f3n. En este caso se asume que el programa ha encontrado un error irrecuperable. La operaci\u00f3n que dio lugar a la excepci\u00f3n se anula y se entiende que no hay manera de regresar al c\u00f3digo que provoc\u00f3 la excepci\u00f3n. Es decir, la operaci\u00f3n que dio origin\u00f3 el error, se anula.</li> <li>Reanudaci\u00f3n. Se puede manejar el error y regresar de nuevo al c\u00f3digo que provoc\u00f3 el error.</li> </ul> <p>Java emplea la primera forma, pero puede simularse la segunda mediante la utilizaci\u00f3n de un bloque <code>try</code> en el interior de un <code>while</code>, que se repetir\u00e1 hasta que el error deje de existir. En la secci\u00f3n de ejemplos de puedes ver como poner el <code>try-catch</code> dentro de un <code>do while</code>.</p>"},{"location":"UD03/UD03_ES.html#capturar-una-excepcion","title":"Capturar una excepci\u00f3n","text":"<p>Para poder capturar excepciones, emplearemos la estructura de captura de excepciones <code>try\u2010catch\u2010finally</code>.</p> <p>B\u00e1sicamente, para capturar una excepci\u00f3n lo que haremos ser\u00e1 declarar bloques de c\u00f3digo donde es posible que ocurra una excepci\u00f3n. Esto lo haremos mediante un bloque <code>try</code> (intentar). Si ocurre una excepci\u00f3n dentro de estos bloques, se lanza una excepci\u00f3n. Estas excepciones lanzadas se pueden capturar por medio de bloques <code>catch</code>. Ser\u00e1 dentro de este tipo de bloques donde se har\u00e1 el manejo de las excepciones.</p> <p>Su sintaxis es:</p> <pre><code>try {\n    //c\u00f3digo que puede generar excepciones;\n} catch (Tipo_excepcion_1 objeto_excepcion) {\n    //Manejo de excepci\u00f3n de Tipo_excepcion_1;\n} catch (Tipo_excepcion_2 objeto_excepcion) {\n    //Manejo de excepci\u00f3n de Tipo_excepcion_2;\n}\n...\nfinally {\n    //instrucciones que se ejecutan siempre\n}\n</code></pre> <p>En esta estructura, la parte <code>catch</code> puede repetirse tantas veces como excepciones diferentes se deseen capturar. La parte <code>finally</code> es opcional y, si aparece, solo podr\u00e1 hacerlo una vez.</p> <p>Cada <code>catch</code> maneja un tipo de excepci\u00f3n. Cuando se produce una excepci\u00f3n, se busca el <code>catch</code> que posea el manejador de excepci\u00f3n adecuado, ser\u00e1 el que utilice el mismo tipo de excepci\u00f3n que se ha producido. Esto puede causar problemas si no se tiene cuidado, ya que la clase <code>Exception</code> es la superclase de todas las dem\u00e1s. Por lo que si se produjo, por ejemplo, una excepci\u00f3n de tipo <code>Aritmethic Exception</code> y el primer <code>catch</code> captura el tipo gen\u00e9rico <code>Exception</code>, ser\u00e1 ese <code>catch</code> el que se ejecute y no los dem\u00e1s.</p> <p>Por eso el \u00faltimo <code>catch</code> debe ser el que capture excepciones gen\u00e9ricas y los primeros deben ser los m\u00e1s espec\u00edficos. L\u00f3gicamente si vamos a tratar a todas las excepciones (sean del tipo que sean) igual, entonces basta con un solo <code>catch</code> que capture objetos <code>Exception</code>.</p> <p>En Java, cuando un bloque de c\u00f3digo puede provocar una excepci\u00f3n pero no se maneja adecuadamente, se produce lo que se conoce como una \"excepci\u00f3n no controlada\" o \"excepci\u00f3n no capturada\". Cuando ocurre una excepci\u00f3n no controlada,  Java sigue un conjunto de reglas espec\u00edficas para manejarla:</p> <ol> <li>Propagaci\u00f3n de excepciones: Java busca en la pila de llamadas (el seguimiento de la ejecuci\u00f3n del programa) para ver si el m\u00e9todo actual maneja la excepci\u00f3n. Si el m\u00e9todo actual no maneja la excepci\u00f3n, la excepci\u00f3n se \"propaga\" hacia arriba en la pila de llamadas. (Piensa en una burbuja de aire en el fondo del mar intentando buscar una salida)</li> <li>B\u00fasqueda de un manejador de excepciones: La excepci\u00f3n propagada contin\u00faa buscando un manejador de excepciones adecuado a medida que se retrocede a trav\u00e9s de los m\u00e9todos que llamaron al m\u00e9todo actual. Si se encuentra un bloque <code>try-catch</code> que puede manejar la excepci\u00f3n, se ejecutar\u00e1 el c\u00f3digo del bloque <code>catch</code> correspondiente.</li> <li>Si no se encuentra un manejador adecuado: Si la excepci\u00f3n llega a la parte superior de la pila de llamadas y no se encuentra un manejador de excepciones adecuado, el programa se detendr\u00e1 y se imprimir\u00e1 un mensaje de error en la consola, que contiene informaci\u00f3n sobre la excepci\u00f3n, como su tipo, mensaje y seguimiento de pila (<code>stack trace</code>).</li> </ol>"},{"location":"UD03/UD03_ES.html#delegacion-de-excepciones-con-throws","title":"Delegaci\u00f3n de excepciones con <code>throws</code>","text":"<p>\u00bfPuede haber problemas con las excepciones al usar llamadas a m\u00e9todos en nuestros programas? Efectivamente, si se produjese una excepci\u00f3n es necesario saber qui\u00e9n ser\u00e1 el encargado de solucionarla. Puede ser que sea el propio m\u00e9todo llamado o el c\u00f3digo que hizo la llamada a dicho m\u00e9todo.</p> <p>Quiz\u00e1 pudi\u00e9ramos pensar que deber\u00eda ser el propio m\u00e9todo el que se encargue de sus excepciones, aunque es posible hacer que la excepci\u00f3n sea resuelta por el c\u00f3digo que hizo la llamada. Cuando un m\u00e9todo utiliza una sentencia que puede generar una excepci\u00f3n, pero dicha excepci\u00f3n no es capturada y tratada por \u00e9l, sino que se encarga su gesti\u00f3n a qui\u00e9n llam\u00f3 al m\u00e9todo, decimos que se ha producido delegaci\u00f3n de excepciones.</p> <p>Para establecer esta delegaci\u00f3n, en la cabecera del m\u00e9todo se declara el tipo de excepciones que puede generar y que deber\u00e1n ser gestionadas por quien invoque a dicho m\u00e9todo. Utilizaremos para ello la sentencia <code>throws</code> y tras esa palabra se indica qu\u00e9 excepciones puede provocar el c\u00f3digo del m\u00e9todo. Si ocurre una excepci\u00f3n en el m\u00e9todo, el c\u00f3digo abandona ese m\u00e9todo y regresa al c\u00f3digo desde el que se llam\u00f3 al m\u00e9todo. All\u00ed se buscar\u00e1 el <code>catch</code> apropiado para esa excepci\u00f3n. Su sintaxis es la siguiente:</p> <pre><code>public class Delegacion_Excepciones {\n    ...\n    public int leeAnio(BufferedReader lector) throws IOException, NumberFormatException{\n        String linea = teclado.readLine();\n        return Integer.parseInt(linea);\n    }\n    ...\n}\n</code></pre> <p>Donde <code>IOException</code> y <code>NumberFormatException</code>, ser\u00edan dos posibles excepciones que el m\u00e9todo <code>leeAnio</code> podr\u00eda generar, pero que no gestiona. Por tanto, un m\u00e9todo puede incluir en su cabecera un listado de excepciones que puede lanzar, separadas por comas  </p>"},{"location":"UD03/UD03_ES.html#crear-y-lanzar-excepciones-de-usuario","title":"Crear y lanzar excepciones de usuario","text":"<p>Las excepciones de usuario son subclases de la clase <code>Exception</code> que podemos crear y lanzar en nuestros programas para avisar sobre determinadas situaciones.</p>"},{"location":"UD03/UD03_ES.html#crear-una-nueva-excepcion","title":"Crear una nueva excepci\u00f3n","text":"<p>Para crear una nueva excepci\u00f3n tenemos que crear una clase derivada (subclase) de la clase <code>Exception</code>. </p> <p>La clase <code>Exception</code> tiene dos constructores, uno sin par\u00e1metros y otro que acepta un <code>String</code> con un texto descriptivo de la excepci\u00f3n. Todas las excepciones de usuario las crearemos de la siguiente forma:</p> <pre><code>class NombreExcepcion extends Exception {\n    public NombreExcepcion(){\n        super();\n    }\n    public NombreExcepcion(String msg){\n        super(msg);\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#lanzar-una-excepcion","title":"Lanzar una excepci\u00f3n","text":"<p>Las excepciones se lanzan mediante la instrucci\u00f3n <code>throw</code>. La sintaxis es:</p> <pre><code>throw new NombreExcepcion(\"Mensaje descriptivo de la situaci\u00f3n inesperada\");\n</code></pre> <p>Ya que se tratar\u00e1 de una excepci\u00f3n comprobada, en la cabecera del m\u00e9todo que lanza la excepci\u00f3n habr\u00e1 que propagarla. </p>"},{"location":"UD03/UD03_ES.html#excepciones-checked-y-unchecked","title":"Excepciones <code>Checked</code> y <code>unChecked</code>","text":"<p>En Java, las excepciones se dividen en dos categor\u00edas principales: excepciones \"checked\" (comprobadas) y excepciones \"unchecked\" (no comprobadas).</p> <ol> <li>Excepciones Comprobadas (Checked Exceptions):    - Las excepciones comprobadas son aquellas que el compilador obliga a manejar. Esto significa que, si un m\u00e9todo puede lanzar una excepci\u00f3n comprobada, el programador est\u00e1 obligado a manejarla de alguna manera, ya sea mediante la declaraci\u00f3n del m\u00e9todo con <code>throws</code> o mediante el manejo directo con un bloque <code>try-catch</code>.    - Ejemplos de excepciones comprobadas incluyen <code>IOException</code> y <code>SQLException</code>.    - Estas excepciones suelen representar situaciones en las que un programa no puede continuar normalmente y se espera que el c\u00f3digo las maneje de manera adecuada.</li> </ol> <p>Ejemplo de excepci\u00f3n comprobada:</p> <pre><code>import java.io.FileReader;\nimport java.io.FileNotFoundException;\n\npublic class EjemploCheckedException {\n    public static void main(String[] args) {\n        try {\n            FileReader file = new FileReader(\"archivo.txt\");\n        } catch (FileNotFoundException e) {\n            System.out.println(\"Archivo no encontrado: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <ol> <li>Excepciones No Comprobadas (Unchecked Exceptions):    - Las excepciones no comprobadas son aquellas que el compilador no requiere que se manejen expl\u00edcitamente. Normalmente, son subclases de <code>RuntimeException</code>.    - Estas excepciones suelen deberse a errores de programaci\u00f3n, como acceder a un \u00edndice fuera de los l\u00edmites de un array (<code>ArrayIndexOutOfBoundsException</code>) o intentar convertir un objeto a un tipo incompatible (<code>ClassCastException</code>).    - Aunque no se requiere que se manejen expl\u00edcitamente, es buena pr\u00e1ctica manejarlas para evitar que el programa termine abruptamente.</li> </ol> <p>Ejemplo de excepci\u00f3n no comprobada:</p> <p><code>java public class EjemploUncheckedException {     public static void main(String[] args) {         int[] numeros = {1, 2, 3};         System.out.println(numeros[4]);  // Esto lanzar\u00e1 ArrayIndexOutOfBoundsException     } }</code></p>"},{"location":"UD03/UD03_ES.html#como-se-si-una-excepcion-es-de-un-tipo-o-de-otro","title":"\u00bfComo s\u00e9 si una excepci\u00f3n es de un tipo o de otro?","text":"<p>La principal diferencia radica en la obligaci\u00f3n del compilador de manejar o declarar excepciones. Las excepciones comprobadas deben ser manejadas o declaradas en el c\u00f3digo, mientras que las excepciones no comprobadas no tienen esta obligaci\u00f3n y generalmente se deben a errores de programaci\u00f3n.</p> <p>En Java, puedes distinguir entre excepciones comprobadas y no comprobadas principalmente por el tipo de clase que heredan. Aqu\u00ed hay algunas pautas generales:</p> <ol> <li> <p>Excepciones Comprobadas (Checked Exceptions):    - Las excepciones comprobadas suelen ser subclases directas de la clase <code>Exception</code> (o alguna de sus subclases), pero no heredan de <code>RuntimeException</code> ni de sus subclases.    - Ejemplos comunes incluyen <code>IOException</code>, <code>SQLException</code>, y cualquier excepci\u00f3n que herede directamente de <code>Exception</code> (pero no de <code>RuntimeException</code>).</p> </li> <li> <p>Excepciones No Comprobadas (Unchecked Exceptions):    - Las excepciones no comprobadas suelen ser subclases directas de la clase <code>RuntimeException</code>.    - Ejemplos comunes incluyen <code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code>, y cualquier excepci\u00f3n que herede directamente de <code>RuntimeException</code>.</p> </li> </ol> <p>Ten en cuenta que estas son pautas generales y puede haber excepciones personalizadas o situaciones espec\u00edficas en las que estas reglas no se apliquen estrictamente. Para obtener informaci\u00f3n precisa sobre un tipo de excepci\u00f3n espec\u00edfico, puedes consultar la documentaci\u00f3n de Java o examinar la jerarqu\u00eda de clases y herencia de la excepci\u00f3n en cuesti\u00f3n.</p>"},{"location":"UD03/UD03_ES.html#aserciones-assertions","title":"Aserciones (<code>Assertions</code>)","text":"<p>Una aserci\u00f3n (afirmaci\u00f3n) permite probar la exactitud de cualquier suposici\u00f3n que se haya hecho en el programa. Una afirmaci\u00f3n se logra utilizando la declaraci\u00f3n de <code>assertion</code> en Java. Al ejecutar una aserci\u00f3n, se cree que es cierta. Si falla, JVM genera un error denominado <code>AssertionError</code>. Se utiliza principalmente con fines de prueba durante el desarrollo.</p> <p>La declaraci\u00f3n de afirmaci\u00f3n se usa con una expresi\u00f3n booleana y se puede escribir de dos maneras diferentes.</p> <p>Primera forma:</p> <pre><code>assert expression;\n</code></pre> <p>Segunda forma:  </p> <pre><code>assert expression1 : expression2;\n</code></pre> <p>Ejemplo:</p> <pre><code>import java.util.Scanner;\n\npublic class P7_Assertions {\n    // Programa Java para demostrar el uso de las assertions\n    public static void main(String[] args) {\n        Scanner entrada = new Scanner(System.in);\n        System.out.print(\"Introduce tu edad: \");\n        int age = entrada.nextInt();\n        assert (age &gt;= 18): \"No puede votar\";\n        System.out.println(\"La edad del votante es de \" + age);\n    }\n}\n</code></pre> <p>Salida sin assertions:</p> <pre><code>Introduce tu edad: 14\nLa edad del votante es de 14\n</code></pre> <p>Despu\u00e9s de habilitar las assertions:</p> <p>Puedes habilitar las assertions a\u00f1adiendo los par\u00e1metros de la JVM en IntelliJ:</p> <p><code>-ea</code>: Enable Assertions (habilitar aserciones) </p> <p><code>-da</code>: Disable Assertions (deshabilitar aserciones, que es la opci\u00f3n por defecto)</p> <p>Puedes consultar este enlace para saber donde agregar estas opciones: https://stackoverflow.com/questions/68848158/java-assertions-in-intellij-idea-community</p> <p>Salida:  </p> <pre><code>Introduce tu edad: 14\nException in thread \"main\" java.lang.AssertionError: No puede votar\n    at UD03.P7_Assertions.main(P7_Assertions.java:11)\n</code></pre> <p>Otro ejemplo:</p> <pre><code>package UD03;\n\npublic class P7_Assertions2 {\n    public static void main(String[] args) {\n        System.out.println(\"Probando Aserciones...\");\n        assert true : \"Nunca veremos esto.\";\n        assert false : \"Esto solo lo veremos si activamos las aserciones.\";\n    }\n}\n</code></pre> <p>Ejecuci\u00f3n sin aserciones:</p> <pre><code>Probando Aserciones...\n</code></pre> <p>Y con aserciones:</p> <pre><code>Probando Aserciones...\nException in thread \"main\" java.lang.AssertionError: Esto solo lo veremos si activamos las aserciones.\n    at UD03.P7_Assertions2.main(P7_Assertions2.java:7)\n</code></pre>"},{"location":"UD03/UD03_ES.html#por-que-utilizar-aserciones","title":"\u00bfPor qu\u00e9 utilizar aserciones?","text":"<p>Dondequiera que un programador quiera ver si sus suposiciones son err\u00f3neas o no. </p> <ul> <li>Para asegurarse de que un c\u00f3digo que parece inalcanzable sea realmente inalcanzable.</li> <li>Para asegurarse de que las suposiciones escritas en los comentarios sean correctas.</li> <li>Para asegurarse de que no se alcance el caso default del switch.</li> <li>Para comprobar el estado del objeto.</li> <li>Al comienzo del m\u00e9todo.</li> <li>Despu\u00e9s de la invocaci\u00f3n del m\u00e9todo.</li> </ul>"},{"location":"UD03/UD03_ES.html#asercion-o-excepciones","title":"Aserci\u00f3n o Excepciones","text":"<p>Las aserciones se utilizan principalmente para comprobar situaciones l\u00f3gicamente imposibles. Por ejemplo, se pueden utilizar para comprobar el estado que espera un c\u00f3digo antes de empezar a ejecutarse o el estado despu\u00e9s de que termine de ejecutarse. A diferencia del manejo normal de excepciones/errores, las aserciones generalmente est\u00e1n deshabilitadas en tiempo de ejecuci\u00f3n.</p> <p>\u00bfD\u00f3nde utilizarlas?:  </p> <ul> <li>Argumentos para los m\u00e9todos privados. Los argumentos para los m\u00e9todos privados los proporciona \u00fanicamente el c\u00f3digo del desarrollador y es posible que este desee comprobar sus suposiciones sobre los argumentos.</li> <li>Casos condicionales.</li> <li>Condiciones al inicio de cualquier m\u00e9todo.</li> </ul> <p>\u00bfD\u00f3nde NO utilizar aserciones?: </p> <ul> <li>Las aserciones no deben usarse para reemplazar mensajes de error</li> <li>Las aserciones no deben usarse para verificar argumentos en los m\u00e9todos p\u00fablicos, ya que pueden ser proporcionados por el usuario. </li> <li>Para manejar los errores proporcionados por los usuarios usaremos las excepciones.</li> <li>Las aserciones no deben usarse en argumentos de l\u00ednea de comando.</li> </ul>"},{"location":"UD03/UD03_ES.html#ejemplos-ud03","title":"Ejemplos UD03","text":""},{"location":"UD03/UD03_ES.html#if-e-if-else","title":"<code>if</code> e <code>if-else</code>","text":"<p>Para completar la informaci\u00f3n que debes saber sobre las estructuras <code>if</code> e <code>if\u2010else</code>, observa el siguiente c\u00f3digo. En \u00e9l podr\u00e1s analizar el programa que realiza el c\u00e1lculo de la nota de un examen de tipo test. Adem\u00e1s de calcular el valor de la nota, se ofrece como salida la calificaci\u00f3n no num\u00e9rica de dicho examen. Para obtenerla, se combinar\u00e1n las diferentes estructuras condicionales aprendidas hasta ahora.</p> <p>Presta especial atenci\u00f3n a los comentarios incorporados en el c\u00f3digo fuente, as\u00ed como a la forma de combinar las estructuras condicionales y a las expresiones l\u00f3gicas utilizadas en ellas.</p> <pre><code>package UD03;\npublic class Sentencias_Condicionales {\n    /*Vamos a realizar el c\u00e1lculo de la nota de un examen\n     * de tipo test. Para ello, tendremos en cuenta el n\u00famero\n     * total de pregunta, los aciertos y los errores. Dos errores\n     * anulan una respuesta correcta.\n     *\n     * Finalmente, se muestra por pantalla la nota obtenida, as\u00ed\n     * como su calificaci\u00f3n no num\u00e9rica.\n     *\n     * La obtenci\u00f3n de la calificaci\u00f3n no num\u00e9rica se ha realizado\n     * combinando varias estructuras condicionales, mostrando expresiones\n     * l\u00f3gicas compuestas, as\u00ed como anidamiento.\n     */\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int num_aciertos = 12;\n        int num_errores = 3;\n        int num_preguntas = 20;\n        float nota = 0;\n        String calificacion = \"\";\n        //Procesamiento de datos\n        nota = ((num_aciertos - (num_errores / 2)) * 10) / num_preguntas;\n\n        if (nota &lt; 5) {\n            calificacion = \"INSUFICIENTE\";\n        } else {\n            /* Cada expresi\u00f3n l\u00f3gica de estos if est\u00e1 compuesta por dos\n             * expresiones l\u00f3gicas combinadas a trav\u00e9s del operador Y o AND\n             * que se representa con el s\u00edmbolo &amp;&amp;. De tal manera, que para\n             * que la expresi\u00f3n l\u00f3gica se cumpla (sea verdadera) la variable\n             * nota debe satisfacer ambas condiciones simult\u00e1neamente\n             */\n            if (nota &gt;= 5 &amp;&amp; nota &lt; 6) {\n                calificacion = \"SUFICIENTE\";\n            } else if (nota &gt;= 6 &amp;&amp; nota &lt; 7) {\n                calificacion = \"BIEN\";\n            } else if (nota &gt;= 7 &amp;&amp; nota &lt; 9) {\n                calificacion = \"NOTABLE\";\n            } else if (nota &gt;= 9 &amp;&amp; nota &lt;= 10) {\n                calificacion = \"SOBRESALIENTE\";\n            }\n        }\n        //Salida de informaci\u00f3n\n        System.out.println(\"La nota obtenida es: \" + nota);\n        System.out.println(\"y la calificaci\u00f3n obtenida es: \" + calificacion);\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#switch","title":"<code>switch</code>","text":"<p>Comprueba el siguiente fragmento de c\u00f3digo en el que se resuelve el c\u00e1lculo de un examen de tipo test, utilizando la estructura <code>switch</code>.</p> <p></p><pre><code>package UD03;\n\npublic class P3_2_condicional_switch {\n\n    /*\n     * Vamos a realizar el c\u00e1lculo de la nota de un examen de tipo test. Para\n     * ello, tendremos en cuenta el n\u00famero total de preguntas, los aciertos y\n     * los errores. Dos errores anulan una respuesta correcta.\n     *\n     * La nota que vamos a obtener ser\u00e1 un n\u00famero entero.\n     *\n     * Finalmente, se muestra por pantalla la nota obtenida, as\u00ed como su\n     * calificaci\u00f3n no num\u00e9rica.\n     *\n     * La obtenci\u00f3n de la calificaci\u00f3n no num\u00e9rica se ha realizado utilizando la\n     * estructura condicional m\u00faltiple o switch.\n     *\n     */\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int num_aciertos = 17;\n        int num_errores = 3;\n        int num_preguntas = 20;\n        int nota = 0;\n        String calificacion = \"\";\n        //Procesamiento de datos\n        nota = ((num_aciertos - (num_errores / 2)) * 10) / num_preguntas;\n        switch (nota) {\n            case 5:\n                calificacion = \"SUFICIENTE\";\n                break;\n            case 6:\n                calificacion = \"BIEN\";\n                break;\n            case 7:\n                calificacion = \"NOTABLE\";\n                break;\n            case 8:\n                calificacion = \"NOTABLE\";\n                break;\n            case 9:\n                calificacion = \"SOBRESALIENTE\";\n                break;\n            case 10:\n                calificacion = \"SOBRESALIENTE\";\n                break;\n            default:\n                calificacion = \"INSUFICIENTE\";\n        }\n        //Salida de informaci\u00f3n\n        System.out.println(\"La nota obtenida es: \" + nota);\n        System.out.println(\"y la calificaci\u00f3n obtenida es: \" + calificacion);\n</code></pre> <pre><code>        //Expresiones switch mejoradas JAVA 12\n        int entero = 5;\n\n        String numericString = switch (entero) {\n            case 0 -&gt; \"cero\";\n            case 1, 3, 5, 7, 9 -&gt; \"impar\";\n            case 2, 4, 6, 8, 10 -&gt; \"par\";\n            default -&gt; \"error\";\n        };\n        System.out.println(numericString); //impar\n\n        //Expresiones switch mejoradas JAVA 13\n\n        int entero2 = 4;\n\n        String numericString2 = switch (entero2) {\n            case 0 -&gt; {\n                String value = calculaCero();\n                yield value;\n            }\n            case 1, 3, 5, 7, 9 -&gt; {\n                String value = calculaImpar();\n                yield value;\n            }\n\n            case 2, 4, 6, 8, 10 -&gt; {\n                String value = calculaPar();\n                yield value;\n            }\n\n            default -&gt; {\n                String value = calculaDefecto();\n                yield value;\n            }\n        };\n        System.out.println(numericString); //calculaPar()\n    }\n    static String calculaCero() {return \"\";};\n    static String calculaImpar() {return \"\";};\n    static String calculaPar() {return \"\";};\n    static String calculaDefecto() {return \"\";};\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#for","title":"<code>for</code>","text":"<p>Observa el siguiente archivo Java y podr\u00e1s analizar un ejemplo de utilizaci\u00f3n del bucle for para la impresi\u00f3n por pantalla de la tabla de multiplicar del siete. Lee atentamente los comentarios incluidos en el c\u00f3digo, pues aclaran algunas cuestiones interesantes sobre este bucle.</p> <pre><code>package UD03;\n\npublic class Repetitiva_For {\n    /* En este ejemplo se utiliza la estructura repetitiva for\n     * para representar en pantalla la tabla de multiplicar del siete\n     */\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int numero = 7;\n        int contador;\n        int resultado = 0;\n        //Salida de informaci\u00f3n\n        System.out.println(\"Tabla de multiplicar del \" + numero);\n        System.out.println(\".............................. \");\n        //Utilizamos ahora el bucle for\n        for (contador = 1; contador &lt;= 10; contador++) {\n            /* La cabecera del bucle incorpora la inicializaci\u00f3n de la variable\n             * de control, la condici\u00f3n de multiplicaci\u00f3n hasta el 10 y el\n             * incremento de dicha variable de uno en uno en cada iteraci\u00f3n del\n             * bucle.\n             * En este caso contador++ incrementar\u00e1 en una unidad el valor de\n             * dicha variable.\n             */\n            resultado = contador * numero;\n            System.out.println(numero + \" x \" + contador + \" = \" + resultado);\n            /* A trav\u00e9s del operador + aplicado a cadenas de caracteres,\n             * concatenamos los valores de las variables con las cadenas de\n             * caracteres que necesitamos para representar correctamente la\n             * salida de cada multiplicaci\u00f3n.\n             */\n        }\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#while","title":"<code>while</code>","text":"<p>Observa el siguiente c\u00f3digo java y podr\u00e1s analizar un ejemplo de utilizaci\u00f3n del bucle <code>while</code> para la impresi\u00f3n por pantalla de la tabla de multiplicar del siete. Lee atentamente los comentarios incluidos en el c\u00f3digo, pues aclaran algunas cuestiones interesantes sobre este bucle. Como podr\u00e1s comprobar, el resultado de este bucle es totalmente equivalente al obtenido utilizando el bucle for.</p> <pre><code>package UD03;\n\npublic class Repetitiva_While {\n\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int numero = 7;\n        int contador;\n        int resultado = 0;\n        //Salida de informaci\u00f3n\n        System.out.println(\"Tabla de multiplicar del \" + numero);\n        System.out.println(\".............................. \");\n        //Utilizamos ahora el bucle while\n        contador = 1; //inicializamos la variable contadora\n        while (contador &lt;= 10){ //Establecemos la condici\u00f3n del bucle\n            resultado = contador * numero;\n            System.out.println(numero + \" x \" + contador + \" = \" + resultado);\n            //Modificamos el valor de la variable contadora, para hacer que el\n            //bucle pueda seguir iterando hasta llegar a finalizar\n            contador++;\n        }\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#do-while","title":"<code>do while</code>","text":"<p>Ahora podr\u00e1s analizar un ejemplo de utilizaci\u00f3n del bucle <code>do \u00adwhile</code> para la impresi\u00f3n por pantalla de la tabla de multiplicar del siete. Lee atentamente los comentarios incluidos en el c\u00f3digo, pues aclaran algunas cuestiones interesantes sobre este bucle. Como podr\u00e1s comprobar, el resultado de este bucle es totalmente equivalente al obtenido utilizando el bucle <code>for</code> y el bucle <code>while</code>.</p> <pre><code>package UD03;\n\npublic class Repetitiva_DoWhile {\n\n    public static void main(String[] args) {\n        // Declaraci\u00f3n e inicializaci\u00f3n de variables\n        int numero = 7;\n        int contador;\n        int resultado = 0;\n\n        //Salida de informaci\u00f3n\n        System.out.println(\"Tabla de multiplicar del \" + numero);\n        System.out.println(\".............................. \");\n        //Utilizamos ahora el bucle do-while\n        contador = 1; //inicializamos la variable contadora\n        do {\n            resultado = contador * numero;\n            System.out.println(numero + \" x \" + contador + \" = \" + resultado);\n            //Modificamos el valor de la variable contadora, para hacer que el\n            //bucle pueda seguir iterando hasta llegar a finalizar\n            contador++;\n        } while (contador &lt;= 10); //Establecemos la condici\u00f3n del bucle\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#break","title":"<code>break</code>","text":"<p>Aunque no es recomendable su uso aqu\u00ed tienes un ejemplo de la estructura <code>break</code></p> <pre><code>package UD03;\n\npublic class Sentencia_Break {\n\n    public static void main(String[] args) {\n        int contador;\n        for (contador=1;contador&lt;=10;contador++){\n            if (contador==7)\n                break;\n            System.out.println(\"Valor: \" + contador);\n        }\n        System.out.println(\"Fin del programa\");\n        /*\n         * El bucle solo se ejecutar\u00e1 en 6 ocasiones, ya que cuando\n         * la variable contador sea igual a 7 encontraremos un break que\n         * romper\u00e1 el flujo del bucle, transfiri\u00e9ndonos a la sentencia que\n         * imprime el mensaje de Fin del programa.\n         */\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#continue","title":"<code>continue</code>","text":"<p>Aunque no es recomendable su uso aqu\u00ed tienes un ejemplo de la estructura <code>continue</code></p> <pre><code>package UD03;\n\npublic class Sentencia_Continue {\n\n    public static void main(String[] args) {\n        int contador;\n        System.out.println(\"Imprimiendo los n\u00fameros pares que hay del 1 al 10...\");\n        for (contador = 1; contador &lt;= 10; contador++) {\n            if (contador % 2 != 0) {\n                continue;\n            }\n            System.out.println(contador + \" \");\n        }\n        System.out.println(\"\\nFin del programa\");\n        /*\n         * Las iteraciones del bucle que generar\u00e1n la impresi\u00f3n de cada uno de\n         * los n\u00fameros pares, ser\u00e1n aquellas en las que el resultado de calcular\n         * el resto de la divisi\u00f3n entre 2 de cada valor de la variable\n         * contador, sea igual a 0.\n         */\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#etiquetas-de-salto_1","title":"Etiquetas de salto","text":"<p>A continuaci\u00f3n, te ofrecemos un ejemplo de declaraci\u00f3n y uso de etiquetas en un bucle. Como podr\u00e1s apreciar, las sentencias asociadas a cada etiqueta est\u00e1n encerradas entre llaves para delimitar as\u00ed su \u00e1mbito de acci\u00f3n.</p> <pre><code>package UD03;\n\npublic class EtiquetasSalto {\n\n    public static void main(String[] args) {\n        for (int i = 1; i &lt; 3; i++) {\n            bloque_uno:\n            {\n                bloque_dos:\n                {\n                    System.out.println(\"Iteraci\u00f3n: \" + i);\n                    if (i == 1) {\n                        break bloque_uno;\n                    }\n                    if (i == 2) {\n                        break bloque_dos;\n                    }\n                }\n                System.out.println(\"despu\u00e9s del bloque dos\");\n            }\n            System.out.println(\"despu\u00e9s del bloque uno\");\n        }\n        System.out.println(\"Fin del bucle\");\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#sentencia-return","title":"Sentencia <code>return</code>","text":"<p>En el siguiente archivo java encontrar\u00e1s el c\u00f3digo de un programa que obtiene la suma de dos n\u00fameros, empleando para ello un m\u00e9todo sencillo que retorna el valor de la suma de los n\u00fameros que se le han pasado como par\u00e1metros. Presta atenci\u00f3n a los comentarios y f\u00edjate en las conversiones a entero de la entrada de los operandos por consola.</p> <pre><code>package UD03;\n\nimport java.io.*;\n\npublic class Sentencia_Return {\n\n    private static BufferedReader stdin = new BufferedReader(\n            new InputStreamReader(System.in));\n\n    public static int suma(int numero1, int numero2) {\n        int resultado;\n        resultado = numero1 + numero2;\n        return resultado; //Mediante return devolvemos el resultado de la suma\n    }\n\n    public static void main(String[] args) throws IOException {\n        //Declaraci\u00f3n de variables\n        String input; //Esta variable recibir\u00e1 la entrada de teclado\n        int primer_numero, segundo_numero; //Estas variables almacenar\u00e1n los operandos\n        // Solicitamos que el usuario introduzca dos n\u00fameros por consola\n        System.out.print(\"Introduce el primer operando:\");\n        input = stdin.readLine(); //Leemos la entrada como cadena de caracteres\n        primer_numero = Integer.parseInt(input); //Transformamos a entero lo introducido\n        System.out.print(\"Introduce el segundo operando: \");\n        input = stdin.readLine(); //Leemos la entrada como cadena de caracteres\n        segundo_numero = Integer.parseInt(input); //Transformamos a entero lo introducido\n        //Imprimimos los n\u00fameros introducidos\n        System.out.println(\"Los operandos son: \" + primer_numero + \" y \" + segundo_numero);\n        System.out.println(\"obteniendo su suma... \");\n        //Invocamos al m\u00e9todo que realiza la suma, pas\u00e1ndole los par\u00e1metros adecuados\n        System.out.println(\"La suma de ambos operandos es: \" + \n                suma(primer_numero, segundo_numero));\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#excepciones_1","title":"Excepciones","text":"<p>Vamos a realizar un programa en Java en el que se solicite al usuario la introducci\u00f3n de un n\u00famero por teclado comprendido entre el 0 y el 100. Utilizando manejo de excepciones, controlaremos la entrada de dicho n\u00famero y volver a solicitarlo en caso de que \u00e9sta sea incorrecta.</p> <pre><code>package UD03;\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class P6_1_Excepciones {\n\n    public static void main(String[] args) {\n        int numero = -1;\n        int intentos = 0;\n        String linea;\n        Scanner teclado = new Scanner(System.in);\n        do {\n            try {\n                System.out.print(\"Introduzca un n\u00famero entre 0 y 100: \");\n                linea = teclado.nextLine();\n                numero = Integer.parseInt(linea);\n            } catch (NumberFormatException e) {\n                System.out.println(\"Debe introducir un n\u00famero entre 0 y 100.\");\n            } catch (Exception e) {\n                System.out.println(\"Error al leer del teclado.\");\n            } finally {\n                intentos++;\n            }\n        } while (numero &lt; 0 || numero &gt; 100);\n        System.out.println(\"El n\u00famero introducido es: \" + numero);\n        System.out.println(\"N\u00famero de intentos: \" + intentos);\n    }\n}\n</code></pre> <p>En este programa se solicita repetidamente un n\u00famero utilizando una estructura <code>do\u00ad while</code>, mientras el n\u00famero introducido sea menor que 0 y mayor que 100. Como al solicitar el n\u00famero pueden producirse los errores siguientes:</p> <ul> <li>De entrada de informaci\u00f3n a trav\u00e9s de la excepci\u00f3n <code>Exception</code> generada por el m\u00e9todo <code>nextLine()</code> de la clase <code>Scanner</code>.</li> <li>De conversi\u00f3n de tipos a trav\u00e9s de la excepci\u00f3n <code>NumberFormatException</code> generada por el m\u00e9todo <code>parseInt()</code>.</li> </ul> <p>Entonces se hace necesaria la utilizaci\u00f3n de bloques <code>catch</code> que gestionen cada una de las excepciones que puedan producirse. Cuando se produce una excepci\u00f3n, se compara si coincide con la excepci\u00f3n del primer <code>catch</code>. Si no coincide, se compara con la del segundo <code>catch</code> y as\u00ed sucesivamente. Si se encuentra un <code>catch</code> que coincide con la excepci\u00f3n a gestionar, se ejecutar\u00e1 el bloque de sentencias asociado a \u00e9ste.</p> <p>Si ning\u00fan bloque <code>catch</code> coincide con la excepci\u00f3n lanzada, dicha excepci\u00f3n se lanzar\u00e1 fuera de la estructura <code>try\u2010catch\u2010finally</code>.</p> <p>El bloque <code>finally</code>, se ejecutar\u00e1 tanto si <code>try</code> termin\u00f3 correctamente, como si se captur\u00f3 una excepci\u00f3n en alg\u00fan bloque <code>catch</code>. Por tanto, si existe bloque <code>finally</code> \u00e9ste se ejecutar\u00e1 siempre.</p>"},{"location":"UD03/UD03_ES.html#ejemplo-de-la-propagacion-de-excepciones","title":"Ejemplo de la propagaci\u00f3n de excepciones","text":"<p>Aqu\u00ed tienes este otro ejemplo para comprender c\u00f3mo se propaga una excepci\u00f3n hacia arriba en la pila de ejecuci\u00f3n en Java</p> <pre><code>package UD03;\n\nimport java.util.Scanner;\n\npublic class P6_2_PropagacionExcepciones {\n    public static void main(String[] args) {\n        Scanner teclado = new Scanner(System.in);\n        try {\n            System.out.print(\"Introduzca un n\u00famero entre 0 y 100: \");\n            String linea = teclado.nextLine();\n            int numero = Integer.parseInt(linea);\n            metodoA(numero);\n        } catch (Exception e) {\n            System.out.println(\"Excepci\u00f3n atrapada en el m\u00e9todo main: \" + e.getMessage());\n        }\n    }\n\n    public static void metodoA(int numero) {\n        try {\n            metodoB(numero);\n        } catch (ArithmeticException e) {\n            System.out.println(\"Excepci\u00f3n atrapada en el m\u00e9todo A: \" + e.getMessage());\n        }\n    }\n\n    public static void metodoB(int divisor) {\n        int resultado = 10 / divisor;\n    }\n\n}\n</code></pre>"},{"location":"UD03/UD03_ES.html#pildoras-informaticas-relacionadas","title":"P\u00edldoras inform\u00e1ticas relacionadas","text":"<ul> <li>Java course. Conditionals I. Video 16</li> <li>Java course. Conditional II. Video 17</li> <li>Course Java Loops I Video 18</li> <li>Java course. Loops II. Video 19</li> <li>Java Course Loops III. Video 20</li> <li>Curso Java Bucles IV. V\u00eddeo 21</li> <li>Curso Java Bucles V. V\u00eddeo 22</li> <li>Curso Java. Excepciones I. V\u00eddeo 142</li> <li>Curso Java. Excepciones II. throws try catch. V\u00eddeo 143</li> <li>Videos de Makigas al respecto:<ul> <li>Java: introducci\u00f3n a las excepciones</li> <li>Java: throw y throws, usos y diferencias </li> </ul> </li> </ul>"},{"location":"UD03/UD03_ejercicios_ES.html","title":"Ejercicios","text":""},{"location":"UD03/UD03_ejercicios_ES.html#ejercicios-de-la-ud03","title":"Ejercicios de la UD03","text":""},{"location":"UD03/UD03_ejercicios_ES.html#retos","title":"Retos","text":"<ol> <li>(Reto1) modifique el programa para que, en lugar de realizar un descuento del 8% si la compra es de 100 \u20ac o m\u00e1s, aplique una penalizaci\u00f3n de 2 \u20ac si el precio es inferior a 30 \u20ac.</li> </ol> <pre><code>import java.util.Scanner;\n//Un programa que calcula descuentos.\n\npublic class Descuento{\n    public static final float DESCUENTO= 8;\n    public static final float COMPRA_MIN = 100;\n\n    public static void main(String[] args) {\n        Scanner lector = new Scanner(System.in);\n        System.out.print(\"\u00bfCu\u00e1l es el precio del producto, en euros?\");\n        float precio= lector.nextFloat();\n        lector.nextLine();\n        if (precio&gt;= COMPRA_MIN) {\n            float descuentoHecho= precio * DESCUENTO / 100;\n            precio = precio - descuentoHecho;\n        }\n        System.out.println(\"El precio final a pagar es de \"+ precio +\" euros.\");\n    }\n}\n</code></pre> <ol> <li> <p>(Reto2) modifique el programa para que, en lugar de un \u00fanico valor secreto, haya dos. Para ganar, basta con acertar uno de los dos. La condici\u00f3n l\u00f3gica que necesitar\u00e1 ya no se puede resolver con una expresi\u00f3n compuesta por una \u00fanica comparaci\u00f3n. Ser\u00e1 m\u00e1s compleja.</p> <p>Atenci\u00f3n</p> <p>Para pasar satisfactoriamente los tests, la variable <code>VALOR_SECRETO</code> debe ser renombrada a <code>VALOR_SECRETO1</code>, y la nueva debe llamarse <code>VALOR_SECRETO2</code></p> </li> </ol> <pre><code>import java.util.Scanner;\n\npublic class Adivina{\n\n    public static final int VALOR_SECRETO = 4;\n\n    public static void main(String[] args) {\n        Scanner lector = new Scanner(System.in);\n        System.out.println(\"Empecemos el juego.\");\n        System.out.print(\"Adivina el valor entero, entre 0 y 10: \");\n        int valorUsuario = lector.nextInt();\n        lector.nextLine();\n        if (VALOR_SECRETO == valorUsuario) {\n            System.out.println(\"\u00a1Exactamente! Era \" + VALOR_SECRETO + \".\");\n        } else {\n            System.out.println(\"\u00a1Te has equivocado!\");\n        }\n        System.out.println(\"Hemos terminado el juego.\");\n    }\n}\n</code></pre> <ol> <li> <p>(Reto3) modifique el ejemplo anterior (Adivina) para que comprueben que el valor que ha introducido el usuario se encuentra dentro del rango de valores correcto (entre 0 y 10).</p> </li> <li> <p>(Reto4) aplique el mismo tipo de control sobre los datos de la entrada del ejemplo siguiente al ejercicio del reto 1.     !!! warning \"Atenci\u00f3n\"         Para pasar satisfactoriamente los tests, el mensaje de error cuando no se introduzca un entero debe contener la palabra \"ERROR\"    </p><pre><code>import java.util.Scanner;\n\npublic class AdivinaControlErroresEntrada{\n\n    public static final int VALOR_SECRETO = 4;\n\n    public static void main(String[] args) {\n        Scanner lector = new Scanner(System.in);\n        System.out.println(\"Empecemos el juego.\");\n        System.out.print(\"Adivina el valor entero, entre 0 y 10: \");\n        boolean tipoCorrecto = lector.hasNextInt();\n        if (tipoCorrecto) {\n            //Se ha escrito un entero correctamente. Ya puede leerse.\n            int valorUsuario = lector.nextInt();\n            lector.nextLine();\n            if (VALOR_SECRETO == valorUsuario) {\n                System.out.println(\"Exacto! Era \" + VALOR_SECRETO + \".\");\n            } else {\n                System.out.println(\"Te has equivocado!\");\n            }\n            System.out.println(\"Hemos terminado el juego.\");\n        } else {\n            //No se ha escrito un entero.\n            System.out.println(\"El valor introducido no es un entero.\");\n        }\n    }\n}\n</code></pre> </li> <li> <p>(Reto5) Modifique el ejemplo para que primero pregunte al usuario cu\u00e1ntos caracteres \"-\" quiere escribir por pantalla, y entonces los escriba. Cuando pruebe el programa, no introduzca un n\u00famero muy alto!</p> </li> </ol> <pre><code>//Un programa que escribe una l\u00ednea con 100 caracteres '\u2212'.\n\npublic class Linea {\n\n    public static void main(String[] args) {\n        //Inicializamos un contador\n\n        int i = 0;\n        //\u00bfYa hemos hecho esto 100 veces?\n        while (i &lt; 100) {\n            System.out.print(\"\u2212\");\n            //Lo hemos hecho una vez, sumamos 1 al contador\n\n            i = i + 1;\n        }\n        //Forzamos un salto de l\u00ednea\n        System.out.println();\n    }\n}\n</code></pre> <ol> <li>(Reto6) un contador tanto puede empezar a contar desde 0 e ir subiendo, como desde el final e ir disminuyendo como una cuenta atr\u00e1s. Modifique este programa para que la tabla de multiplicar comience mostrando el valor para 10 y vaya bajando hasta el 1.</li> </ol> <pre><code>import java.util.Scanner;\npublic class TablaMultiplicar{\n\n    public static void main(String[] args) {\n        Scanner lector = new Scanner(System.in);\n        System.out.print(\"\u00bfQu\u00e9 tabla de multiplicar quieres? \");\n        int tabla = lector.nextInt();\n        lector.nextLine();\n        int i = 1;\n        while (i &lt;= 10) {\n            int resultado = tabla * i;\n            System.out.println(tabla + \" * \" + i + \" = \" + resultado);\n            i = i + 1;\n        }\n        System.out.println(\"\u00c9sta ha sido la tabla del \" + tabla);\n    }\n}\n</code></pre> <ol> <li>(Reto7) el uso de contadores y acumuladores no es excluyente, sino que puede ser complementario. Piense c\u00f3mo se podr\u00eda modificar el programa para calcular el resultado del m\u00f3dulo y la divisi\u00f3n entera a la vez. Recuerde que la divisi\u00f3n entera simplemente ser\u00eda contar cu\u00e1ntas veces se ha podido restar el divisor.</li> </ol> <pre><code>import java.util.Scanner;\n\npublic class Modulo{\n\n    public static void main(String[] args) {\n        Scanner lector = new Scanner(System.in);\n        System.out.print(\"\u00bfCu\u00e1l es el dividendo? \");\n        int dividendo = lector.nextInt();\n        lector.nextLine();\n        System.out.print(\"\u00bfCu\u00e1l es el divisor? \");\n        int divisor = lector.nextInt();\n        lector.nextLine();\n        while (dividendo &gt;= divisor) {\n            dividendo = dividendo - divisor;\n            System.out.println(\"Bucle: por ahora el dividendo vale \" + dividendo + \".\");\n        }\n        System.out.println(\"El resultado final es\" + dividendo + \".\");\n    }\n}\n</code></pre>"},{"location":"UD03/UD03_ejercicios_ES.html#ejercicios","title":"Ejercicios","text":""},{"location":"UD03/UD03_ejercicios_ES.html#if-else","title":"<code>if else</code>","text":"<ol> <li> <p>(MenorDeDos) Escribir un programa que muestre el menor de dos n\u00fameros enteros introducidos por teclado.</p> </li> <li> <p>(MenorDeTres) Escribir un programa que muestre el menor de tres n\u00fameros enteros introducidos por teclado. Haz dos versiones: una utilizando los operadores l\u00f3gicos necesarios (&amp;&amp;,||, ...) y otra sin utilizar ninguno (habr\u00e1 que usar sentencias if else anidadas)</p> </li> <li> <p>(IntermedioDeTres) Escribir un programa que muestre el intermedio de tres n\u00fameros introducidos por teclado.</p> </li> <li> <p>(NotasTexto) Escribir un programa que acepte del usuario la nota de un examen (valor num\u00e9rico entre 1 y 10) y muestre el literal correspondiente a dicha nota seg\u00fan (insuficiente, suficiente, bien, notable, sobresaliente).</p> </li> <li> <p>(Divisi\u00f3n) Escribir un programa que pida al usuario dos n\u00fameros enteros y le muestre el resultado de la divisi\u00f3n. Tener en cuenta que si dividimos un n\u00famero por cero se producir\u00e1 un error de ejecuci\u00f3n y debemos evitarlo.</p> </li> <li> <p>(Raiz) Se desea calcular la ra\u00edz cuadrada real de un n\u00famero real cualquiera pedido inicialmente al usuario. Como dicha operaci\u00f3n no est\u00e1 definida para los n\u00fameros negativos es necesario tratar, de alg\u00fan modo, dicho posible error sin que el programa detenga su ejecuci\u00f3n.</p> </li> <li> <p>(Hora12) Escribir un programa que lea la hora de un d\u00eda en notaci\u00f3n de 24 horas y la exprese en notaci\u00f3n de 12 horas. Por ejemplo, si la entrada es 13 horas 45 minutos, la salida ser\u00e1 1:45 PM. La hora y los minutos se leer\u00e1n de teclado de forma separada, primero la hora y luego los minutos.</p> </li> <li> <p>(Bisiesto) Escribir un programa que determine si un a\u00f1o introducido por teclado es o no bisiesto. Un a\u00f1o es bisiesto si es m\u00faltiplo de 4 (por ejemplo 1984). Sin embargo, los a\u00f1os m\u00faltiplos de 100 no son bisiestos, salvo que sean m\u00faltiplos de 400, en cuyo caso si lo son (por ejemplo 1800 no es bisiesto y 2000 si lo es). Para hacer el programa, implementa un m\u00e9todo dentro de la clase que reciba un a\u00f1o y devuelva true si el a\u00f1o es bisiesto y false en caso de que no los sea.</p> </li> <li> <p>(Fechas) Escribir un programa que pida al usuario dos fechas (dia, mes y a\u00f1o), que se suponen correctas, y le muestre la menor de ellas. La fecha se mostrar\u00e1 en formato dd/mm/a\u00f1o. Utiliza un m\u00e9todo <code>mostrarFecha</code>, para mostrar la fecha por pantalla. La fecha se mostrar\u00e1 siempre con dos d\u00edgitos para el d\u00eda, dos para el mes y cuatro para el a\u00f1o.</p> </li> <li> <p>(DiasDelMes) Escribir un programa que lea de teclado el n\u00famero de un mes (1 a 12) y visualice el n\u00famero de d\u00edas que tiene el mes. Hacerlo utilizando sentencias <code>if else</code>. Para hacer el programa, implementa un m\u00e9todo en la clase que reciba un n\u00famero de mes y devuelva el n\u00famero de d\u00edas que tiene el mes.</p> </li> <li> <p>(NombreDelMes) Escribir un programa que lea de teclado el n\u00famero de un mes (1 a 12) y visualice el nombre del m\u00e9s (enero, febrero, etc). Hacerlo utilizando sentencias <code>if else</code>. Para hacer un programa, implementa un m\u00e9todo en la clase que reciba un n\u00famero de mes y devuelva el nombre del mes</p> </li> <li> <p>(Salario) Escribir un programa que lea de teclado las horas trabajadas por un empleado en una semana y calcule su salario neto semanal, sabiendo que:</p> <ul> <li>Las horas ordinarias se pagan a 6 \u20ac.</li> <li>Las horas extraordinarias se pagan a 10 \u20ac.</li> <li>Los impuestos a deducir son:<ul> <li>Un 2 % si el salario bruto semanal es menor o igual a 350 \u20ac</li> <li>Un 10 % si el salario bruto semanal es superior a 350 \u20ac</li> </ul> </li> <li>La jornada semanal ordinaria son 40 horas. El resto de horas trabajadas se considerar\u00e1n horas extra.</li> </ul> </li> <li> <p>(Signo) Dados dos n\u00fameros enteros, num1 y num2, realizar un programa que escriba uno de los dos     mensajes:</p> <ul> <li>\"el producto de los dos n\u00fameros es positivo o nulo\" o bien</li> <li>\"el producto de los dos n\u00fameros es negativo\".</li> </ul> <p>Resolverlo sin calcular el producto, sino teniendo en cuenta \u00fanicamente el signo de los n\u00fameros a multiplicar.</p> </li> <li> <p>(Calculadora) Escribir un programa para simular una calculadora. Considera que los c\u00e1lculos posibles son del tipo num1 operado num2, donde num1 y num2 son dos n\u00fameros reales cualesquiera y operador es una de entre: +, -, * y /. El programa pedir\u00e1 al usuario en primer lugar el valor num1, a continuaci\u00f3n el operador y finalmente el valor num2. Resolver utilizando instrucciones <code>if else</code></p> </li> <li> <p>(Comercio) Un comercio aplica un descuento del 8% por compras superiores a 40 euros. El descuento m\u00e1ximo ser\u00e1 de 12 euros. Escribir un programa que solicite al usuario el importe de la compra y muestre un mensaje similar al siguiente:</p> <ul> <li>Importe de la compra 100 \u20ac</li> <li>Porcentaje de descuento aplicado: 8%</li> <li>Descuento aplicado: 8 \u20ac</li> <li>Cantidad a pagar: 92 \u20ac</li> </ul> </li> <li> <p>(Editorial) Una compa\u00f1\u00eda editorial dispone de 2 tipos de publicaciones: libros y revistas. El precio de cada pedido depende del n\u00famero de elementos solicitados al cual se le aplica un determinado descuento, que es diferente para libros y para revistas. La siguiente tabla muestra los descuentos a aplicar en funci\u00f3n del n\u00famero de unidades y del tipo de producto:</p> Cantidad pedida Libros Revistas Hasta 5 unidades 0 % de descuento 0 % de descuento De 6 a 10 unidades 10 % de descuento 15 % de descuento De 11 a 20 unidades 15 % de descuento 20 % de descuento A partir de 20 unidades 20 % de descuento 25 % de descuento <p>Escribe un m\u00e9todo <code>calcularCoste</code> que, recibiendo el tipo de publicaci\u00f3n (<code>String</code>), que puede ser \"libro\" o \"revista\", el precio individual (<code>double</code>) y el n\u00famero de unidades solicitado (<code>int</code>), devuelva el coste del pedido (aplicando el descuento correspondiente). Escribe un programa en el que el usuario indique cantidad y precio de revistas y cantidad y precio de libros que incluye un pedido, y muestre el coste del pedido</p> </li> <li> <p>(Taxi) Se desea calcular el coste del trayecto realizado en taxi en funci\u00f3n de los kil\u00f3metros recorridos en las carreras metropolitanas de Valencia. Seg\u00fan las tarifas vigentes para el 2012, el coste se calcula de la siguiente manera:</p> <ul> <li>D\u00edas laborables en horario diurno (de 6:00 a antes de las 22:00h): 0.73 \u20ac/km.</li> <li>D\u00edas laborables en horario nocturno: 0.84 \u20ac/km.</li> <li>S\u00e1bados y domingos: 0.93 \u20ac/km.</li> <li>Adem\u00e1s, la tarifa m\u00ednima diurna es de 2.95\u20ac y la m\u00ednima nocturna de 4\u20ac.</li> </ul> <p>Escribir un programa que solicite al usuario:</p> <ul> <li>La hora (hora y minutos) en que se realiz\u00f3 el trayecto.</li> <li>El d\u00eda de la semana (se supone que el usuario introduce un valor entre 1 para lunes y 7 para domingo)</li> <li>Los quil\u00f3metros recorridos.</li> </ul> <p>Y muestre el coste del trayecto</p> </li> <li> <p>(Nombre) Escribir un programa en el que el usuario pueda escribir su nombre. El programa le dir\u00e1 si la primera y la \u00faltima letra del nombre coinciden o no. Pru\u00e9balo con \"Ana\", \"ana\", \"Angel\", \"Amanda\" y \"David\"</p> <p>Ampliaci\u00f3n: Haz que funcione aunque las letras tengan diferente CASE (pista: lowercase i uppercase).</p> </li> <li> <p>(Validar) Se desea implementar un programa que determine si dos datos <code>x</code> e <code>y</code> de entrada son v\u00e1lidos. Un par de datos es v\u00e1lido si es uno de los que aparecen en la siguiente tabla:</p> x : a a a a a b b b b b y : 1 3 5 7 9 2 4 6 8 10 <p>Se pide implementar un programa que lea de teclado el valor de <code>x</code> y el valor de <code>y</code>, e indique por pantalla \"VALIDOS\" o \"NO VALIDOS\". Se pide hacerlo de forma que no se utilice ninguna estructura condicional (if, switch,...), es decir, se calcular\u00e1 una expresi\u00f3n booleana que determine si x e y son v\u00e1lidos. Se procurar\u00e1 que la expresi\u00f3n booleana propuesta sea breve y concisa.</p> </li> </ol>"},{"location":"UD03/UD03_ejercicios_ES.html#bucles-simples","title":"Bucles simples","text":"<ol> <li> <p>(SencillosWhile) Crear una clase llamada <code>SencillosWhile</code> y crear en \u00e9l m\u00e9todos que realicen las siguientes tareas.</p> <ol> <li>(imparesHastaN) Dado un n\u00ba entero <code>n</code> introducido por el usuario, mostrar los n\u00fameros impares que hay entre 1 y <code>n</code>. Por ejemplo, si n es 8 mostrar\u00e1 1 3 5 7</li> <li>(nImpares) Dado un n\u00ba entero <code>n</code> introducido por el usuario, mostrar los <code>n</code> primeros n\u00fameros impares. Por ejemplo, si <code>n</code> es 3 mostrar\u00e1 1 3 5 (3 primeros impares)</li> <li>(cuentaAtras) Dado un entero <code>n</code> introducido por el usuario, mostrar una cuenta atr\u00e1s partiendo de <code>n</code>: <code>n</code>, <code>n-1</code>, \u2026. 5, 4, 3, 2, 1, 0</li> <li>(sumaNPrimeros) Dado un entero <code>n</code> introducido por el usuario, mostrar la suma de los n\u00fameros entre 1 y <code>n</code>.</li> <li>(mostrarDivisoresN) Dado un entero <code>n</code> introducido por el usuario, mostrar todos sus divisores, incluidos el 1 y el mismo <code>n</code>. Por ejemplo, si <code>n</code> es 12 mostrar\u00eda 1, 2, 3, 4, 6 y 12</li> <li>(sumaDivisoresN) Dado un entero <code>n</code> introducido por el usuario, mostrar la suma de todos sus divisores, sin incluir al propio <code>n</code>. Por ejemplo, si <code>n</code> es 12 sumar\u00e1 1, 2, 3, 4 y 6 = 16</li> </ol> </li> <li> <p>(SencillosFor) Crear una clase llamada \"SencillosFor\" y crear en \u00e9l los mismos m\u00e9todos que en el ejercicio anterior, pero utilizando la sentencia <code>for</code> en lugar de <code>while</code></p> </li> <li> <p>(PotenciasDe2) Dado un entero <code>n</code> introducido por el usuario*,* mostrar las <code>n</code> primeras potencias de 2. Es decir, 2<sup>0</sup>, 2<sup>1</sup>, 2<sup>2</sup>, 2<sup>3</sup>, \u2026, 2<sup>n</sup>. Soluciona el ejercicio sin utilizar <code>Math.pow</code>. Ten en cuenta que, por ejemplo, 2<sup>3</sup> = 1* 2 * 2 * 2 o que 2<sup>4</sup> = 1* 2 * 2 * 2 * 2</p> </li> <li> <p>(Etapas) El ser humano pasa por una serie de etapas en su vida que, con car\u00e1cter general se asocian a las edades que aparecen en la tabla siguiente.  </p> Infancia Hasta los 10 a\u00f1os Pubertad De 11 a 14 a\u00f1os Adolescencia De 15 a 21 a\u00f1os Adultez De 22 a 55 a\u00f1os Vejez De 55 a 70 a\u00f1os Ancianidad A partir de los 71 a\u00f1os <p>Escribe un programa en el que el usuario introduzca las edades de una serie de personas y calcule y muestre que porcentaje de personas que se encuentran en cada etapa. En primer lugar el programa pedir\u00e1 el n\u00famero de personas que participan en la muestra y a continuaci\u00f3n solicitar\u00e1 la edad de cada una de ellas. El resultado ser\u00e1 similar al siguiente:</p> <pre><code>Infancia: 5.3 %\nPubertad: 10.7 %\nAdolescencia: 21.2 %\n...\n</code></pre> </li> <li> <p>(Primo) Escribir un programa en el que el usuario escriba un n\u00famero entero y se le diga si se trata o no de un n\u00famero primo. Recuerda que un n\u00ba primo es aquel que solo es divisible por 1 y por s\u00ed mismo (Es decir tiene SOLO y EXCLUSIVAMENTE dos divisores cuyo resto sea cero). </p> </li> <li> <p>(Primos) Escribir un programa en el que el usuario escriba un n\u00famero entero y se le diga todos los n\u00fameros primos entre 1 y el n\u00famero introducido.</p> </li> <li> <p>(EsPrimoMejorada) Haz una nueva versi\u00f3n del programa del ejercicio anterior teniendo en cuenta lo siguiente:  </p> <ul> <li>El \u00fanico n\u00famero par que es primo es el 2.</li> <li>Un n\u00famero n no puede tener divisores mayores que n/2 (o mayores que Math.sqrt(n))</li> </ul> </li> <li> <p>(Divisores) Escribir un programa que muestre los tres primeros divisores de un n\u00famero n introducido por el usuario. Por ejemplo, si el usuario introduce el n\u00famero 45, el programa mostrar\u00e1 los divisores 1, 3 y 5. Ten en cuenta que la posibilidad de que el n\u00famero n tenga menos de 3 divisores. Prueba qu\u00e9 pasa si el usuario pide, por ejemplo, los tres primeros divisores de 7.  </p> </li> <li> <p>(SumaSerie) Dado un n\u00famero <code>n</code>, introducido por el usuario, calcula y muestra por pantalla la siguiente suma 1/1+\u00bd+\u2153+ \u00b7\u00b7\u00b7 + 1/<code>n</code> </p> </li> <li> <p>(Cifras) Escribir un programa en el que el usuario introduzca un n\u00famero entero cualquiera (positivo, negativo o cero) y se le diga cuantas cifras tiene. Pistas: \u00bfCuantas cifras tiene el n\u00ba 25688? \u00bfCu\u00e1ntas veces podemos dividir el n\u00ba 25688 por 10 hasta que se hace cero? Cuidado, el n\u00ba 0 tiene una cifra.</p> </li> <li> <p>(Transportes) Una empresa de transportes cobra 30\u20ac por cada bulto que transporta. Adem\u00e1s, si el peso total de todos los bultos supera los 300 kilos, cobra 0.9\u20ac por cada kg extra. Por \u00faltimo si el trasporte debe realizarse en s\u00e1bado, cobra un plus de 60\u20ac. La empresa no realiza el pedido si hay que transportar m\u00e1s de 30 bultos, si el peso total supera los 1000 kg o si se solicita hacerlo en domingo. Realizar un programa que solicite el n\u00famero de bultos, el d\u00eda de la semana (valor entre 1 y 7) y el peso de cada uno de los bultos y muestre el coste del transporte en caso de que pueda realizarse o un mensaje adecuado en caso contrario</p> </li> <li> <p>(Containers) La capacidad de un buque que transporta containers est\u00e1 limitada tanto por la cantidad de containers como por el peso, pudiendo transportar un m\u00e1ximo de 100 containers y un m\u00e1ximo de 700 toneladas. Hacer un programa en el que se vaya introduciendo el peso de los containers (en toneladas) a medida que se cargan en el barco, hasta que se llegue al m\u00e1ximo de capacidad. Mostrar al final la cantidad de containers cargados y el peso total. En el momento en que se desee cargar un container que haga que la carga total supere las 700 toneladas, se dar\u00e1 por finalizada la carga, aunque pudieran existir containers menos pesados con posibilidad de ser cargados.</p> </li> <li> <p>(Notas) Realizar un programa que permita introducir las notas de un examen de los alumnos de un curso. El usuario ir\u00e1 introduciendo las notas una tras otra. Se considerar\u00e1 finalizado el proceso de introducci\u00f3n de notas cuando el usuario introduzca una nota negativa. Al final, el programa le dir\u00e1:</p> <ul> <li>El n\u00famero de notas introducidas.</li> <li>El n\u00famero de aprobados (mayor o igual a 5 puntos)</li> <li>La nota media</li> </ul> </li> <li> <p>(NotasExtremas) Modificar el ejercicio anterior para que adem\u00e1s calcule la nota m\u00e1xima y la nota m\u00ednima.</p> </li> </ol>"},{"location":"UD03/UD03_ejercicios_ES.html#bucles-anidados","title":"Bucles anidados","text":"<ol> <li> <p>(Edades) Programa que pida al usuario la edad de cinco personas. Si la suma de las edades es inferior a 200, el programa volver\u00e1 a solicitar las 5 edades.</p> </li> <li> <p>(NotasPorAlumno) Programa que pida al usuario las notas de <code>A</code> alumnos en <code>S</code> asignaturas, alumno por alumno. <code>A</code> y <code>S</code> se definir\u00e1n en el programa como <code>CONSTANTES</code>.</p> <pre><code>Alumno 1\nIntroduce nota de asignatura 1: 8\nIntroduce nota de asignatura 2:\n...\nAlumno 2\nIntroduce nota de asignatura 1:\n...\n</code></pre> </li> <li> <p>(NotasPorAsignatura) Programa que pida al usuario las notas de <code>A</code> alumnos en <code>S</code> asignaturas, asignatura por asignatura. <code>A</code> y <code>S</code> se definir\u00e1n en el programa como <code>CONSTANTES</code>. </p> <pre><code>Asignatura 1\nIntroduce nota del alumno 1: \nIntroduce nota del alumno 2:\n...\nAsignatura 2\nIntroduce nota del alumno 1:\n...\n</code></pre> </li> <li> <p>(MediasPorAsignatura) Repite el ejercicio anterior haciendo que se muestre la media de cada asignatura</p> <pre><code>Asignatura 1\nIntroduce nota del alumno 1: \nIntroduce nota del alumno 2:\n...\nMedia asignatura 1: 8.5 puntos\n\nAsignatura 2\nIntroduce nota del alumno 1:\n...\nMedia asignatura 2: 6.5 puntos\n...\n</code></pre> </li> <li> <p>(TablaMult) Escribir un programa que permita al usuario introducir un n\u00famero <code>N</code> e imprima la tabla de multiplicar (del 0 al 10) de todos los n\u00fameros entre 1 y <code>N</code>. Ejemplo: Si el usuario introduce en n\u00famero 5, el programa imprimiria</p> <pre><code>Tabla del 1:\n1 por 0, 0\n1 por 1, 1\n1 por 2, 2\n...\n1 por 10, 10\n\nTabla del 2:\n2 por 0, 0\n2 por 1, 2\n....\n2 por 10, 20\n\nTabla del 3:\n...\n\nTabla del 5:\n...\n5 por 10, 50\n</code></pre> </li> <li> <p>(PrimosHastaN) Programa que solicite al usuario un numero <code>n</code> y muestre todos los n\u00fameros primos menores o iguales que <code>n</code>. (IGUAL AL 27!!)</p> </li> <li> <p>(CombinarLetras2) Escribir un programa que muestre todas las palabras de dos letras que se pueden formar con los cuatro primeros caracteres del alfabeto en min\u00fasculas ('a', 'b', 'c', 'd'):</p> <pre><code>aa\nab\nac\nad\nba\nbb\nbc\nbd\n...\nda\ndb\ndc\ndd\n</code></pre> </li> <li> <p>(CombinarLetras3) Repite el ejercicio anterior mostrando palabras de tres letras</p> <pre><code>aaa\naab\n...\nddc\nddd\n</code></pre> </li> <li> <p>(LetraALetra) Escribe un programa en el que se solicite al usuario un texto de forma repetida hasta que el usuario introduzca la cadena vac\u00eda. Con cada texto que introduzca el usuario se le mostrar\u00e1 car\u00e1cter a car\u00e1cter, cada car\u00e1cter en una l\u00ednea</p> <pre><code>Introduce texto: Hola\nH\no\nl\na\nIntroduce texto: Casa\nC\na\ns\na\nIntroduce texto: \nFin del programa\n</code></pre> </li> <li> <p>(DibujarFiguras1) Escribe una clase que contenga los m\u00e9todos que se indican a continuaci\u00f3n. En el m\u00e9todo main solicita al usuario las dimensiones de las figuras necesarias en cada caso y llama al m\u00e9todo correspondiente para que se muestre por pantalla</p> <ol> <li> <p>(<code>void dibRecAsteriscos (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando asteriscos, como el siguiente. En el ejemplo ancho es 7 y alto es 3</p> <pre><code>* * * * * * *\n* * * * * * *\n* * * * * * *\n</code></pre> </li> <li> <p>(<code>void dibRecNumeros1 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando n\u00fameros, como el siguiente. En el ejemplo ancho es 7 y alto es 3</p> <pre><code>1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n</code></pre> </li> <li> <p>(<code>void dibRecNumeros2 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando n\u00fameros, como el siguiente. En el ejemplo ancho es 7 y alto es 3</p> <pre><code>7 6 5 4 3 2 1\n7 6 5 4 3 2 1\n7 6 5 4 3 2 1\n</code></pre> </li> <li> <p>(<code>void dibRecNumeros3 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando n\u00fameros, como el siguiente. En el ejemplo ancho es 7 y alto es 3</p> <pre><code>01 02 03 04 05 06 07\n08 09 10 11 12 13 14\n15 16 17 18 19 20 21\n</code></pre> </li> <li> <p>(<code>void dibDiagonal (int ancho, int alto)</code> dibuja un rect\u00e1ngulo con ceros y unos. Los 1 est\u00e1n en las posiciones en las que fila y columna coinciden. En el ejemplo ancho es 7 y alto es 3</p> <pre><code>1 0 0 0 0 0 0\n0 1 0 0 0 0 0\n0 0 1 0 0 0 0\n</code></pre> </li> <li> <p>(<code>void dibRecLetras (int ancho, int alto)</code> dibuja un rect\u00e1ngulo letras sucesivas comenzando por la \"a\". En el ejemplo ancho es 7 y alto es 3</p> </li> </ol> <pre><code>a a a a a a a\nb b b b b b b\nc c c c c c c\n</code></pre> <ol> <li>(<code>void dibRecLetras2 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo letras sucesivas terminando por la \"a\". En el ejemplo ancho es 7 y alto es 3</li> </ol> <pre><code>c c c c c c c\nb b b b b b b\na a a a a a a\n</code></pre> <ol> <li>(<code>void dibRecLetras3 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo letras sucesivas comenzando por la \"a\". En el ejemplo ancho es 7 y alto es 3</li> </ol> <pre><code>a b c d e f g\nh i j k l m n\no p q r s t u\n</code></pre> </li> <li> <p>(dibujarFiguras2) Escribe una clase que contenga los m\u00e9todos que se indican a continuaci\u00f3n. En el m\u00e9todo main solicita al usuario las dimensiones de las figuras necesarias en cada caso y llama al m\u00e9todo correspondiente para que se muestre por pantalla</p> <ol> <li><code>void dibRectNumeros3 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo    utilizando n\u00fameros, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> <pre><code>1 2 3 4 5 6 7 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 7 6 5 4 3 2 1\n</code></pre> <ol> <li><code>void dibRectAsteriscos1 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> <pre><code>* * * * * * *\n* * * * * * *\n* * * * * * *\n</code></pre> <ol> <li><code>void dibRectAsteriscos2 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando asteriscos (*), espacios en blanco y el car\u00e1cter \u2018+\u2019, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> <pre><code>* + * + * + *\n* + * + * + *\n* + * + * + *\n</code></pre> <ol> <li><code>void dibRectAsteriscos3 (int ancho, int alto)</code> dibuja un rect\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo ancho es 7 y alto es 3</li> </ol> <pre><code>* * * * * * *\n*           *\n* * * * * * *\n</code></pre> <ol> <li><code>void dibTriangulo1 (int base)</code> dibuja un tri\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo base es 5</li> </ol> <pre><code>*\n* *\n* * * \n* * * * \n* * * * *\n</code></pre> <ol> <li><code>void dibTriangulo2 (int altura)</code> dibuja un tri\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo altura es 5</li> </ol> <pre><code>        *\n      * *\n    * * * \n  * * * * \n* * * * *\n</code></pre> <ol> <li><code>void dibTriangulo3 (int altura)</code> dibuja un tri\u00e1ngulo utilizando asteriscos (*) y espacios en blanco, como el siguiente. En el ejemplo altura es 5</li> </ol> <pre><code>        *\n      * * *\n    * * * * *\n  * * * * * * *\n* * * * * * * * *\n</code></pre> </li> </ol>"},{"location":"UD03/UD03_ejercicios_ES.html#switch","title":"<code>switch</code>","text":"<ol> <li>(NotasTexto2) Escribir un programa que acepte del usuario la nota de un examen (valor num\u00e9rico entre 1 y 10) y muestre el literal correspondiente a dicha nota seg\u00fan (insuficiente, suficiente, bien, notable, sobresaliente). Hacerlo utilizando la sentencias switch. La nota que introduce el usuario tendr\u00e1 que ser un valor entero.</li> <li>(DiasDelMes2)Escribir un programa que lea de teclado el n\u00famero de un mes (1 a 12) y visualice el n\u00famero de d\u00edas que tiene el mes. Resolver utilizando la sentencias switch.</li> <li>(NombreDelMes2)Escribir un programa que lea de teclado el n\u00famero de un mes (1 a 12) y visualice el nombre del m\u00e9s (enero, febrero, etc). Resolver utilizando la sentencias switch.</li> <li>(Calculadora2) Escribir un programa para simular una calculadora. Considera que los c\u00e1lculos posibles son del tipo num1 operador num2, donde num1 y num2 son dos n\u00fameros reales cualesquiera y operador es una de entre: +, -, * y /. El programa pedir\u00e1 al usuario en primer lugar el valor num1, a continuaci\u00f3n el operador y finalmente el valor num2. Resolver utilizando la sentencias switch.</li> </ol>"},{"location":"UD03/UD03_ejercicios_ES.html#en-papel","title":"en papel...","text":"<ol> <li> <p>(Valor) \u00bfQu\u00e9 valor se asignar\u00e1 a consumo en la sentencia <code>if</code> siguiente si velocidad es 120?</p> <pre><code>if (velocidad &gt; 80)\n    consumo = 10;\nelse if (velocidad &gt; 100)\n    consumo = 12;\nelse if (velocidad &gt; 120)\n    consumo = 15;\n</code></pre> </li> <li> <p>(Errores) Encuentra y corrige los errores de los siguientes fragmentos de programa.</p> <ol> <li>fragmento a</li> </ol> <pre><code>if (x &gt; 25)\n y = x\nelse\n y = z;\n</code></pre> <ol> <li>fragmento b</li> </ol> <pre><code>if (x&lt;0)\n System.out.println(\"El valor de x es\" +x);\n System.out.println (\"x es negativo\");\nelse\n System.out.println (\"El valor de x es\"+x);\n System.out.println (\"x es positivo\");\n</code></pre> <ol> <li>fragmento c</li> </ol> <pre><code>if (x = 0) System.out.println (\"x igual a cero\");\nelse System.out.println (\"x distinto de cero\");\n</code></pre> </li> <li> <p>(SalidaExacta) Cu\u00e1l es la salida exacta por pantalla del siguiente fragmento de programa</p> <pre><code>int x = 20;\nSystem.out.println(\"Comenzamos\");\nif (x&gt;= 20)\n    if (x&gt;50) System.out.println(\"Muy grande\");\n    else {\n        if (x%2 != 0) System.out.println(\"Impar\");\n    }\nelse if (x&lt;=20) System.out.println(\"Peque\u00f1o\");\nSystem.out.println(\"Terminamos\");\n</code></pre> </li> <li> <p>(Descuentos) En una tienda, por liquidaci\u00f3n, se aplican distintos descuentos en funci\u00f3n del total de las compras realizadas:</p> <ul> <li>Si total &lt; 500 \u20ac, no se aplica descuento.</li> <li>Si 500 \u20ac &lt;= total &lt;= 2000 \u20ac, se aplica un descuento del 30 %.</li> <li>Si total &gt; 2000 \u20ac, entonces se aplica un descuento del 50 %</li> </ul> <p>\u00bfCu\u00e1l de los siguientes fragmentos de programa asigna a la variable <code>desc</code> el descuento correcto? Indica \"Si\" o \"NO\" al lado de cada fragmento</p> <ol> <li>fragmento a</li> </ol> <pre><code>double desc = 0.0;\nif (total &lt;= 500)\n if (total &gt;= 2000) desc = 30.0;\n else desc = 50.0;\ntotal = total * desc / 100.0;\n</code></pre> <ol> <li>fragmento b</li> </ol> <pre><code>double desc = 0.0;\nif (total &gt;= 500)\n if (total &lt;= 2000) desc = 30.0;\n else desc = 50.0;\ntotal = total * desc / 100.0;\n</code></pre> <ol> <li>fragmento c</li> </ol> <pre><code>double desc = 0.0;\nif (total &lt;= 2000){\n if (total &gt;= 500) desc = 30.0;\n } else desc = 50.0;\ntotal = total * desc / 100.0;\n</code></pre> <ol> <li>fragmento d</li> </ol> <pre><code>double desc = 0.0;\nif (total &gt; 500)\n if (total &lt; 2000) desc = 30.0;\n else desc = 50.0;\ntotal = total * desc /100.0;\n</code></pre> </li> <li> <p>(Salida) \u00bfQu\u00e9 salida producir\u00e1 el siguiente fragmento de programa si la variable entera platos vale 1? \u00bfY si     vale 3? \u00bfY si vale 0?</p> <pre><code>switch (platos) {\n    case 1: System.out.println(\"\\nPrimer plato\");\n    case 2: System.out.println (\"\\nSegundo plato\");\n    case 3: System.out.println (\"\\nBebida\");\n            System.out.println (\"\\nPostre\");\n            break;\n    default: System.out.println(\"\\nCaf\u00e9\");\n}\n</code></pre> </li> <li> <p>(ValorP) Dados tres enteros a, b y c, y un booleano p, el siguiente an\u00e1lisis por casos establece el valor de p en funci\u00f3n de los valores de a, b y c:</p> <pre><code>si a &gt; b entonces p = cierto;\nsi a &lt; b entonces p = falso;\nsi a = b entonces \n    si a &gt; c entonces p = cierto;\n    si a &lt; c entonces p = falso;\n    si a = c entonces p = falso;\n</code></pre> <p>Se pide la traducci\u00f3n de dicho an\u00e1lisis por casos a Java mediante:</p> <ul> <li>Una \u00fanica instrucci\u00f3n <code>if</code> sin anidamientos.</li> <li>Una \u00fanica instrucci\u00f3n, de la forma <code>p = ...</code>, que utilice el operador ternario.</li> <li>Una \u00fanica instrucci\u00f3n, de la forma <code>p = ...</code> , sin sentencias <code>if</code> ni utilizar el operador ternario.</li> </ul> </li> </ol>"},{"location":"UD03/UD03_ejercicios_ES.html#trazas","title":"Trazas","text":"<p>Indica cual ser\u00e1 la salida producida por los siguientes programas, teniendo en cuenta los datos de entrada:</p> <ol> <li> <p>(Traza1) Datos de entrada: 2, 5</p> <ol> <li> <pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x+y;\n    System.out.println(a);\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,a;\n    x = tec.nextInt();\n    x = tec.nextInt();\n    a= x+x;\n    System.out.println(a);\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x+y;\n    a = x*y;\n    System.out.println(a);\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x+y;\n    System.out.println(a);\n    a = x*y;\n    System.out.println(a);\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x+y;\n    a = a+x+y;\n    a = a+a;\n    System.out.println(a);\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x;\n    a = doble(x);\n    System.out.format (\"%d%n%d%n%d\",x,y,a);\n}\npublic static int doble(int num){\n    return 2*num;\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args) {\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = x;\n    doble(a);\n    System.out.format(\"%d%n%d%n%d%n\",x,y,a);\n}\npublic static void doble(int x){\n x = 2*x;\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    Scanner tec = new Scanner(System.in);\n    int x,y,a;\n    x = tec.nextInt();\n    y = tec.nextInt();\n    a = calcular(y,x);\n    System.out.format(\"%d%n%d%n%d%n\",x,y,a);\n}\npublic static int calcular (int x, int y){\n return x-y;\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n Scanner tec = new Scanner(System.in);\n int x,y,a;\n x = tec.nextInt();\n y = tec.nextInt();\n y = calcular(x);\n a = calcular(y);\n System.out.format(\"%d%n%d%n%d%n\",x,y,a);\n}\npublic static int calcular (int x){\n return x*x;\n}\n</code></pre> </li> </ol> </li> <li> <p>(Traza2) Datos de entrada: 2, 5, 7</p> <pre><code>public static void main (String[] args){\n    int k,l,m,x,y,z;\n    k = tec.nextInt();\n    l = tec.nextInt();\n    m = tec.nextInt();\n    x = k+l;\n    if (x != m) {\n        y = k*l;\n        z = 0;\n    } else {\n        y = 0;\n        z = k-l;\n    }\n    if (z &lt; 0) z = -z;\n        System.out.format(\"%d%n%d%n%d%n\",x,y,z);\n}\n</code></pre> </li> <li> <p>(Traza3) Datos de entrada: 2, 5, 7, 9, -9, -7, -5, -2</p> <ol> <li> <pre><code>public static void main (String[] args){\n    int x,y;\n    x = 0;\n    y = tec.nextInt();\n    while(!(y&lt;0)) {\n        x+=-y;\n        y = tec.nextInt();\n        System.out.format(\"%d, %d\",x,y);\n    }\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    int x,y,z,a;\n    x = y = z = a = 0;\n    x = tec.nextInt();\n    while(x&gt;0) {\n        if (y &lt; z) y = tec.nextInt();\n        else z= tec.nextInt();\n        a = a-x+y*z;\n        x = tec.nextInt();\n        System.out.format(\"%d, %d, %d, %d\",a,x,y,z);\n    }\n}\n</code></pre> </li> </ol> </li> <li> <p>(Traza4) Datos de entrada: 5, 5, 7, -5, -4, 2</p> <ol> <li> <pre><code>public static void main (String[] args){\n    int x, y, a=0;\n    x = 0;\n    y = 99;\n    while (x &gt;= 0) {\n        x = tec.nextInt();\n        y = tec.nextInt();\n        a = a + x*y;\n    }\n    System.out.println(a);\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    int x, y, a=0;\n    x = 0;\n    y = 99;\n    while (x &gt;= 0 &amp;&amp; y &gt;= 0) {\n        x = tec.nextInt();\n        y = tec.nextInt();\n        a = a + x*y;\n    }\n    System.out.println(a);\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    int x, y, a=0;\n    x = 0;\n    y = 99;\n    while (x &gt;= 0 &amp;&amp; y &lt;= 0) {\n        x = tec.nextInt();\n        y = tec.nextInt();\n        a = a + x*y;\n    }\n    System.out.println(a);\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    int x, y, a=0;\n    x = 0;\n    y = 99;\n    while (x &gt;= 0 || y &gt;= 0) {\n        x = tec.nextInt();\n        y = tec.nextInt();\n        a = a + x*y;\n    }\n    System.out.println(a);\n}\n</code></pre> </li> </ol> </li> <li> <p>(Traza5) Datos de entrada: 5, 5, 7, -5, -4, 2</p> <pre><code>    public static void main(String[] args) {\n        int x, y;\n\n        x = 2;\n        y = 3;\n        while (x + y &gt; 0) {\n            x = tec.nextInt();\n            y = tec.nextInt();\n            x += y;\n            y = x - y;\n            System.out.format(\"%d, %d\", x, y);\n        }\n    }\n</code></pre> </li> <li> <p>(Traza6) Datos de entrada: 2, 4, 7, 5, -6, -3, 6, 6</p> <ol> <li> <pre><code>public static void main (String[] args){\n    int a,b;\n    do{\n        a = tec.nextInt();\n        b = tec.nextInt();\n        for (int i=a ; i&lt;=b ; i++)\n        System.out.println(i);\n    } while (a!=b)\n}\n</code></pre> </li> <li> <pre><code>public static void main (String[] args){\n    int a,b;\n    a=5;\n    b=5;\n    do {\n        for (int i=a ; i&lt;=b ; i++)\n        System.out.println(i);\n        a = tec.nextInt();\n        b = tec.nextInt();\n    } while (a!=b);\n}\n</code></pre> </li> </ol> </li> <li> <p>(Traza7) Datos de entrada: 3, 3, 5, 5, -3, -7, 2, 2</p> <pre><code>public static void main (String[] args){\n    int x,y;\n    do {\n        x = tec.nextInt();\n        b = tec.nextInt();\n    } while (x==y);\n    if (x&gt;y) {\n        x=y;\n        y=x;\n    }\n    System.out.format(\"%d %d %n\",x,y);\n}\n</code></pre> </li> <li> <p>(Traza8) Datos de entrada: 3, 2, 1, 4</p> <ol> <li><pre><code>public static void main (String[] args){\n    int a=0,b;\n    b = tec.nextInt();\n    for(int i=1;i&lt;=b,i++) a=(a+i)*i;\n    System.out.println(a);\n}\n</code></pre></li> </ol> </li> <li> <p>(Traza9) Datos de entrada: No aplica</p> <pre><code>public static void main (String[] args){\n    int x,y;\n    for (x=3;x&gt;=1;x--){\n        for(y=1;y&lt;=x;y++) System.out.println(x);\n        System.out.println();\n    }\n}\n</code></pre> </li> <li> <p>(Traza10) Datos de entrada: No aplica</p> <pre><code>public static void main (String[] args){\n    int x,y;\n    x=0;\n    y=0;\n    for (int i=1;i&lt;=2;i++) {\n        for (int j=1;j&lt;=3;j++) x=(x+i)*j;\n            y+=x;\n    }\n    System.out.println(\"%d %d %n\",x,y);\n}\n</code></pre> </li> <li> <p>(Traza11) Datos de entrada: 4, 5, 6, 7, 8, 9</p> <pre><code>public static void main (String[] args){\n    int x,y;\n    do x = tec.nextInt();\n    while (x&lt;=5);\n    y=0;\n    for (int i=12;i&gt;=x;i-=2) y+=(x*i);\n    System.out.println(y);\n}\n</code></pre> </li> </ol>"},{"location":"UD03/UD03_ejercicios_ES.html#excepciones","title":"Excepciones","text":"<ol> <li> <p>(Edades) Escribe un programa que solicite al usuario la edad de cinco personas y calcule la media. La edad  de una persona debe ser un valor entero comprendido en el rango [0,110]. Realiza tres versiones:</p> <ol> <li>Si se introduce mal la edad de una persona se vuelve a pedir la edad de esa persona.<ol> <li>Si se introduce mal la edad de una persona, el programa muestra un mensaje de error, no calcula la media y termina.</li> <li>Si se introduce mal la edad de una persona, el programa vuelve a solicitar la edad de las cinco personas (comienza el proceso).</li> </ol> </li> </ol> </li> <li> <p>(PosicionLetra) Escribe los programas que se indican a continuaci\u00f3n. Ejecuta cada programa haciendo que la entrada del usuario provoque una excepci\u00f3n. Anota el nombre de la excepci\u00f3n que se produce y cu\u00e1l es la jerarqu\u00eda de objetos de la que desciende:</p> <ol> <li> <p>Programa que solicita dos n\u00fameros enteros (a y b) y muestra el resultado de su divisi\u00f3n (a/b).</p> <ol> <li>El usuario introduce 0 como valor de b.</li> <li>El usuario introduce letras cuando el programa espera n\u00fameros enteros.</li> <li>El usuario introduce un n\u00famero real cuando el programa espera un entero.</li> </ol> </li> <li> <p>Programa que solicita al usuario su nombre y una posici\u00f3n dentro del nombre. Se muestra al usuario la letra del nombre cuya posici\u00f3n se ha indicado. Por ejemplo:</p> </li> </ol> <pre><code>Introduce nombre: Javi\nIntroduce posici\u00f3n: 2\nEn la posici\u00f3n 2 de Javi est\u00e1 la letra a\n</code></pre> <ol> <li>El usuario introduce una posici\u00f3n inv\u00e1lida.</li> </ol> </li> <li> <p>(PosicionLetraMain) Repite el ejercicio anterior utilizando m\u00e9todos y llam\u00e1ndolos desde el m\u00e9todo <code>main</code>:</p> <ol> <li>Un m\u00e9todo <code>dividir</code> que devuelva el cociente de dos n\u00fameros que recibe como par\u00e1metro</li> <li>Un m\u00e9todo <code>letraNombre</code> que, dados un String <code>nombre</code> y un entero <code>pos</code>, devuelva el car\u00e1cter del nombre que ocupa la posici\u00f3n indicada. Ejecuta los programas provocando errores (como en el ejercicio anterior) y observa los mensajes que se generan.</li> </ol> </li> <li> <p>(DividirArgs) Escribir un programa que divida dos n\u00fameros que se reciben en main en <code>args[0]</code> y <code>args[1]</code>. </p> <p>Ejemplo:</p> <pre><code>$ java dividir 10 5\n10/5 es igual a 2\n</code></pre> <p>Donde 10 y 5 son <code>args[0]</code> y <code>args[1]</code> respectivamente, es decir los par\u00e1metros con que llamamos al programa dividir.</p> </li> <li> <p>(PorqueError) Justifica por qu\u00e9 se produce error en el siguiente fragmento de c\u00f3digo</p> <pre><code>try {\n    System.out.println(\"Introduce edad: \");\n    int edad = tec.nextInt();\n    if (edad &gt;= 18) {\n        System.out.println(\"Mayor edad\");\n    } else {\n        System.out.println(\"Menor edad\");\n    }\n    System.out.println(\"Introduce nif\");\n    String nif = tec.next();\n    int numero = Integer.parseInt(nif.substring(0, nif.length() - 1));\n    char letra = nif.charAt(nif.length() - 1);\n    System.out.println(\"Numero: \" + numero);\n    System.out.println(\"Letra: \" + letra);\n} catch (Exception e){  \n    System.out.println(\"Deb\u00edas introducir un n\u00famero\");\n} catch (NumberFormatException e) {\n    System.out.println(\"El nif es incorrecto\");\n}\n</code></pre> </li> <li> <p>(SalidaPantalla) Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase y por qu\u00e9:</p> <pre><code>public class Uno {\n      private static int metodo()  {\n            int valor=0;\n            try  {\n                  valor = valor + 1;\n                  valor = valor + Integer.parseInt(\"42\") ;\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final del try: \" + valor);\n            } catch(NumberFormatException e)  {\n                  valor = valor + Integer.parseInt (\"42\");\n                  System.out.println(\"Valor al final del catch: \" + valor) ;\n            }\n            finally  {\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final de finally: \" + valor) ;\n            }\n            valor = valor + 1;\n            System.out.println (\"Valor antes del return: \" + valor) ;\n            return valor;\n      }\n\n      public static void main(String[] args)  {\n            try {\n                  System.out.println (metodo());\n            }  catch (Exception e)  {\n                  System.err.println(\"Excepcion en metodo()\") ;\n                  e.printStackTrace();\n            }\n      }\n}\n</code></pre> </li> <li> <p>(SalidaPantalla2) Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase y por qu\u00e9:</p> <pre><code>public class Dos {\n      private static int metodo()  {\n            int valor=0;\n            try   {\n                  valor = valor+1;\n                  valor = valor + Integer.parseInt(\"W\");\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final del try: \" + valor);\n            } catch(NumberFormatException e) {\n                  valor = valor + Integer.parseInt(\"42\");\n                  System.out.println(\"Valor al final del catch: \" + valor) ;\n            } finally {\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final de finally: \" + valor) ;\n            }\n            valor = valor + 1;\n            System.out.println (\"Valor antes del return: \" + valor) ;\n            return valor ;\n      }\n\n      public static void main (String[] args)  {\n            try  {\n                System .out.println(metodo());\n            }  catch (Exception e) {\n                  System.err.println(\"Excepcion en metodo() \");\n                  e.printStackTrace();\n            }\n      }\n}\n</code></pre> </li> <li> <p>(SalidaPantalla3) Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase y por qu\u00e9:</p> <pre><code>public class Tres {\n      private static int metodo()  {\n            int valor = 0;\n            try {\n                  valor = valor +1;\n                  valor = valor + Integer.parseInt(\"W\");\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final del try : \" + valor);\n            } catch (NumberFormatException e) {\n                  valor = valor + Integer.parseInt(\"W\");\n                  System.out.println(\"Valor al final del catch : \" + valor);\n            } finally {\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final de finally: \" + valor);\n            }\n            valor = valor + 1;\n            System.out.println (\"Valor antes del return: \" + valor);\n            return valor ;\n      }\n\n      public static void main (String[ ] args)\n      {\n            try {\n                  System.out.println(metodo ());\n            } catch (Exception e) {\n                  System.err.println(\"Excepcion en metodo()\") ;\n                  e.printStackTrace();\n            }\n      }\n}\n</code></pre> </li> <li> <p>(SalidaPantalla4) Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase y por qu\u00e9:</p> <pre><code>import java.io.*;\n\npublic class Cuatro\n{\n      private static int metodo()  {\n            int valor = 0;\n            try {\n                  valor = valor+1;\n                  valor = valor + Integer.parseInt(\"W\");\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final del try : \" + valor) ;\n                  throw new IOException();\n            } catch (IOException e)  {\n                  valor = valor + Integer.parseInt(\"42\");\n                  System.out.println(\"Valor al final del catch : \" + valor);\n            } finally {\n                  valor = valor + 1;\n                  System.out.println(\"Valor al final de finally: \" + valor);\n            }\n            valor = valor + 1;\n            System.out.println (\"Valor antes del return: \" + valor) ;\n            return valor ;\n      }\n\n      public static void main(String[] args)  {\n            try {\n                  System.out.println(metodo());\n            } catch (Exception e) {\n                  System.err.println(\"Excepcion en metodo()\");\n                  e.printStackTrace();\n            }\n      }\n}\n</code></pre> </li> <li> <p>(SalidaPantalla5) Indica qu\u00e9 se mostrar\u00e1 por pantalla cuando se ejecute esta clase:</p> <ol> <li>Si se ejecuta con <code>java Cinco casa</code></li> <li>Si se ejecuta con <code>java Cinco 0</code></li> <li>Si se ejecuta con <code>java Cinco 7</code></li> </ol> <pre><code>public class Cinco {\n   public static void main(String args[])  {\n      try  {\n            int a = Integer.parseInt(args[0]);\n            System.out.println(\"a = \" + a);\n            int b=42/a;\n            String c = \"hola\";\n            char d = c.charAt(50);\n      }  catch (ArithmeticException e) {\n         System.out.println(\"div por 0: \" + e);\n      }  catch (IndexOutOfBoundsException e) {\n         System.out.println(\"\u00cdndice del String fuera de l\u00edmites: \" + e);\n      }  finally {\n          System.out.println(\"Ejecuci\u00f3n de finally\");\n      }\n   }\n}\n</code></pre> </li> <li> <p>(SalidaPantalla6) Indica cu\u00e1l ser\u00e1 la salida del siguiente programa y por qu\u00e9</p> <pre><code>public class Seis {\n   public static void procA()  {\n       try {\n           System.out.println(\"dentro del procA\"); 2\n           throw new RuntimeException(\"demo\"); 3\n       } finally {\n           System.out.println(\"Finally del procA\"); 4\n       }\n    }\n\n   public static void procB() {\n       try  {\n           System.out.println(\"dentro del procB\"); 6\n           return; 7\n       } finally {\n           System.out.println(\"finally del procB\"); 8\n       }\n    }\n\n    public static void main(String args[])  {\n        try  {\n            procA(); 1\n        } catch(Exception e) {\n            procB(); 5\n        }\n     }\n}\n</code></pre> </li> <li> <p>(SalidaPantalla7) Indica cu\u00e1l ser\u00e1 la salida del siguiente programa y por qu\u00e9</p> <pre><code>public class Siete {\n   public static void metodo() {\n       try  {\n           throw new NullPointerException(\"demo\"); 2\n       } catch (NullPointerException e) {\n           System.out.println(\"capturada en m\u00e9todo\"); 3\n           throw e; 4\n       }\n    }\n\n    public static void main (String args[])  {\n        try   {\n            metodo(); 1\n        }  catch(NullPointerException e)  {\n           System.out.println(\"capturada en main \" + e); 5\n        }\n    }\n}\n</code></pre> </li> <li> <p>(DivisionPorCero)  Crea un programa que intente dividir dos n\u00fameros enteros ingresados por  el usuario y maneja la excepci\u00f3n de divisi\u00f3n por cero. Aqu\u00ed tienes la explicaci\u00f3n de porqu\u00e9 la divisi\u00f3n entre 0 no provoca excepciones para <code>double</code> y <code>float</code>.</p> </li> <li> <p>(CalculadoraExcepcion) Crea una clase <code>Calculadora</code> con un m\u00e9todo <code>dividir</code> que acepte dos n\u00fameros como argumentos y lance una excepci\u00f3n  personalizada si el divisor es cero. Captura la excepci\u00f3n en el m\u00e9todo  principal y muestra un mensaje de error.</p> </li> <li> <p>(EntradaNoNumerica) Escribe un programa que lea un n\u00famero entero desde el teclado. Si el  usuario ingresa algo que no es un n\u00famero entero, maneja la excepci\u00f3n y  muestra un mensaje de error.</p> </li> <li> <p>(RangoNumerico) Escribe un programa que solicite al usuario ingresar un n\u00famero entre 1 y 100. Si el n\u00famero est\u00e1 fuera de ese rango, lanza una excepci\u00f3n  personalizada y muestra un mensaje de error.</p> </li> <li> <p>(NumeroNegativo) Crea un m\u00e9todo que reciba dos n\u00fameros como argumentos y lance una  excepci\u00f3n personalizada si uno de los n\u00fameros es negativo. Captura esa  excepci\u00f3n en el m\u00e9todo principal y muestra un mensaje de error.</p> </li> <li> <p>(LongitudCadena) Dise\u00f1a un programa que lea una cadena de caracteres desde el teclado y, si la longitud de la cadena es mayor de 10 caracteres, lance una  excepci\u00f3n personalizada. Captura esa excepci\u00f3n y muestra un mensaje de  error.</p> </li> <li> <p>(TemperaturaInvalida) Implementa una clase <code>ConversorTemperatura</code> que tenga un m\u00e9todo para convertir grados Celsius a Fahrenheit. Si el  valor en grados Celsius es inferior a -273.15, lanza una excepci\u00f3n  personalizada. Captura la excepci\u00f3n y muestra un mensaje de error en el  m\u00e9todo principal.</p> </li> <li> <p>(EdadInvalida) Dise\u00f1a una clase <code>ValidadorEdad</code> que tenga un m\u00e9todo para validar si una persona tiene una edad v\u00e1lida  (por ejemplo, entre 0 y 120 a\u00f1os). Si la edad no es v\u00e1lida, lanza una  excepci\u00f3n personalizada y muestra un mensaje de error en el m\u00e9todo  principal.</p> </li> </ol>"},{"location":"UD03/UD03_ejercicios_ES.html#aserciones","title":"Aserciones","text":"<ol> <li>(Aserciones1) A partir del siguiente fragmento de c\u00f3digo, a\u00f1ade una linea debajo del comentario de la linea 4 que haga lo que se solicita:</li> </ol> <pre><code>class Main {\n    public static void main(String args[]) {\n        String[] finde = {\"viernes\", \"sabado\", \"domingo\"};\n        //A\u00f1ade una aserci\u00f3n que compruebe que solo hay dos dias en el fin de semana.\n\n        System.out.println(\"Solo hay \" + weekends.length + \"  dias en el fin de semana\");\n    }\n}\n</code></pre> <ol> <li>(Aserciones2) Escribe un m\u00e9todo llamado <code>validarEdad(int edad)</code> que acepte como par\u00e1metro la edad de una persona. Usa una aserci\u00f3n para verificar que la edad sea un valor positivo y menor que 150. Si la edad es negativa o extremadamente alta, la aserci\u00f3n deber\u00eda fallar.</li> </ol> <pre><code>// Ejemplo de uso:\nvalidarEdad(25); // Deber\u00eda pasar la aserci\u00f3n\nvalidarEdad(-5); // Deber\u00eda fallar la aserci\u00f3n\n</code></pre> <ol> <li>(Aserciones3) Crea un m\u00e9todo llamado <code>esPar(int numero)</code> que devuelva <code>true</code> si el n\u00famero es par y <code>false</code> en caso contrario. Luego, escribe una aserci\u00f3n para verificar que el resultado es <code>true</code> cuando el n\u00famero proporcionado es efectivamente par.</li> </ol> <pre><code>// Ejemplo de uso:\nassert esPar(4) : \"El n\u00famero 4 deber\u00eda ser par\";\nassert !esPar(3) : \"El n\u00famero 3 no deber\u00eda ser par\";\n</code></pre> <ol> <li>(Aserciones4) Implementa un m\u00e9todo llamado <code>dentroDeRango(int numero, int min, int max)</code> que devuelva <code>true</code> si el n\u00famero est\u00e1 en el rango <code>[min, max]</code> y <code>false</code> en caso contrario. Usa aserciones para probar que el m\u00e9todo devuelve <code>true</code> para un n\u00famero dentro del rango y <code>false</code> para uno fuera.</li> </ol> <pre><code>// Ejemplo de uso:\nassert dentroDeRango(5, 1, 10) : \"El n\u00famero 5 deber\u00eda estar en el rango [1, 10]\";\nassert !dentroDeRango(15, 1, 10) : \"El n\u00famero 15 no deber\u00eda estar en el rango [1, 10]\";\n</code></pre>"},{"location":"UD03/UD03_ejercicios_ES.html#actividades","title":"Actividades","text":"<ol> <li>(TransformarBucle) Transforma el siguiente bucle for en un bucle while:</li> </ol> <pre><code>for (i=5; i&lt;15; i++) { \n    System.out.println(i);\n}\n</code></pre> <ol> <li> <p>(NumerosPares) Programa que muestre por pantalla los 5 primeros n\u00fameros pares.</p> </li> <li> <p>(Rango200a300) Programa que muestre por pantalla del n\u00famero 200 al 300.</p> </li> <li> <p>(TablasMultiplicar) Programa que muestre en pantalla la tabla de multiplicar del 1 al 10 con el formato:</p> </li> </ol> <pre><code>...\nTabla del 2\n***********\n2 x 1 = 2\n2 x 2 = 4\n...\n2 x 10 = 20\n\nTabla del 3\n***********\n...\n</code></pre> <ol> <li> <p>(SinMultiplos5) Programa que muestre los n\u00fameros del 1 al 100 sin mostrar los m\u00faltiplos de 5.</p> </li> <li> <p>(CuadradoHastaNegativo) Leer un n\u00famero y mostrar su cuadrado, repetir el proceso hasta que se introduzca un n\u00famero negativo.</p> </li> <li> <p>(PositivoNegativo) Leer un n\u00famero e indicar si es positivo o negativo. El proceso se repetir\u00e1 hasta que se introduzca un 0.</p> </li> <li> <p>(ParImpar) Leer n\u00fameros hasta que se introduzca un 0. Para cada uno indicar si es par o impar.</p> </li> <li> <p>(ContarNumeros) Pedir n\u00fameros hasta que se teclee uno negativo, y mostrar cu\u00e1ntos n\u00fameros se han introducido.</p> </li> <li> <p>(AdivinarNumero) Realizar un juego para adivinar un n\u00famero <code>X</code>. Para ello pedir un n\u00famero <code>N</code>, y luego ir pidiendo n\u00fameros indicando \"mayor\" o \"menor\" seg\u00fan sea mayor o menor con respecto a <code>X</code>. El proceso termina cuando el usuario acierta.</p> </li> <li> <p>(SumaNumeros) Pedir n\u00fameros hasta que se teclee un 0, mostrar la suma de todos los n\u00fameros introducidos.</p> </li> <li> <p>(MediaNumeros) Pedir n\u00fameros hasta que se introduzca uno negativo, y calcular la media.</p> </li> <li> <p>(NumerosHastaN) Pedir un n\u00famero <code>N</code>, y mostrar todos los n\u00fameros del 1 al <code>N</code>.</p> </li> <li> <p>(De100a0) Escribir todos los n\u00fameros del 100 al 0 de 7 en 7.</p> </li> <li> <p>(Suma15Numeros) Pedir 15 n\u00fameros y escribir la suma total.</p> </li> <li> <p>(ProductoImpares) Dise\u00f1ar un programa que muestre el producto de los 10 primeros n\u00fameros impares.</p> </li> <li> <p>(Factorial) Pedir un n\u00famero y calcular su factorial (el factorial se representa con el simbolo  <code>!</code>).</p> <p>Aqu\u00ed tienes el factorial de los 5 primeros n\u00fameros enteros:</p> <pre><code>1! = 1\n2! = 2 * 1 = 2\n3! = 3 * 2 * 1 = 6\n4! = 4 * 3 * 2 * 1 = 24\n5! = 5 * 4 * 3 * 2 * 1 = 120\n</code></pre> <p>Ejemplo de ejecuci\u00f3n del programa:</p> <pre><code>Dime el n\u00famero para calcular su factorial: 5\nEl factorial de 5 es 120\n</code></pre> </li> <li> <p>(MediaPosNeg) Pedir 10 n\u00fameros. Mostrar la media de los n\u00fameros positivos, la media  de los n\u00fameros negativos y la cantidad de ceros.</p> </li> <li> <p>(Sueldos1000) Pedir 10 sueldos. Mostrar su suma y cuantos hay mayores de 1000\u20ac.</p> </li> <li> <p>(AlumnosEdadAltura) Dadas las edades y alturas de 5 alumnos, mostrar la edad y la estatura  media, la cantidad de alumnos mayores de 18 a\u00f1os, y la cantidad de  alumnos que miden m\u00e1s de 1.75.</p> </li> <li> <p>(TablaMultiplicar) Pide un n\u00famero (que debe estar entre 0 y 10) y mostrar la tabla de multiplicar de dicho n\u00famero.</p> </li> <li> <p>(AprobadosSuspensos) Dadas 6 notas, escribir la cantidad de alumnos aprobados y suspensos.</p> </li> <li> <p>(SueldoMaximo) Pedir un n\u00famero <code>N</code>, introducir <code>N</code> sueldos, y mostrar el sueldo m\u00e1ximo.</p> </li> <li> <p>(HayNegativo) Pedir 10 n\u00fameros, y mostrar al final si se ha introducido alguno negativo.</p> </li> <li> <p>(HaySuspenso) Pedir 5 calificaciones de alumnos y decir al final si hay alg\u00fan suspenso.</p> </li> <li> <p>(Multiplo3) Pedir 5 n\u00fameros e indicar si alguno es m\u00faltiplo de 3.</p> </li> <li> <p>(SaludoHorario) Realiza un programa que pida una hora por teclado y que muestre luego  buenos d\u00edas, buenas tardes o buenas noches seg\u00fan la hora. Se utilizar\u00e1n  los tramos de 6 a 12, de 13 a 20 y de 21 a 5. respectivamente. S\u00f3lo se  tienen en cuenta las horas, los minutos no se deben introducir por  teclado.</p> </li> <li> <p>(DiaSemana) Escribe un programa en que dado un n\u00famero del 1 a 7 escriba el correspondiente nombre del d\u00eda de la semana.</p> </li> <li> <p>(SalarioHorasExtras) Escribe un programa que calcule el salario semanal de un trabajador  teniendo en cuenta que las horas ordinarias (40 primeras horas de  trabajo) se pagan a 12 euros la hora. A partir de la hora 41, se pagan a 16 euros la hora.</p> </li> <li> <p>(MediaTresNotas) Realiza un programa que calcule la media de tres notas.</p> </li> <li> <p>(BoletinNotas) Ampl\u00eda el programa anterior para que diga la nota del bolet\u00edn  (insuficiente, suficiente, bien, notable o sobresaliente).</p> </li> <li> <p>(Horoscopo) Escribe un programa que nos diga el hor\u00f3scopo a partir del d\u00eda y el mes de nacimiento.</p> </li> <li> <p>(Cuestionario) Realiza un minicuestionario con 4 preguntas tipo test sobre las  asignaturas que se imparten en el curso. Cada pregunta acertada sumar\u00e1  un punto. El programa mostrar\u00e1 al final la calificaci\u00f3n obtenida.</p> </li> <li> <p>(NotaProgramacion) Calcula la nota de un trimestre de la asignatura Programaci\u00f3n. El  programa pedir\u00e1 las dos notas que ha sacado el alumno en los dos  primeros controles. Si la media de los dos controles da un n\u00famero mayor o igual a 5, el alumno est\u00e1 aprobado y se mostrar\u00e1 la media. En caso de  que la media sea un n\u00famero menor que 5, el alumno habr\u00e1 tenido que hacer el examen de recuperaci\u00f3n que se califica como apto o no apto, por  tanto se debe preguntar al usuario \u00bfCu\u00e1l ha sido el resultado de la  recuperaci\u00f3n? (apto/no apto). Si el resultado de la recuperaci\u00f3n es  apto, la nota ser\u00e1 un 5; en caso contrario, la nota ser\u00e1 1.</p> <p>Ejemplo 1:</p> <pre><code>Nota del primer control: 7 Nota del segundo control: 10\nTu nota de Programaci\u00f3n es 8.5\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Nota del primer control: 6 Nota del segundo control: 3\n\u00bfCu\u00e1l ha sido el resultado de la recuperaci\u00f3n? (apto/no apto): apto\nTu nota de Programaci\u00f3n es 5\n</code></pre> <p>Ejemplo 3:</p> <pre><code>Nota del primer control: 6 Nota del segundo control: 3\n\u00bfCu\u00e1l ha sido el resultado de la recuperaci\u00f3n? (apto/no apto): no apto\nTu nota de Programaci\u00f3n es 1\n</code></pre> </li> <li> <p>(Multiplos5For) Muestra los n\u00fameros m\u00faltiplos de 5 entre el 0 y el 100 utilizando un bucle <code>for</code>.</p> </li> <li> <p>(Multiplos5While) Muestra los n\u00fameros m\u00faltiplos de 5 entre el 0 y el 100 utilizando un bucle <code>while</code>.</p> </li> <li> <p>(Multiplos5DoWhile) Muestra los n\u00fameros m\u00faltiplos de 5 entre el 0 y el 100 utilizando un bucle <code>do while</code>.</p> </li> <li> <p>(ContarAtrasFor) Muestra los n\u00fameros del 320 al 160, contando de 20 en 20 hacia atr\u00e1s utilizando un bucle <code>for</code>.</p> </li> <li> <p>(ContarAtrasWhile) Muestra los n\u00fameros del 320 al 160, contando de 20 en 20 hacia atr\u00e1s utilizando un bucle <code>while</code>.</p> </li> <li> <p>(ContarAtrasDoWhile) Muestra los n\u00fameros del 320 al 160, contando de 20 en 20 utilizando un bucle <code>do-while</code>.</p> </li> <li> <p>(CajaFuerte) Realiza el control de  acceso a una caja fuerte. La combinaci\u00f3n ser\u00e1 un n\u00famero de 4 cifras. El  programa nos pedir\u00e1 la combinaci\u00f3n para abrirla. Si no acertamos, se nos mostrar\u00e1 el mensaje \"Lo siento, esa no es la combinaci\u00f3n\" y si acertamos se nos dir\u00e1 \"La caja fuerte se ha abierto satisfactoriamente\". Tendremos cuatro oportunidades para abrir la caja fuerte.</p> </li> <li> <p>(CuadradoCubo) Escribe un programa que muestre en tres columnas, el cuadrado y el cubo de los 5 primeros n\u00fameros enteros a partir de uno que se introduce por  teclado.</p> </li> <li> <p>(Potencia) Escribe un programa que pida una base y un exponente (entero positivo) y que calcule la potencia. (Sin usar <code>Math</code>)</p> </li> <li> <p>(Suma100Siguientes) Realiza un programa que sume los 100 n\u00fameros siguientes a un n\u00famero  entero y positivo introducido por teclado. Se debe comprobar que el dato introducido es correcto (que es un n\u00famero positivo).</p> </li> <li> <p>(NumerosEntre7) Escribe un programa que obtenga los n\u00fameros enteros comprendidos entre  dos n\u00fameros introducidos por teclado y validados como distintos, el  programa debe empezar por el menor de los enteros introducidos e ir  incrementando de 7 en 7.</p> </li> <li> <p>(EstadisticasNumeros) Realiza un programa que vaya pidiendo n\u00fameros hasta que se introduzca  un numero negativo y nos diga cuantos n\u00fameros se han introducido, la  media de los impares y el mayor de los pares. El n\u00famero negativo s\u00f3lo se utiliza para indicar el final de la introducci\u00f3n de datos pero no se  incluye en el c\u00f3mputo.</p> </li> <li> <p>(SumaHasta10000) Escribe un programa que permita ir introduciendo una serie  indeterminada de n\u00fameros mientras su suma no supere el valor 10000.  Cuando esto \u00faltimo ocurra, se debe mostrar el total acumulado, el  contador de los n\u00fameros introducidos y la media.</p> </li> <li> <p>(Multiplos3) Escribe un programa que muestre, cuente y sume los m\u00faltiplos de 3 que hay entre 1 y un n\u00famero le\u00eddo por teclado.</p> </li> <li> <p>(PrecioFinal) Escribe un programa que calcule el precio final de un producto seg\u00fan su base imponible (precio antes de impuestos), el tipo de IVA aplicado  (general, reducido o superreducido) y el c\u00f3digo promocional. Los tipos  de IVA general, reducido y superreducido son del 21%, 10% y 4%  respectivamente. Los c\u00f3digos promocionales pueden ser nopro, mitad,  meno5 o 5porc que significan respectivamente que no se aplica promoci\u00f3n, el precio se reduce a la mitad, se descuentan 5 euros o se descuenta el 5%.</p> <p>Ejemplo:</p> <pre><code>Introduzca la base imponible: 25\nIntroduzca el tipo de IVA (general, reducido o superreducido): reducido\nIntroduzca el c\u00f3digo promocional (nopro, mitad, meno5 o 5porc): mitad\nBase imponible 25.00\nC\u00f3d. promo. (mitad): -12.50\nIVA (10%) 1.25\nPrecio con IVA 13.75\nTOTAL 13.75\n</code></pre> </li> <li> <p>(AnioBisiesto) Pedir un a\u00f1o e indicar  si es bisiesto, teniendo en cuenta que son bisiestos todos los a\u00f1os  divisibles por 4, excluyendo los que sean divisibles por 100, pero no  los que sean divisibles por 400.</p> <p>En pseudoc\u00f3digo se calcular\u00eda as\u00ed:</p> <pre><code>SI ((a\u00f1o divisible por 4) Y ((a\u00f1o no divisible por 100) O (a\u00f1o divisible por 400)))ENTONCES\n    es bisiesto\nSINO\n    no es bisiesto\nFIN_SI\n</code></pre> </li> <li> <p>(NumeroALetras) Pedir un n\u00famero de 20 a 99 y mostrarlo escrito. Por ejemplo, para 56 mostrar: cincuenta y seis.</p> </li> <li> <p>(VehiculoIVA) Introducir datos de un veh\u00edculo (marca, modelo y precio). Devolver el  precio con IVA del veh\u00edculo. Controlar con Excepciones que el precio del veh\u00edculo introducido son n\u00fameros y que el c\u00e1lculo de Precio Final con  IVA no devuelva error.</p> </li> <li> <p>(NotaMediaAlumnos) Introducir c\u00f3digos de alumnos, nombre y nota hasta que se introduzca un c\u00f3digo de alumno negativo. Devolver la nota media de los alumnos la  clase. Controlar con Excepciones que las notas introducidas son n\u00fameros y que si no se introducen alumnos el c\u00e1lculo de la media no devuelva  error.</p> </li> <li> <p>(ImporteFinal) Crear una funci\u00f3n o m\u00e9todo llamado <code>impFinal</code>, que calcule el importe final de una compra. Los par\u00e1metros que se le pasar\u00e1n a la funci\u00f3n son el <code>precio</code> del producto, las <code>cantidad de unidades</code> compradas, el <code>porcentaje de iva</code> y el <code>porcentaje de descuento</code>. El m\u00e9todo principal debe pedir por teclado el precio del producto, las  unidades adquiridas, el porcentaje de IVA y el porcentaje de descuento y devolver el <code>Importe final</code> de la Factura.</p> </li> <li> <p>(CapacidadDisco) Crear una funci\u00f3n que calcule la capacidad de un disco. La capacidad se calcula multiplicando los Cabezales o pistas del disco por los  Cilindros por los Sectores por Tama\u00f1o de Sector. El m\u00e9todo principal  debe pedir por teclado los Cabezales o Pistas del disco, los Cilindros,  Sectores y Tama\u00f1o de Sector y devolver la Capacidad del disco en  Gigabytes.</p> <p>Por ejemplo: Calcular la  capacidad de un disco teniendo en cuenta que dispone de 10 Cabezales o  Pistas, 65535 Cilindros, 1024 Sectores/pista y un Tama\u00f1o de 512  bytes/sector:</p> <p>Capacidad del disco = 10 * 65535 * 1024 * 512 = 343597383680 bytes</p> <p>343597383680 bytes / 1024 / 1024 / 1024 = 320 Gbytes</p> </li> <li> <p>(MayorDeTres) Funci\u00f3n que devuelva el mayor de tres n\u00fameros. El m\u00e9todo principal debe pedir por teclado los tres n\u00fameros introducidos por el teclado. La  funci\u00f3n debe recibir como par\u00e1metros los tres n\u00fameros y devolver el  mayor.</p> </li> </ol>"},{"location":"UD04/UD04_ES.html","title":"Estructuras de datos Arrays y matrices. Recursividad","text":""},{"location":"UD04/UD04_ES.html#estructuras-de-datos-arrays-y-matrices-recursividad","title":"Estructuras de datos: Arrays y matrices. Recursividad.","text":""},{"location":"UD04/UD04_ES.html#introduccion","title":"Introducci\u00f3n","text":"<p>A menudo, para resolver problemas de programaci\u00f3n, no basta con disponer de sentencias condicionales o iterativas como las que hemos visto (<code>if</code>, <code>switch</code>, <code>while</code>, <code>for</code>, ...).</p> <p>Tambi\u00e9n es necesario disponer de herramientas para organizar la informaci\u00f3n de forma adecuada: las estructuras de datos.</p> <p>Los arrays son una estructura de datos fundamental, que est\u00e1 disponible en la mayor\u00eda de lenguajes de programaci\u00f3n y que nos permitir\u00e1 resolver problemas que, sin ellos, resultar\u00edan dif\u00edciles o tediosos de solucionar.</p> <p>Imaginemos, por ejemplo, que queremos leer los datos de pluviosidad de cada uno de los 31 d\u00edas de un mes. Posteriormente se desea mostrar la pluviosidad media del mes y en cu\u00e1ntos d\u00edas las lluvias superaron la media.</p> <p>Con las herramientas de que disponemos hasta ahora, nos ver\u00edamos obligados a declarar 31 variables <code>double</code>, una para cada d\u00eda, y a elaborar un largo programa que leyera los datos y contara cuales superan la media. Con el uso de arrays, problemas como este tienen una soluci\u00f3n f\u00e1cil y corta.</p>"},{"location":"UD04/UD04_ES.html#arrays","title":"Arrays","text":"<p>Un array es una colecci\u00f3n de elementos del mismo tipo, que tienen un nombre o identificador com\u00fan.</p> <p>Se puede acceder a cada componente del array de forma individual para consultar o modificar su valor. El acceso a los componentes se realiza mediante un sub\u00edndice, que viene dado por la posici\u00f3n que ocupa el elemento dentro del array.</p> <p>En la siguiente figura se muestra un array <code>c</code> de enteros:</p> <p></p> <p>El primer sub\u00edndice de un array es el cero. El \u00faltimo sub\u00edndice es la longitud del array menos uno.</p> <p>El n\u00famero de componentes de un array se establece inicialmente al crearlo y no es posible cambiarlo de tama\u00f1o. Es por esto que reciben el nombre de estructuras de datos est\u00e1ticas.</p>"},{"location":"UD04/UD04_ES.html#declaracion-y-creacion","title":"Declaraci\u00f3n y creaci\u00f3n","text":"<p>Para poder utilizar un array hay que declararlo:</p> <pre><code>tipo nombreVariable[];\n</code></pre> <p>o</p> <pre><code>tipo[] nombreVariable;\n</code></pre> <p>En la declaraci\u00f3n se establece el nombre de la variable y el tipo de los componentes. Por ejemplo:</p> <pre><code>double lluvia1[]; // lluvia1 es un array de double\ndouble[] lluvia2;  // lluvia2 es un array de double &lt;== Esta es la declaraci\u00f3n recomendada, el [] siempre acompa\u00f1ando al tipo.\n</code></pre> <p>En la declaraci\u00f3n anterior no se ha establecido el n\u00famero de componentes. El n\u00famero de componentes se indica en la creaci\u00f3n, que se hace utilizando el operador <code>new</code>:</p> <pre><code>lluvia1 = new double[31];\n</code></pre> <p>Con esta instrucci\u00f3n se establece que el n\u00famero de elementos del array <code>lluvia</code> son 31, reservando con ello el compilador espacio consecutivo para 31 componentes individuales de tipo <code>double</code>.</p> <p>Las dos instrucciones anteriores se pueden unir en una sola:</p> <pre><code>// tipo[] nombreVariable = new tipo[numElementos];\ndouble[] lluvia2 = new double[31];\n</code></pre> <p>El valor mediante el cual se define el n\u00famero de elementos del array tiene que ser una expresi\u00f3n entera, pero no tiene por qu\u00e9 ser un literal como en el ejemplo anterior. El tama\u00f1o de un array se puede establecer durante la ejecuci\u00f3n, como en el siguiente ejemplo:</p> <pre><code>// usamos un array para almacenar las edades de un grupo de personas\n// la variable numPersonas contiene el n\u00famero de personas del grupo\n// y se asigna en tiempo de ejecuci\u00f3n\nScanner teclado = new Scanner(System.in);\nSystem.out.print(\"Introduce cuantos elementos debe tener el array edad[]:\");\nint numPersonas = teclado.nextInt();\nint[] edad = new int[numPersonas];\n</code></pre>"},{"location":"UD04/UD04_ES.html#acceso-a-los-componentes","title":"Acceso a los componentes","text":"<p>Como ya hemos dicho, el acceso a los componentes del array se realiza mediante sub\u00edndices. La sintaxis para referirse a un componente del array es la siguiente:</p> <pre><code>nombreVariable[sub\u00edndice]\n</code></pre> <p>Tras declarar el array <code>lluvia</code>, se dispone de 31 componentes de tipo <code>double</code> numeradas desde la 0 a la 30 y accesibles mediante la notaci\u00f3n: <code>lluvia[0]</code> (componente primera), <code>lluvia[1]</code> (componente segunda) y as\u00ed sucesivamente hasta la \u00faltima componente: <code>lluvia[30]</code>.</p> <p>Con cada una de las componentes del array de <code>double</code> lluvia es posible efectuar todas las operaciones que podr\u00edan realizarse con variables individuales de tipo <code>double</code>, por ejemplo, dadas las declaraciones anteriores, las siguientes instrucciones ser\u00edan v\u00e1lidas:</p> <pre><code>int[] edad = new int[3];\nSystem.out.print(\"Introduce el dato para el componente 0: \");\nedad[0] = teclado.nextInt(); //25\nSystem.out.println(\"El componente [0] vale \" + edad[0]);\nedad[1] = edad[0] + 1;\nedad[2] = edad[0] + edad[1];\nedad[2]++;\nSystem.out.println(\"El componente [1] vale \" + edad[1]); //26\nSystem.out.println(\"El componente [2] vale \" + edad[2]); //52\n</code></pre> <p>Adem\u00e1s, hay que tener en cuenta que el sub\u00edndice ha de ser una expresi\u00f3n entera, por lo que tambi\u00e9n son v\u00e1lidas expresiones como las siguientes:</p> <pre><code>int i;\n...\nedad[i] = edad[i + 1];\nedad[i + 2] = edad[i];\n</code></pre>"},{"location":"UD04/UD04_ES.html#inicializacion","title":"Inicializaci\u00f3n","text":"<p>Cuando creamos un array, Java inicializa autom\u00e1ticamente sus componentes:</p> <ul> <li>Con 0 cuando los componentes son de tipo num\u00e9rico.</li> <li>Con false cuando los componentes son <code>boolean</code>.</li> <li>Con el car\u00e1cter de ASCII 0, cuando los componentes son <code>char</code>.</li> <li>Con <code>null</code> cuando son objetos (<code>Strings</code>, etc)</li> </ul> <p>Aun as\u00ed, es probable que estos no sean los valores con los que queremos inicializar el array. Tenemos entonces dos posibilidades:</p> <ul> <li>Acceder individualmente a los componentes del array para darles valor:</li> </ul> <pre><code>int edad2[] = new int[10];\nedad2[0] = 25;\nedad2[1] = 10;\n...\nedad2[9] = 12;\n</code></pre> <ul> <li>O inicializar el array en la declaraci\u00f3n de la siguiente forma:</li> </ul> <pre><code>int edad3[] = {25,10,23,34,65,23,1,67,54,12};\n</code></pre> <p>Es decir, enumerando los valores con los que se quiere inicializar cada componente, encerrados entre llaves. De hacerlo as\u00ed, no hay que crear el array con el operador <code>new</code>. Java crea el array con tantos componentes como valores hemos puesto entre llaves. Adem\u00e1s no es necesario indicar el n\u00famero de elementos del mismo.</p>"},{"location":"UD04/UD04_ES.html#un-ejemplo-practico","title":"Un ejemplo pr\u00e1ctico","text":"<p>Ya hemos resuelto en temas anteriores el problema de devolver el nombre de un mes dado su n\u00famero. </p> <p>Vamos a resolverlo ahora ayud\u00e1ndonos de arrays:</p> <pre><code>public static String nombreMes(int mes){\n    String[] nombre = {\"enero\", \"febrero\", \"marzo\", \"abril\",\n                       \"mayo\", \"junio\", \"julio\",\"agosto\",\n                       \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"};\n    return nombre[mes-1];\n}\n</code></pre> <p>El m\u00e9todo define un array de <code>String</code> que se inicializa con los nombres de los doce meses. La primera componente del array (<code>nombre[0]</code>) se deja vac\u00eda, de forma que enero quede almacenado en <code>nombre[1]</code>. Devolver el nombre del mes indicado se reduce a devolver el componente del array cuyo n\u00famero indica el par\u00e1metro mes: <code>nombre[mes]</code></p>"},{"location":"UD04/UD04_ES.html#arrays-como-parametros-paso-de-parametros-por-referencia","title":"Arrays como par\u00e1metros. Paso de par\u00e1metros por referencia.","text":"<p>Hasta el momento s\u00f3lo se ha considerado el paso de par\u00e1metros por valor; de manera que cualquier cambio que el m\u00e9todo realice sobre los par\u00e1metros formales no modifica el valor que tiene el par\u00e1metro real con el que se llama al m\u00e9todo. En java, todos los par\u00e1metros de tipo simple (<code>byte</code>, <code>short</code>, <code>int</code>, ...) se pasan por valor.</p> <p>Por el contrario, los arrays no son variables de tipo primitivo, y como cualquier otro objeto, se pasa siempre por referencia.</p> <p>En el paso de par\u00e1metros por referencia lo que se pasa en realidad al m\u00e9todo es la direcci\u00f3n de la variable u objeto. Es por esto que el papel del par\u00e1metro formal es el de ser una referencia al par\u00e1metro real; la llamada al m\u00e9todo no provoca la creaci\u00f3n de una nueva variable. De esta forma, las modificaciones que el m\u00e9todo pueda realizar sobre estos par\u00e1metros se realizan efectivamente sobre los par\u00e1metros reales. En este caso, ambos par\u00e1metros (formal y real) se pueden considerar como la misma variable con dos nombres, uno en el m\u00e9todo llamante y otro en el llamado o invocado, pero hacen referencia a la misma posici\u00f3n de memoria.</p> <p>En el siguiente ejemplo, la variable <code>a</code>, de tipo primitivo, no cambia de valor tras la llamada al m\u00e9todo. Sin embargo la variable <code>v</code>, array de enteros, si se ve afectada por los cambios que se han realizado sobre ella en el m\u00e9todo:</p> <pre><code>public static void main(String[] args){\n    int a = 1;\n    int[] v = {1,1,1};\n    metodo(v,a); //Pasar un array como par\u00e1metro\n    System.out.println(a); // Muesta 1\n    System.out.println(v[0]); // Muestra 2\n}\n\npublic static void metodo(int[] x, int y){ //recibir un array como par\u00e1metro\n    x[0]++;\n    y++;\n}\n</code></pre> <p>Como podemos observar, para pasar un array a un m\u00e9todo, simplemente usamos el nombre de la variable en la llamada. En la cabecera del m\u00e9todo, sin embargo, tenemos que utilizar los corchetes <code>[]</code> para indicar que el par\u00e1metro es un array.</p>"},{"location":"UD04/UD04_ES.html#el-atributo-length","title":"El atributo <code>length</code>","text":"<p>Todas las variables de tipo array tienen un atributo <code>length</code> que permite consultar el n\u00famero de componentes del array. Su uso se realiza posponiendo <code>.length</code> al nombre de la variable:</p> <pre><code>double[] estatura = new double[25];\n...\nSystem.out.println(estatura.length); // Mostrar\u00e1 por pantalla: 25\n</code></pre>"},{"location":"UD04/UD04_ES.html#string-args-en-el-main","title":"<code>String[] args</code> en el <code>main</code>","text":"<p>El m\u00e9todo <code>main</code> puede recibir argumentos desde la l\u00ednea de comandos. Para ello, el m\u00e9todo <code>main</code> recibe un par\u00e1metro (<code>String args[]</code>). Vemos que se trata de un array de <code>Strings</code>. El uso del atributo <code>length</code> nos permite comprobar si se ha llamado al programa de forma correcta o no. Veamos un ejemplo para saber si es Navidad. Se habr\u00e1 llamado correctamente si el array <code>args</code> contiene dos componentes (d\u00eda, mes):</p> <pre><code>public class EsNavidad {\n    public static void main(String[] args) {\n        if (args.length != 2) {\n            System.out.println(\"ERROR:\");\n            System.out.println(\"Llame al programa de la siguiente forma:\");\n            System.out.println(\"java EsNavidad dia mes\");\n        } else {\n            // args[0] es el d\u00eda\n            // args[1] es el mes\n            if ((Integer.valueOf(args[0]) == 25) &amp;&amp; (Integer.valueOf(args[1]) == 12)) {\n                    System.out.println(\"ES NAVIDAD!\");\n            } else {\n                System.out.println(\"No es navidad.\");\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"UD04/UD04_ES.html#problemas-de-recorrido-busqueda-y-ordenacion","title":"Problemas de recorrido, b\u00fasqueda y ordenaci\u00f3n","text":"<p>Muchos de los problemas que se plantean cuando se utilizan arrays pueden clasificarse en tres grandes grupos de problemas gen\u00e9ricos: los que conllevan el recorrido de un array, los que suponen la b\u00fasqueda de un elemento que cumpla cierta caracter\u00edstica dentro del array, y los que implican la ordenaci\u00f3n de los elementos del array.</p> <p>La importancia de este tipo de problemas proviene de que surgen, no s\u00f3lo en el \u00e1mbito de los arrays, sino tambi\u00e9n en muchas otras organizaciones de datos de uso frecuente (como las listas, los ficheros, etc.). Las estrategias b\u00e1sicas de resoluci\u00f3n que se ver\u00e1n a continuaci\u00f3n son tambi\u00e9n extrapolables a esos otros \u00e1mbitos.</p>"},{"location":"UD04/UD04_ES.html#problemas-de-recorrido","title":"Problemas de recorrido","text":"<p>Se clasifican como problemas de recorrido aquellos que para su resoluci\u00f3n exigen alg\u00fan tratamiento de todos elementos del array. El orden para el tratamiento de estos elementos puede organizarse de muchas maneras: ascendentemente, descendentemente, ascendente y descendente de forma simult\u00e1nea, etc.</p> <p>En el siguiente ejemplo se muestra un m\u00e9todo en java para devolver, a partir de un array que contiene la pluviosidad de cada uno de los d\u00edas de un mes, la pluviosidad media de dicho mes. Para ello se recorren ascendentemente los componentes del array para ir sum\u00e1ndolos:</p> <pre><code>public static double pluviosidadMediaAscendente(double[] lluvia){\n    double suma = 0;\n    //Recorremos el array ascendentemente\n    for (int i = 0; i&lt;lluvia.length; i++){\n        suma += lluvia[i];\n    }\n    double media = suma / lluvia.length;\n    return media;\n}\n</code></pre> <p>La forma de recorrer el array ascendentemente es, como vemos, utilizar una variable entera (<code>i</code> en nuestro caso) que act\u00faa como sub\u00edndice del array. \u00c9ste sub\u00edndice va tomando los valores <code>0</code>, <code>1</code>, ..., <code>lluvia.length-1</code> en el seno de un bucle, de manera que se accede a todos los componentes del array para sumarlos.</p> <p>El mismo problema resuelto con un recorrido descendente ser\u00eda como sigue:</p> <pre><code>public static double pluviosidadMediaDescendente(double[] lluvia){\n    double suma = 0;\n    //Recorremos el array descendentemente\n    for (int i = lluvia.length-1; i&gt;=0; i--){\n        suma += lluvia[i];\n    }\n    double media = suma / lluvia.length;\n    return media;\n}\n</code></pre> <p>Tambi\u00e9n realizamos un recorrido para obtener la pluviosidad m\u00e1xima del mes (la cantidad de lluvia m\u00e1s grande ca\u00edda en un d\u00eda), es decir, el elemento m\u00e1s grande del array:</p> <pre><code>public static double pluviosidadMaxima(double[] lluvia){\n    // Suponemos que la pluviosidad m\u00e1xima se produjo el primer d\u00eda\n    double max = lluvia[0];\n    //Recorremos el array desde la posici\u00f3n 1, comprobando si hay una pluviosidad mayor\n    for (int i = 1; i&lt;lluvia.length; i++)\n        if(lluvia[i] &gt; max){\n            max = lluvia[i];\n        } \n    return max;\n}\n</code></pre>"},{"location":"UD04/UD04_ES.html#bucle-for-each-for-loop","title":"Bucle for each (for-loop)","text":"<p>En el tema anterior vimos alg\u00fan tipo de bucles que explicariamos cuandos los pudiesemos utilizar, en este grupo estan los bucles for each o for-loops. Aqu\u00ed tenemos un ejemplo de recorrido de un array con la sintaxis que ya conocemos:</p> <pre><code>int[] array = { 1, 2, 3, 4, 5, 6, 7, 8 };\nfor (int i = 0; i &lt; array.length; i++) {\n    System.out.print(array[i] + \" \");\n}\n</code></pre> <p>el anterior fragmento genera la siguiente salida:</p> <pre><code>1 2 3 4 5 6 7 8\n</code></pre> <p>Este mismo c\u00f3digo se puede escribir de la siguiente manera:</p> <pre><code>int[] array = { 1, 2, 3, 4, 5, 6, 7, 8 };\nfor (int i : array) { //mentalmente podemos traducir por:\n    //\"para cada entero \"i\" que encontremos en el array\"\n    System.out.print(i + \" \");\n}\n</code></pre> <p>la salida seguir\u00e1 siendo la misma:</p> <pre><code>1 2 3 4 5 6 7 8\n</code></pre> <p>Ojo! con el segundo m\u00e9todo no tenemos acceso a la posici\u00f3n o \u00edndice del array, este m\u00e9todo no servir\u00eda para m\u00e9todos en los que necesitamos conocer la posici\u00f3n o utilizarla de alguna manera.</p> <p>Traducimos el m\u00e9todo de <code>pluviosidadMedia</code> con un bucle <code>loop</code>: </p><pre><code>public static double pluviosidadMediaLoop(double[] lluvia){\n    double suma = 0;\n    //Recorremos el array con el loop\n    for (int i : lluvia){\n        suma += i;\n    }\n    double media = suma / lluvia.length;\n    return media;\n}\n</code></pre>"},{"location":"UD04/UD04_ES.html#problemas-de-busqueda","title":"Problemas de b\u00fasqueda","text":"<p>Se denominan problemas de b\u00fasqueda a aquellos que, de alguna manera, implican determinar si existe alg\u00fan elemento del array que cumpla una propiedad dada. Con respecto a los problemas de recorrido presentan la diferencia de que no es siempre necesario tratar todos los elementos del array: el elemento buscado puede encontrarse inmediatamente, encontrarse tras haber recorrido todo el array, o incluso no encontrarse.</p>"},{"location":"UD04/UD04_ES.html#busqueda-ascendente","title":"B\u00fasqueda ascendente","text":"<p>Consideremos, por ejemplo, el problema de encontrar cual fue el primer d\u00eda del mes en que no llovi\u00f3 nada, es decir, el primer elemento del array con valor cero:</p> <pre><code>//Devolveremos el sub\u00edndice del primer componente del array cuyo valor es cero.\n// Si no hay ning\u00fan d\u00eda sin lluvias devolveremos -1\npublic static int primerDiaSinLluvia1(double[] lluvia){\n    int i=0 ;\n    boolean encontrado = false ;\n    while (i&lt;lluvia.length &amp;&amp; !encontrado){\n        if (lluvia[i] == 0) encontrado = true ;\n        else i++ ;\n    }\n    if (encontrado) return i ;\n    else return -1 ;\n}\n</code></pre> <p>Hemos utilizado el esquema de b\u00fasqueda: Definimos una variable <code>boolean</code> que indica si hemos encontrado o no lo que buscamos. El bucle se repite mientras no lleguemos al final del array y no hayamos encontrado un d\u00eda sin lluvias.</p> <p>Tambi\u00e9n es posible una soluci\u00f3n sin utilizar la variable <code>boolean</code>:</p> <pre><code>public static int primerDiaSinLluvia2(double[] lluvia){\n    int i=0 ;\n    while (i&lt;lluvia.length &amp;&amp; lluvia[i] != 0)\n        i++;\n    if (i == lluvia.length) return -1 ;\n    else return i;\n}\n</code></pre> <p>En este caso el sub\u00edndice <code>i</code> se incrementa mientras estemos dentro de los l\u00edmites del array y no encontremos un d\u00eda con lluvia <code>0</code>. Al finalizar el bucle hay que comprobar por cual de las dos razones finaliz\u00f3: \u00bfSe encontr\u00f3 un d\u00eda sin lluvias o se recorri\u00f3 todo el array sin encontrar ninguno? En esta comprobaci\u00f3n es importante no acceder al array si existe la posibilidad de que el sub\u00edndice est\u00e9 fuera de los l\u00edmites del array. La siguiente comprobaci\u00f3n ser\u00eda incorrecta:</p> <pre><code>if (lluvia[i] == 0) return i;\nelse return -1;\n</code></pre> <p>ya que, si se ha finalizado el bucle sin encontrar ning\u00fan d\u00eda sin lluvia, <code>i</code> valdr\u00e1 <code>lluvia.length</code>, que no es una posici\u00f3n v\u00e1lida del array, y al acceder a <code>lluvia[i]</code> se producir\u00e1 la excepci\u00f3n <code>ArrayIndexOutOfBoundsException</code> (\u00edndice del array fuera de los l\u00edmites) </p> <p>Por otra parte, el mismo problema se puede resolver utilizando la sentencia <code>for</code>, como hemos hecho otras veces. Sin embargo la soluci\u00f3n parece menos intuitiva porque el cuerpo del <code>for</code> quedar\u00eda vac\u00edo:</p> <pre><code>public static int primerDiaSinLluvia3(double[] lluvia){\n    int i;\n    for (i=0; i&lt;lluvia.length &amp;&amp; lluvia[i] != 0; i++) /*Nada*/ ;\n    if (i == lluvia.length) return -1 ;\n    else return i;\n}\n</code></pre> <p>Otra opci\u00f3n m\u00e1s:</p> <pre><code>public static int primerDiaSinLluvia4(double[] lluvia){\n    int i=0 ;\n    while (i&lt;lluvia.length){\n        if (lluvia[i++] == 0) return i ;\n    }\n    return -1 ;\n}\n</code></pre>"},{"location":"UD04/UD04_ES.html#busqueda-descendente","title":"B\u00fasqueda descendente","text":"<p>En los ejemplos de b\u00fasqueda anteriores hemos iniciado la b\u00fasqueda en el elemento cero y hemos ido ascendiendo hasta la \u00faltima posici\u00f3n del array. A esto se le llama b\u00fasqueda ascendente.</p> <p>Si queremos encontrar el \u00faltimo d\u00eda del mes en que no llovi\u00f3 podemos realizar una b\u00fasqueda descendente, es decir, partiendo del \u00faltimo componente del array y decrementando progresivamente el sub\u00edndice hasta llegar a la posici\u00f3n cero o hasta encontrar lo buscado:</p> <pre><code>public static int ultimoDiaSinLluvia(double[] lluvia){\n    int i=lluvia.length-1;\n    boolean encontrado = false ;\n    while (i&gt;=0 &amp;&amp; !encontrado){\n        if (lluvia[i] == 0) encontrado = true ;\n        else i-- ;\n    }\n    if (encontrado) return i ;\n    else return -1 ;\n}\n</code></pre>"},{"location":"UD04/UD04_ES.html#busqueda-en-un-array-ordenado-busqueda-binaria","title":"B\u00fasqueda en un array ordenado: b\u00fasqueda binaria","text":"<p>Suponga que una amiga apunta un n\u00famero entre el 0 y el 99 en una hoja de papel y vosotros deb\u00e9is adivinarlo. Cada vez que conteste, le dir\u00e1 si el valor que ha dicho es mayor o menor que el que ha de adivinar. \u00bfQu\u00e9 estrategia seguir\u00eda para lograrlo? Hay que pensar un algoritmo a seguir para resolver este problema.</p> <p>Una aproximaci\u00f3n muy ingenua podr\u00eda ser ir diciendo todos los valores uno por uno, empezando por 0. Est\u00e1 claro que cuando llegue al 99 lo habr\u00e9is adivinado. En el mejor caso, si hab\u00eda escrito el 0, acertar\u00e1 en la primera, mientras que en el peor caso, si hab\u00eda escrito el 99, necesitareis 100 intentos. Si estaba por medio, tal vez con 40-70 basta. Este ser\u00eda un algoritmo eficaz (hace lo que tiene que hacer), pero no muy eficiente (lo hace de la mejor manera posible). Ir probando valores al azar en lugar de hacer esto tampoco mejora gran cosa el proceso, y viene a ser lo mismo.</p> <p>Si alguna vez habeis jugado a este juego, lo que habreis hecho es ser un poco m\u00e1s astutos y empezar por alg\u00fan valor del medio. En este caso, por ejemplo, podr\u00eda ser el 50. Entonces, en caso de fallar, una vez est\u00e1 seguro de si el valor secreto es mayor o menor que su respuesta, en el intento siguiente probar un valor m\u00e1s alto o m\u00e1s bajo , e ir haciendo esto repetidas veces.</p> <p>Generalmente, la mejor estrategia para adivinar un n\u00famero secreto entre 0 y N ser\u00eda primer probar N/2. Si no se ha acertado, entonces si el n\u00famero secreto es m\u00e1s alto se intenta adivinar entre (N/2 + 1) y N. Si era m\u00e1s bajo, se intenta adivinar el valor entre 0 y N-1. Para cada caso, se vuelve a probar el valor que hay en el medio del nuevo intervalo. Y as\u00ed sucesivamente, haciendo cada vez m\u00e1s peque\u00f1o el intervalo de b\u00fasqueda, hasta adivinarlo. En el caso de 100 valores, esto garantiza que, en el peor de los casos, en 7 intentos seguro que se adivina. Esto es una mejora muy grande respecto al primer algoritmo, donde hac\u00edan falta 100 intentos, y por tanto, este ser\u00eda un algoritmo m\u00e1s eficiente. Concretamente, siempre se adivinar\u00e1 en log<sub>2</sub> (N) intentos como m\u00e1ximo.</p> <p>Si os fij\u00e1is, el ejemplo que se acaba de explicar, en realidad, no es m\u00e1s que un esquema de b\u00fasqueda en una secuencia de valores, como puede ser dentro de un array, partiendo de la condici\u00f3n que todos los elementos est\u00e9n ordenados de menor a mayor. De hecho, hasta ahora, para hacer una b\u00fasqueda de un valor dentro de un array se ha usado el sistema \"ingenuo\", mirando una por una todas las posiciones. Pero si los elementos est\u00e1n ordenados previamente, se podr\u00eda usar el sistema \"astuto\" para dise\u00f1ar un algoritmo mucho m\u00e1s eficiente, y hasta cierto punto, m\u00e1s \"inteligente\".</p> <p>El algoritmo basado en esta estrategia se conoce como b\u00fasqueda binaria o dicot\u00f3mica.</p> <p>Para ello iniciaremos la b\u00fasqueda en la posici\u00f3n central del array.</p> <ul> <li>Si el elemento central es el buscado habremos finalizado la b\u00fasqueda.</li> <li>Si el elemento central es mayor que el buscado, tendremos que continuar la b\u00fasqueda en la mitad izquierda del array ya que, al estar \u00e9ste ordenado todos los elementos de la mitad derecha ser\u00e1n tambi\u00e9n mayores que el buscado.</li> <li>Si el elemento central es menor que el buscado, tendremos que continuar la b\u00fasqueda en la mitad derecha del array ya que, al estar \u00e9ste ordenado todos los elementos de la mitad izquierda ser\u00e1n tambi\u00e9n menores que el buscado.</li> </ul> <p>En un solo paso hemos descartado la mitad de los elementos del array. Para buscar el la mitad izquierda o en la mitad derecha utilizaremos el mismo criterio, es decir, iniciaremos la b\u00fasqueda en el elemento central de dicha mitad, y as\u00ed sucesivamente hasta encontrar lo buscado o hasta que descubramos que no est\u00e1.</p> <p>Supongamos por ejemplo que, dado un array que contiene edades de personas, ordenadas de menor a mayor queremos averiguar si hay alguna persona de 36 a\u00f1os o no.</p> <p>El siguiente m\u00e9todo soluciona este problema realizando una b\u00fasqueda binaria:</p> <pre><code>public static boolean hayAlguienDe36(int[] edad) {\n    // Las variables izq y der marcar\u00e1n el fragmento del array en el que\n    // realizamos la b\u00fasqueda. Inicialmente buscamos en todo el array.\n    final int NUMERO_BUSCADO = 36;\n    int izq = 0;\n    int der = edad.length - 1;\n    boolean encontrado = false;\n    while (izq &lt;= der &amp;&amp; !encontrado) {\n        // Calculamos posici\u00f3n central del fragmento en el que buscamos\n        int m = (izq + der) / 2;\n        if (edad[m] == NUMERO_BUSCADO) // Hemos encontrado una persona de 36\n        {\n            encontrado = true;\n        } else if (edad[m] &gt; NUMERO_BUSCADO) {\n            // El elemento central tiene m\u00e1s de 36.\n            // Continuamos la b\u00fasqueda en la mitad izquierda. Es decir,\n            // entre las posici\u00f3nes izq y m-1\n            der = m - 1;\n        } else {\n            // El elemento central tiene menos de 36.\n            // Continuamos la b\u00fasqueda en la mitad derecha. Es decir,\n            // entre las posiciones m+1 y der\n            izq = m + 1;\n        } // del if\n    } // del while\n    return encontrado; // if (encontrado) return true; else return false;\n}\n</code></pre> <p>La b\u00fasqueda finaliza cuando encontramos una persona con 36 a\u00f1os (<code>encontrado==true</code>) o cuando ya no es posible encontrarla, circunstancia que se produce cuando <code>izq</code> y <code>der</code> se cruzan (<code>izq&gt;der</code>).</p>"},{"location":"UD04/UD04_ES.html#problemas-de-ordenacion","title":"Problemas de ordenaci\u00f3n","text":"<p>Con frecuencia necesitamos que los elementos de un array est\u00e9n ordenados (por ejemplo para usar la b\u00fasqueda binaria).</p> <p>Existen multitud de algoritmos que permiten ordenar los elementos de un array, entre los que hay soluciones iterativas y soluciones recursivas.</p> <p>Entre los algoritmos iterativos tenemos, por ejemplo, el m\u00e9todo de la burbuja, el m\u00e9todo de selecci\u00f3n directa y el m\u00e9todo de inserci\u00f3n directa.</p> <p>Entre los recursivos, son conocidos el algoritmo mergesort y el quickSort, que realizan la ordenaci\u00f3n m\u00e1s r\u00e1pidamente que los algoritmos iterativos que hemos nombrado.</p> <p>Como ejemplo vamos a ver como se realiza la ordenaci\u00f3n de un array de enteros utilizando el m\u00e9todo de selecci\u00f3n directa:</p> <pre><code>public static void seleccionDirecta(int[] v) {\n    for (int i = 0; i &lt; v.length-1; i++) {\n        //Localizamos elemento que tiene que ir en la posici\u00f3n i\n        int posMin = i;\n        //buscar el menor a la derecha\n        for (int j = i + 1; j &lt; v.length; j++) {\n            if (v[j] &lt; v[posMin]) {\n                posMin = j;\n            }\n        }\n        //al llegar aqu\u00ed posMin tendr\u00e1 la posici\u00f3n del elemento menor\n        //Intercambiamos los elementos de las posiciones i y posMin\n        //v[i]&lt;=&gt;v[posMin];\n        int aux = v[posMin];\n        v[posMin] = v[i];\n        v[i] = aux;\n    }\n}\n</code></pre> <p>El m\u00e9todo consiste en recorrer el array ascendentemente a partir de la posici\u00f3n cero.</p> <p>En cada posici\u00f3n (<code>i</code>) localizamos el elemento que tiene que ocupar dicha posici\u00f3n cuando el array est\u00e9 ordenado, es decir, el menor de los elementos que quedan a su derecha.</p> <p>Cuando se ha determinado el menor se coloca en su posici\u00f3n realizando un intercambio con el elemento de la posici\u00f3n <code>i</code>. Con ello, el array queda ordenado hasta la posici\u00f3n <code>i</code>.</p> <p>Y a modo de curiosidad os dejo por aqu\u00ed el m\u00e9todo de inserci\u00f3n directa:</p> <ol> <li>Comenzamos considerando el primer elemento como la parte ordenada.</li> <li>Luego, tomamos un elemento de la parte no ordenada y lo insertamos en la posici\u00f3n correcta dentro de la parte ordenada, desplazando los elementos mayores que \u00e9l hacia la derecha.</li> <li>Repetimos este proceso hasta que todos los elementos est\u00e9n en la parte ordenada.</li> </ol> <pre><code>public static void insercionDirecta(int[] array) {\n    for (int i = 1; i &lt; array.length; i++) {\n        int key = array[i];\n        int j = i - 1;\n\n        // Mover los elementos mayores que key hacia la derecha\n        while (j &gt;= 0 &amp;&amp; array[j] &gt; key) {\n            array[j + 1] = array[j];\n            j--;\n        }\n\n        // Insertar key en su posici\u00f3n correcta\n        array[j + 1] = key;\n    }\n}\n</code></pre> <p>Ejemplos visuales de distintos m\u00e9todos de ordenaci\u00f3n, con distintos tipos de entradas: https://www.toptal.com/developers/sorting-algorithms</p>"},{"location":"UD04/UD04_ES.html#arrays-bidimensionales-matrices","title":"Arrays bidimensionales: matrices","text":"<p>Los arrays bidimensionales, tambi\u00e9n llamados matrices, son muy similares a los arrays que hemos visto hasta ahora: Tambi\u00e9n son una colecci\u00f3n de elementos del mismo tipo que se agrupan bajo un mismo nombre de variable. Sin embargo:</p> <ul> <li> <p>Sus elementos est\u00e1n organizados en filas y columnas. Tienen, por tanto una altura y una anchura, y por ello se les llama bidimensionales.</p> </li> <li> <p>A cada componente de una matriz se accede mediante dos sub\u00edndices: el primero se refiere al n\u00famero de fila y el segundo al n\u00famero de columna. En la siguiente figura, <code>m[0][0]</code> es <code>2</code>, <code>m[0][3]</code> es <code>9</code>, <code>m[2][0]</code> es <code>57</code></p> </li> </ul> <p></p> <ul> <li>Como vemos, filas y columnas se numeran a partir del <code>0</code>.</li> </ul> <p>Si se quisiera extender el tratamiento el estudio de la pluviosidad, para abarcar no solo los d\u00edas de un mes sino los de todo un a\u00f1o, se podr\u00eda definir, por ejemplo, un array de 366 elementos, que mantuviera de forma correlativa los datos de pluviosidad de una zona d\u00eda a d\u00eda. Con ello, por ejemplo, el dato correspondiente al d\u00eda 3 de febrero ocupar\u00eda la posici\u00f3n 34 del array, mientras que el correspondiente al 2 de julio ocupar\u00eda el 184.</p> <p>Una aproximaci\u00f3n m\u00e1s conveniente para la representaci\u00f3n de estos datos consistir\u00eda en utilizar una matriz con 12 filas (una por mes) y 31 columnas (una por cada d\u00eda del mes). Esto permitir\u00eda una descripci\u00f3n m\u00e1s ajustada a la realidad y, sobre todo, simplificar\u00eda los c\u00e1lculos de la posici\u00f3n real de cada d\u00eda en la estructura de datos. El elemento <code>[0][3]</code> corresponder\u00eda, por ejemplo, a las lluvias del 4 de enero.</p>"},{"location":"UD04/UD04_ES.html#matrices-en-java","title":"Matrices en Java","text":"<p>En Java, una matriz es, en realidad un array en el que cada componente es, a su vez, un array. Dicho de otra manera, una matriz de enteros es un array de arrays de enteros.</p> <p>Esto, que no es igual en otros lenguajes de programaci\u00f3n, tiene ciertas consecuencias en la declaraci\u00f3n, creaci\u00f3n y uso de las matrices en Java:</p> <ul> <li> <p>Una matriz, en Java, puede tener distinto n\u00famero de elementos en cada fila.</p> </li> <li> <p>La creaci\u00f3n de la matriz se puede hacer en un solo paso o fila por fila.</p> </li> <li> <p>Si <code>m</code> es una matriz de enteros...</p> </li> <li> <p><code>m[i][j]</code> es el entero de la fila <code>i</code>, columna <code>j</code></p> </li> <li><code>m[i]</code> es un array de enteros.</li> <li><code>m.length</code> es el n\u00famero de filas de <code>m</code>.</li> <li> <p><code>m[i].length</code> es el n\u00famero de columnas de la fila <code>i</code></p> </li> <li> <p>Podr\u00edamos dibujar la matriz <code>m</code> del ejemplo anterior de una forma m\u00e1s cercana a c\u00f3mo Java las representa internamente:</p> </li> </ul> <p></p>"},{"location":"UD04/UD04_ES.html#declaracion-de-matrices","title":"Declaraci\u00f3n de matrices.","text":"<p>El c\u00f3digo siguiente declara una matriz (array bidimensional) de elementos de tipo <code>double</code>, y la crea para que tenga <code>5</code> filas y <code>4</code> columnas (matriz de 5x4):</p> <pre><code>double[][] m1 = new double[5][4];\n</code></pre> <p>La siguiente declaraci\u00f3n es equivalente a la anterior aunque en la pr\u00e1ctica es menos utilizada a no ser que queramos que cada fila tenga un n\u00famero distinto de elementos:</p> <pre><code>double[][] m2 = new double [5][];\nm2[0] = new double[4];\nm2[1] = new double[4];\nm2[2] = new double[4];\nm2[3] = new double[4];\nm2[4] = new double[4];\n</code></pre> <p>Es posible inicializar cada uno de los subarrays con un tama\u00f1o diferente (aunque el tipo base elemental debe ser siempre el mismo para todos los componentes). Por ejemplo:</p> <pre><code>double[][] m3 = new double [5][];\nm3[0] = new double[3];\nm3[1] = new double[4];\nm3[2] = new double[14];\nm3[3] = new double[10];\nm3[4] = new double[9];\n</code></pre>"},{"location":"UD04/UD04_ES.html#inicializacion_1","title":"Inicializaci\u00f3n.","text":"<p>La forma de inicializar una matriz de enteros de por ejemplo [4][3] seria:</p> <pre><code>int[][] m4 = {{7,2,4},{8,2,5},{9,4,3},{1,2,4}};\n\n//aunque se entiende mejor de este modo:\nint[][] m4 = {\n               {7,2,4},\n               {8,2,5},\n               {9,4,3},\n               {1,2,4}\n             };\n</code></pre> <p></p>"},{"location":"UD04/UD04_ES.html#recorrido","title":"Recorrido","text":"<p>El recorrido se hace de forma similar al de un array aunque, dado que hay dos sub\u00edndices, ser\u00e1 necesario utilizar dos bucles anidados: uno que se ocupe de recorrer las filas y otro que se ocupe de recorrer las columnas.</p> <p>El siguiente fragmento de c\u00f3digo recorre una matriz <code>m4</code> para imprimir sus elementos uno a uno.</p> <pre><code>//recorrido por filas\nSystem.out.println(\"\\nRecorrido por filas: \");\nfor (int f = 0; f &lt; m4.length; f++) {\n    for (int c = 0; c &lt; m4[f].length; c++) {\n        System.out.print(m4[f][c] + \" \");\n    }\n    System.out.println(\"\");\n}\n//Recorrido por filas:\n//7 2 4 \n//8 2 5 \n//9 4 3 \n//1 2 4 \n</code></pre> <p>El recorrido se ha hecho por filas, es decir, se imprimen todos los elementos de una fila y luego se pasa a la siguiente. Como hab\u00edamos indicado anteriormente, <code>m.length</code> representa el n\u00famero de filas de <code>m</code>, mientras que <code>m[i].length</code> el n\u00famero de columnas de la fila <code>i</code>.</p> <p>Tambi\u00e9n es posible hacer el recorrido por columnas: imprimir la columna 0, luego la 1, etc:</p> <p></p><pre><code>System.out.println(\"\\nRecorrido por columnas: \");\nint numFilas = m4.length;\nint numColumnas = m4[0].length;\nfor (int c = 0; c &lt; numColumnas; c++) {\n    for (int f = 0; f &lt; numFilas; f++) {\n        System.out.print(m4[f][c] + \" \");\n    }\n    System.out.println(\"\");\n}\n//Recorrido por columnas: \n//7 8 9 1 \n//2 2 4 2 \n//4 5 3 4\n</code></pre> o, directamente ... <pre><code>System.out.println(\"\\nRecorrido por columnas versi\u00f3n 2: \");\nfor (int c = 0; c &lt; m4[0].length; c++) {\n    for (int f = 0; f &lt; m4.length; f++) {\n        System.out.print(m4[f][c] + \" \");\n    }\n    System.out.println(\"\");\n}\n//Recorrido por columnas versi\u00f3n 2: \n//7 8 9 1 \n//2 2 4 2 \n//4 5 3 4\n</code></pre> <p>En este caso, para un funcionamiento correcto del recorrido ser\u00eda necesario que todas las columnas tuvieran igual n\u00famero de elementos, pues en el bucle externo, se toma como referencia para el n\u00famero de columnas la longitud de <code>m[0]</code>, es decir el n\u00famero de elementos de la primera fila.</p>"},{"location":"UD04/UD04_ES.html#arrays-multidimensionales","title":"Arrays multidimensionales","text":"<p>En el punto anterior hemos visto que podemos definir arrays cuyos elementos son a la vez arrays, obteniendo una estructura de datos a la que se accede mediante dos sub\u00edndices, que hemos llamado arrays bidimensionales o matrices.</p> <p>Este anidamiento de estructuras se puede generalizar, de forma que podr\u00edamos construir arrays de m\u00e1s de dos dimensiones. En realidad Java no pone l\u00edmite al n\u00famero de sub\u00edndices de un array. Podr\u00edamos hacer declaraciones como las siguientes:</p> <pre><code>int[][][] notas = new int[10][5][3]; //Notas de 10 alum. en 5 asign. en 3 eval.\nnotas[2][3][1]=5;//El alumno 2, para la asignatura 3 de la primera evaluaci\u00f3n ha sacado un 5\ndouble[][][][][] w = new double [2][7][10][4][10];\n</code></pre> <p>Sin embargo, encontrar ejemplos en los que sean necesarios arrays de m\u00e1s de tres dimensiones es bastante raro, y a\u00fan cuando los encontramos solemos utilizar arrays de uno o dos sub\u00edndices porque nos resulta menos complejo manejarlos.</p>"},{"location":"UD04/UD04_ES.html#recursividad","title":"Recursividad","text":"<p>A la hora de crear programas complejos, uno de los aspectos que diferencia el buen programador del aficionado es su capacidad de hacer algoritmos eficientes. O sea, que sean capaces de resolver el problema planteado en el m\u00ednimo de pasos. En el caso de un programa, esto significa la necesidad de ejecutar el m\u00ednimo n\u00famero de instrucciones posible. Ciertamente, si el resultado tiene que ser exactamente el mismo, siempre ser\u00e1 mejor hacer una tarea en 10 pasos que en 20, intentando evitar pasos que en realidad son innecesarios. Por lo tanto, la etapa de dise\u00f1o de un algoritmo es bastante importante y hay que pensar bien una estrategia eficiente. Ahora bien, normalmente, los algoritmos m\u00e1s eficientes tambi\u00e9n son m\u00e1s dif\u00edciles de pensar y codificar, ya que no siempre son evidentes.</p>"},{"location":"UD04/UD04_ES.html#aplicacion-de-la-recursividad","title":"Aplicaci\u00f3n de la recursividad","text":"<p>A menudo encontrareis que explicar de palabra la idea general de una estrategia puede ser sencillo, pero traducirla instrucciones de Java ya no lo es tanto. Retomamos ahora el caso de la b\u00fasqueda dicot\u00f3mica o binaria, dado que hay que ir repitiendo unos pasos en sucesivas iteraciones, est\u00e1 m\u00e1s o menos claro que el problema planteado para realizar b\u00fasquedas eficientes se basa en una estructura de repetici\u00f3n. Pero no se recorren todos los elementos y el \u00edndice no se incrementa uno a uno, sino que se va cambiando a valores muy diferentes para cada iteraci\u00f3n. No es un caso evidente. Precisamente, este ejemplo no se ha elegido al azar, ya que es un caso en el que os puede ir bien aplicar un nuevo concepto que permite facilitar la definici\u00f3n de algoritmos complejos donde hay repeticiones.</p> <p>La recursividad es una forma de describir un proceso para resolver un problema de manera que, a lo largo de esta descripci\u00f3n, se usa el proceso mismo que se est\u00e1 describiendo, pero aplicado a un caso m\u00e1s simple.</p> <p>De hecho, tal vez sin darse cuenta de ello en, ya se ha usado recursividad para describir c\u00f3mo resolver un problema. Para ver qu\u00e9 significa exactamente la definici\u00f3n formal apenas descrita, se repetir\u00e1 el texto en cuesti\u00f3n, pero remarcando el aspecto recursivo de la descripci\u00f3n:</p> <p>\"Generalmente, la mejor estrategia para adivinar un n\u00famero secreto entre 0 y N ser\u00eda primero probar N/2. Si no se ha acertado, entonces si el n\u00famero secreto es m\u00e1s alto se intenta adivinar entre (N/2 + 1) y N. Si era m\u00e1s bajo, se intenta adivinar el valor entre 0 y N-1. Para cada caso, se vuelve a probar el valor que hay en el centro del nuevo intervalo. Y as\u00ed sucesivamente, hasta adivinarlo.\"</p> <p>O sea, el proceso de adivinar un n\u00famero se basa en el proceso de intentar adivinar un n\u00famero! Esto parece hacer trampas, ya es como usar la misma palabra que se quiere definir a su propia definici\u00f3n. Pero f\u00edjese en un detalle muy importante. Los nuevos usos del proceso de \"adivinar\" son casos m\u00e1s simples, ya que primero se adivina entre N valores posibles, luego entre N/2 valores, despu\u00e9s entre N/4, etc. Este hecho no es casual y de \u00e9l depende poder definir un proceso recursivo de manera correcta.</p> <p>Otro ejemplo de recursividad es la definici\u00f3n de las iniciales del sistema operativo GNU quieren decir \"GNU is Not Unix\"</p>"},{"location":"UD04/UD04_ES.html#implementacion-de-la-recursividad","title":"Implementaci\u00f3n de la recursividad","text":"<p>La implementaci\u00f3n de la recursividad dentro del c\u00f3digo fuente de un programa se hace a nivel de m\u00e9todo.</p> <p>Un m\u00e9todo recursivo es aquel que, dentro de su bloque de instrucciones, tiene alguna invocaci\u00f3n a \u00e9l mismo.</p> <p>El bloque de c\u00f3digo de un m\u00e9todo recursivo siempre se basa en una estructura de selecci\u00f3n m\u00faltiple, donde cada rama es de alguno de los dos casos posibles descritos a continuaci\u00f3n.</p> <ul> <li> <p>Por un lado, en el caso base, que contiene un bloque instrucciones dentro de las cuales no hay ninguna llamada al m\u00e9todo mismo. Se ejecuta cuando se considera que, a partir de los par\u00e1metros de entrada, el problema ya es suficientemente simple como para ser resuelto directamente. En el caso de la b\u00fasqueda, ser\u00eda cuando la posici\u00f3n intermedia es exactamente el valor que se est\u00e1 buscando, o bien cuando ya se puede decidir que el elemento a buscar no existe.</p> </li> <li> <p>Por otra parte, existe el caso recursivo, que contiene un bloque de instrucciones dentro de las cuales hay una llamada al m\u00e9todo mismo, dado que se considera que a\u00fan no se puede resolver el problema f\u00e1cilmente. Ahora bien, los valores usados como par\u00e1metros de esta nueva llamada deben ser diferentes a los originales. Concretamente, ser\u00e1n unos valores que tiendan a acercarse al caso base. En el caso de la b\u00fasqueda, se corresponde a la b\u00fasqueda sobre la mitad de los valores originales, ya sea hacia la mitad inferior o superior.</p> </li> </ul> <p>Este es un caso en el que el intervalo de posiciones donde se har\u00e1 la nueva b\u00fasqueda se va acercando al caso base, ya que tarde o temprano, llamada tras llamada, el espacio de b\u00fasqueda se ir\u00e1 reduciendo hasta que, o bien se encuentra el elemento, o queda claro que no est\u00e1.</p> <p>Dentro de la estructura de selecci\u00f3n siempre debe haber al menos un caso base y uno recursivo. Normalmente, los algoritmos recursivos m\u00e1s sencillos tienen uno de cada. Es imprescindible que los casos recursivos siempre garanticen que sucesivas llamadas van aproximando los valores de los par\u00e1metros de entrada a alg\u00fan caso base, ya que, de lo contrario, el programa nunca termina y se produce el mismo efecto que en un bucle infinito.</p>"},{"location":"UD04/UD04_ES.html#calculo-recursivo-de-la-operacion-factorial","title":"C\u00e1lculo recursivo de la operaci\u00f3n factorial","text":"<p>Como ejemplo del funcionamiento de un m\u00e9todo recursivo, se empezar\u00e1 con un caso sencillo. Se trata del c\u00e1lculo de la llamada operaci\u00f3n factorial de un valor entero positivo. Esta es unaria y se expresa con el operador exclamaci\u00f3n (por ejemplo, 4!, 20!, 3!). El resultado de esta operaci\u00f3n es la multiplicaci\u00f3n de todos los valores desde el 1 hasta el indicado (7! = 1 * 2 * 3 * 4 * 5 * 6 * 7). Normalmente, la definici\u00f3n matem\u00e1tica de esta operaci\u00f3n se hace de manera recursiva:</p> <ul> <li><code>0! = 1</code>   caso base</li> <li><code>n! = n * (n - 1)!</code>  caso recursivo</li> </ul> <p>As\u00ed pues, tened en cuenta que el caso recursivo realiza un c\u00e1lculo que depende de usar la propia definici\u00f3n de la operaci\u00f3n, pero cuando lo hace es con un nuevo valor inferior al original, por lo que se garantiza que, en alg\u00fan momento, se har\u00e1 una llamada recursiva que desembocar\u00e1 en el caso base. Cuando esto ocurra, la cadena de llamadas recursivas acabar\u00e1. Una manera de ver esto es desarrollando paso a paso esta definici\u00f3n:</p> <pre><code>4! = 4 * (4 - 1)! = 4 * (3)!\n4 * 3! = 4 * (3 * (3-1)!) = 4 * 3 * (2)!\n4 * 3 * 2! = 4 * 3 * (2 * (2-1)!) = 4 * 3 * 2 * (1)!\n4 * 3 * 2 * 1! = 4 * 3 * 2 * (1 * (1 - 1)!) = 4 * 3 * 2 * 1 * (0)!\n4 * 3 * 2 * 1 * 0! = 4 * 3 * 2 * 1 * (1) = 24\n</code></pre> <p>Su implementaci\u00f3n en Java ser\u00eda la que ves m\u00e1s abajo. Ahora bien, en este c\u00f3digo se han a\u00f1adido algunas sentencias para escribir informaci\u00f3n por pantalla, de forma que se vea con m\u00e1s detalle c\u00f3mo funciona un m\u00e9todo recursivo. Ver\u00e9is que, inicialmente, se llevan a cabo una serie de invocaciones del caso recursivo, uno tras otro, hasta que se llega a una llamada que ejecuta el caso base. Es a partir de entonces cuando, a medida que se van ejecutando las sentencias <code>return</code> del caso recursivo, realmente se va acumulando el c\u00e1lculo. Otra forma de verlo es depurando el programa.</p> <pre><code>package UD04;\n\npublic class Recursividad {\n\n    public static void main(String[] args) {\n        //factorial\n        System.out.println(factorial(4));\n\n        [...]      \n    }\n\n    /**\n     * M\u00e9todo recursivo que calcula el factorial\n     */\n    public static int factorial(int n) {\n        if (n == 0) {\n            //Caso base: Se sabe el resultado directamente\n            System.out.println(\"Caso base: n es igual a 0\");\n            return 1;\n        } else {\n            //Caso recursivo: Para calcularlo hay que invocar al m\u00e9todo recursivo\n            //El valor del nuevo par\u00e1metro de entradad se ha de modificar, de\n            //manera que se vaya acercando al caso base\n            System.out.println(\"Caso recursivo \" + (n - 1)\n                    + \": Se invoca al factorial(\" + (n - 1) + \")\");\n            int res = n * factorial(n - 1);\n            System.out.println(\"  cuyo resultado es: \" + res);\n            return res;\n        }\n    }\n[...]\n</code></pre> <p>La ejecuci\u00f3n resultante es:</p> <pre><code>Caso recursivo 3: Se invoca al factorial(3)\nCaso recursivo 2: Se invoca al factorial(2)\nCaso recursivo 1: Se invoca al factorial(1)\nCaso recursivo 0: Se invoca al factorial(0)\nCaso base: n es igual a 0\n  cuyo resultado es: 1\n  cuyo resultado es: 2\n  cuyo resultado es: 6\n  cuyo resultado es: 24\n24\n</code></pre>"},{"location":"UD04/UD04_ES.html#calculo-recursivo-de-la-busqueda-dicotomica","title":"C\u00e1lculo recursivo de la b\u00fasqueda dicot\u00f3mica","text":"<p>A continuaci\u00f3n se muestra el c\u00f3digo del algoritmo recursivo de b\u00fasqueda dicot\u00f3mica o binaria sobre un array. Observad atentamente los comentarios, los cuales identifican los casos base y recursivos. En este caso, hay m\u00e1s de un caso base y recursivo.</p> <pre><code>package UD04;\n\npublic class Recursividad {\n\n    public static void main(String[] args) {\n        [...]\n        //busqueda binaria recursiva\n        int[] array = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};\n        int buscaDieciocho = BusquedaBinaria(array, 0, array.length - 1, 18);\n        int buscaCinco = BusquedaBinaria(array, 0, array.length - 1, 5);\n        System.out.println(\"Busqueda del 18: \" + buscaDieciocho);\n        System.out.println(\"Busqueda del 5: \" + buscaCinco);\n        [...]\n    }\n\n    [...]\n    public static int BusquedaBinaria(int[] array, int inicio, int fin, int valor) {\n        if (inicio &gt; fin) {\n            //Caso base: No se ha encontrado el valor\n            return -1;\n        }\n        //Se calcula la posici\u00f3n central entre los dos \u00edndices de b\u00fasqueda\n        int pos = inicio + (fin - inicio) / 2;\n        if (array[pos] &gt; valor) {\n            //Caso recursivo: Si el valor es menor que la posici\u00f3n que se ha \n            //consultado, entonces hay que seguir buscando por la parte \n            //\"derecha\" del array\n            return BusquedaBinaria(array, inicio, pos - 1, valor);\n        } else if (array[pos] &lt; valor) {\n            //Caso recursivo: Si el valor es mayor que la posici\u00f3n que se ha\n            //consultado, entonces hay que seguir buscando por la parte \n            //\"izquierda\" del array\n            return BusquedaBinaria(array, pos + 1, fin, valor);\n        } else {\n            //caso base: Es igual, por tanto, se ha encontrado\n            return pos;\n        }\n    }\n    [...]\n}\n</code></pre> <p>El resultado de la ejecuci\u00f3n es:</p> <pre><code>Busqueda del 18: 8\nBusqueda del 5: -1\n</code></pre> <p>Pr\u00e1cticamente cualquier problema que se puede resolver con un algoritmo recursivo tambi\u00e9n se puede resolver con sentencias de estructuras de repetici\u00f3n (de manera iterativa). Pero muy a menudo su implementaci\u00f3n ser\u00e1 mucho menos evidente y las interacciones entre instrucciones bastante m\u00e1s complejas que la opci\u00f3n recursiva (una vez se entiende este concepto, claro).</p>"},{"location":"UD04/UD04_ES.html#desbordamiento-de-pila-stack-overflow","title":"Desbordamiento de pila (stack overflow)","text":"<p>Las versiones recursivas de muchas rutinas pueden ejecutarse un poco m\u00e1s lentamente que sus equivalentes iterativos debido a la sobrecarga adicional de las llamadas a m\u00e9todos adicionales. Demasiadas llamadas recursivas a un m\u00e9todo podr\u00edan causar un desbordamiento de la pila.</p> <p>Como el almacenamiento para los par\u00e1metros y las variables locales est\u00e1 en la pila y cada llamada nueva crea una nueva copia de estas variables, es posible que la pila se haya agotado. Si esto ocurre, el sistema de tiempo de ejecuci\u00f3n (run-time) de Java causar\u00e1 una excepci\u00f3n. Sin embargo, probablemente no tendr\u00e1s que preocuparte por esto a menos que una rutina recursiva se vuelva loca.</p> <p>La principal ventaja de la recursividad es que algunos tipos de algoritmos se pueden implementar de forma m\u00e1s clara y m\u00e1s recursiva de lo que pueden ser iterativamente. Por ejemplo, el algoritmo de clasificaci\u00f3n Quicksort es bastante dif\u00edcil de implementar de forma iterativa. Adem\u00e1s, algunos problemas, especialmente los relacionados con la IA, parecen prestarse a soluciones recursivas.</p> <pre><code>package UD04;\n\npublic class Recursividad {\n\n    public static void main(String[] args) {\n        [...]        \n        //desbordamiento de pila\n        desbordamientoPila(10);\n    }\n\n    [...]\n\n    public static int desbordamientoPila(int n) {\n        // condici\u00f3n base incorrecta (esto provoca un desbordamiento de la pila).\n        if (n == 100) {\n            return 1;\n        } else {\n            return n * desbordamientoPila(n - 1);\n        }\n    }\n}\n</code></pre> <p>En el ejemplo anterior si se llama a <code>desbordamientoPila(10)</code>, llamar\u00e1 a <code>desbordamientoPila (9)</code>, <code>desbordamientoPila(8)</code>, <code>desbordamientoPila(7)</code>, etc., pero el n\u00famero nunca llegar\u00e1 a 100. Por lo tanto, no se alcanza la condici\u00f3n base. Si la memoria se agota con estos m\u00e9todos en la pila, provocar\u00e1 un error de desbordamiento de pila (<code>java.lang.StackOverflowError</code>).</p> <p>Al escribir m\u00e9todos recursivos, debe tener una instrucci\u00f3n condicional, como un <code>if</code>, en alg\u00fan lugar para forzar el retorno del m\u00e9todo sin que se ejecute la llamada recursiva. Si no lo hace, una vez que llame al m\u00e9todo, nunca retornar\u00e1. Este tipo de error es muy com\u00fan cuando se trabaja con recursividad.</p>"},{"location":"UD04/UD04_ES.html#ejemplo-ud04","title":"Ejemplo UD04","text":""},{"location":"UD04/UD04_ES.html#ejemploud04","title":"EjemploUD04","text":"<pre><code>package UD04;\n\nimport java.util.Scanner;\n\npublic class EjemploUD04 {\n\n    public static void main(String[] args) {\n        //declaraci\u00f3n\n        double lluvia1[]; // lluvia1 es un array de double\n        double[] lluvia2;  // lluvia2 es un array de double\n\n        //instanciaci\u00f3n\n        lluvia1 = new double[31];\n\n        //declaraci\u00f3n + instanciaci\u00f3n\n        double lluvia3[] = new double[31];\n\n        // usamos un array para almacenar las edades de un grupo de personas\n        // la variable numPersonas contiene el n\u00famero de personas del grupo\n        // y se asigna en tiempo de ejecuci\u00f3n\n        Scanner teclado = new Scanner(System.in);\n        System.out.print(\"Introduce cuantos elementos debe tener el array edad[]:\");\n        int numPersonas = teclado.nextInt();\n        int edad[] = new int[numPersonas];\n\n        //acceso a componentes\n        System.out.print(\"Introduce el dato para el componente 0: \");\n        edad[0] = teclado.nextInt();\n        System.out.println(\"El componente [0] vale \" + edad[0]);\n        edad[1] = edad[0] + 1;\n        edad[2] = edad[0] + edad[1];\n        edad[2]++;\n        System.out.println(\"El componente [1] vale \" + edad[1]);\n        System.out.println(\"El componente [2] vale \" + edad[2]);\n\n        //el \u00edndice tambi\u00e9n admite calculos/variables:\n        int i = 3;\n        edad[i] = edad[i + 1];\n        edad[i + 2] = edad[i];\n\n        //Inicializaci\u00f3n\n        int edad2[] = new int[10];\n        edad2[0] = 25;\n        edad2[1] = 10;\n        edad2[9] = 12;\n        //...\n\n        int edad3[] = {25, 10, 23, 34, 65, 23, 1, 67, 54, 12};\n\n        //Ejemplo pr\u00e1ctico\n        System.out.println(nombreMes(3)); //marzo\n\n        //Paso de arrays como par\u00e1metros:\n        int a = 1;\n        int v[] = {1, 1, 1};\n        metodo(v, a); //Pasar un array como par\u00e1metro\n        System.out.println(a); // Muesta 1\n        System.out.println(v[0]); // Muestra 2\n\n        //atributo lenght\n        double estatura[] = new double[25];\n        System.out.println(estatura.length); // Mostrar\u00e1 por pantalla: 25\n\n        //Array args[] del m\u00e9todo main contiene los par\u00e1metros de entrada\n        System.out.println(args[0]);//par\u00e1metro 1 de la l\u00ednea de comandos\n        System.out.println(args[1]);//par\u00e1metro 2 de la l\u00ednea de comandos\n\n        //busquedas y recorridos de arrays\n        double pluviosidad[] = {5, 4, 0, 0, 0, 10, 0, 0, 0, 0, 2, 2, 3, 4, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 0, 0};\n\n        //recorrido ascendente\n        System.out.println(pluviosidadMediaAscendente(pluviosidad)); //1.3\n        //recorrido descendente\n        System.out.println(pluviosidadMediaDescendente(pluviosidad)); //1.3\n        //recorrido para m\u00e1ximo\n        System.out.println(pluviosidadMaxima(pluviosidad)); //10.0\n        //busqueda con while y boolean\n        System.out.println(primerDiaSinLluvia1(pluviosidad)); //2\n        //busqueda con while sin boolean\n        System.out.println(primerDiaSinLluvia2(pluviosidad)); //2\n        //busqueda con for\n        System.out.println(primerDiaSinLluvia3(pluviosidad)); //2\n        //busqueda descendente\n        System.out.println(ultimoDiaSinLluvia(pluviosidad)); //31\n</code></pre> <pre><code>        //busqueda en arrays ordenados (busqueda binaria)\n        int buscarEdad[] = {15, 22, 33, 36, 41, 56, 71, 92};\n        System.out.println(hayAlguienDe36(buscarEdad)); //true\n\n        //ordenar arrays\n        int desordenado[] = {62, 4, 25, 27, 32, 1, 80, 43, 22};\n        seleccionDirecta(desordenado);\n        //con el siguiente bucle recorremos el array ascendentemente y al\n        //imprimirlo resulta en: 1 4 22 25 27 32 43 62 80\n        for (int j = 0; j &lt;= desordenado.length - 1; j++) {\n            System.out.print(desordenado[j] + \" \");\n        }\n\n        //arrays bidimensionales\n        double m1[][] = new double[5][4];\n\n        //con el mismo n\u00famero de columnas\n        double m2[][] = new double[5][];\n        m2[0] = new double[4];\n        m2[1] = new double[4];\n        m2[2] = new double[4];\n        m2[3] = new double[4];\n        m2[4] = new double[4];\n\n        //diferentes n\u00fameros de columnas\n        double m3[][] = new double[5][];\n        m3[0] = new double[3];\n        m3[1] = new double[4];\n        m3[2] = new double[14];\n        m3[3] = new double[10];\n        m3[4] = new double[9];\n\n        int m4[][] = {\n            {7, 2, 4},\n            {8, 2, 5},\n            {9, 4, 3},\n            {1, 2, 4}\n        };\n\n        //recorrido por filas\n        System.out.println(\"\\nRecorrido por filas: \");\n        for (int r = 0; r &lt; m4.length; r++) {\n            for (int s = 0; s &lt; m4[r].length; s++) {\n                System.out.print(m4[r][s] + \" \");\n            }\n            System.out.println(\"\");\n        }\n        //Recorrido por filas:\n        //7 2 4 \n        //8 2 5 \n        //9 4 3 \n        //1 2 4 \n\n        System.out.println(\"\\nRecorrido por columnas: \");\n        int numFilas = m4.length;\n        int numColumnas = m4[0].length;\n        for (int j = 0; j &lt; numColumnas; j++) {\n            for (int k = 0; k &lt; numFilas; k++) {\n                System.out.print(m4[k][j] + \" \");\n            }\n            System.out.println(\"\");\n        }\n        //Recorrido por columnas: \n        //7 8 9 1 \n        //2 2 4 2 \n        //4 5 3 4         \n\n        System.out.println(\"\\nRecorrido por columnas versi\u00f3n 2: \");\n        for (int j = 0; j &lt; m4[0].length; j++) {\n            for (int k = 0; k &lt; m4.length; k++) {\n                System.out.print(m4[k][j] + \" \");\n            }\n            System.out.println(\"\");\n        }\n        //Recorrido por columnas versi\u00f3n 2: \n        //7 8 9 1 \n        //2 2 4 2 \n        //4 5 3 4\n\n        //arrays multidimensionales:\n        int notas[][][] = new int[10][5][3]; //Notas de 10 alum. en 5 asign. en 3 eval.\n        double w[][][][][] = new double [2][7][10][4][10];\n    }\n\n    public static String nombreMes(int mes) {\n        String nombre[] = {\" \", \"enero\", \"febrero\", \"marzo\", \"abril\",\n            \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\",\n            \"noviembre\", \"diciembre\"};\n        return nombre[mes];\n    }\n</code></pre> <pre><code>    public static void metodo(int x[], int y) { //recibir un array como par\u00e1metro\n        x[0]++;\n        y++;\n    }\n\n    //recorremos ascendentemente el array para obtener la media\n    public static double pluviosidadMediaAscendente(double lluvia[]) {\n        double suma = 0;\n        //Recorremos el array\n        for (int i = 0; i &lt; lluvia.length; i++) {\n            suma += lluvia[i];\n        }\n        double media = suma / lluvia.length;\n        return media;\n    }\n\n    //recorremos descendentemente el array para obtener la media\n    public static double pluviosidadMediaDescendente(double lluvia[]) {\n        double suma = 0;\n        //Recorremos el array\n        for (int i = lluvia.length - 1; i &gt;= 0; i--) {\n            suma += lluvia[i];\n        }\n        double media = suma / lluvia.length;\n        return media;\n    }\n\n    //recorremos el array para encontrar el dia con m\u00e1s pluviosidad\n    public static double pluviosidadMaxima(double lluvia[]) {\n        // Suponemos el la pluviosidad m\u00e1xima se produjo el primer d\u00eda\n        double max = lluvia[0];\n        //Recorremos el array desde la posici\u00f3n 1, comprobando si hay una pluviosidad mayor\n        for (int i = 1; i &lt; lluvia.length; i++) {\n            if (lluvia[i] &gt; max) {\n                max = lluvia[i];\n            }\n        }\n        return max;\n    }\n    //Devolveremos el sub\u00edndice del primer componente del array cuyo valor es cero.\n// Si no hay ning\u00fan d\u00eda sin lluvias devolveremos -1\n\n    public static int primerDiaSinLluvia1(double lluvia[]) {\n        int i = 0;\n        boolean encontrado = false;\n        while (i &lt; lluvia.length &amp;&amp; !encontrado) {\n            if (lluvia[i] == 0) {\n                encontrado = true;\n            } else {\n                i++;\n            }\n        }\n        if (encontrado) {\n            return i;\n        } else {\n            return -1;\n        }\n    }\n\n    public static int primerDiaSinLluvia2(double lluvia[]) {\n        int i = 0;\n        while (i &lt; lluvia.length &amp;&amp; lluvia[i] != 0) {\n            i++;\n        }\n        if (i == lluvia.length) {\n            return -1;\n        } else {\n            return i;\n        }\n    }\n\n    public static int primerDiaSinLluvia3(double lluvia[]) {\n        int i;\n        for (i = 0; i &lt; lluvia.length &amp;&amp; lluvia[i] != 0; i++) /*Nada*/ ;\n        if (i == lluvia.length) {\n            return -1;\n        } else {\n            return i;\n        }\n    }\n</code></pre> <pre><code>    public static int ultimoDiaSinLluvia(double lluvia[]) {\n        int i = lluvia.length - 1;\n        boolean encontrado = false;\n        while (i &gt;= 0 &amp;&amp; !encontrado) {\n            if (lluvia[i] == 0) {\n                encontrado = true;\n            } else {\n                i--;\n            }\n        }\n        if (encontrado) {\n            return i;\n        } else {\n            return -1;\n        }\n    }\n\n    public static boolean hayAlguienDe36(int edad[]) {\n        // Las variables izq y der marcar\u00e1n el fragmento del array en el que\n        // realizamos la b\u00fasqueda. Inicialmente buscamos en todo el array.\n        int izq = 0;\n        int der = edad.length - 1;\n        boolean encontrado = false;\n        while (izq &lt;= der &amp;&amp; !encontrado) {\n            // Calculamos posici\u00f3n central del fragmento en el que buscamos\n            int m = (izq + der) / 2;\n            if (edad[m] == 36) // Hemos encontrado una persona de 36\n            {\n                encontrado = true;\n            } else if (edad[m] &gt; 36) {\n                // El elemento central tiene m\u00e1s de 36.\n                // Continuamos la b\u00fasqueda en la mitad izquierda. Es decir,\n                // entre las posici\u00f3nes izq y m-1\n                der = m - 1;\n            } else {\n                // El elemento central tiene menos de 36.\n                //Continuamos la b\u00fasqueda en la mitad derecha. Es decir,\n                // entre las posiciones m+1 y der\n                izq = m + 1;\n            } // del if\n        } // del while\n        return encontrado; // if (encontrado) return true; else return false;\n    }\n\n    public static void seleccionDirecta(int v[]) {\n        for (int i = 0; i &lt; v.length - 1; i++) {\n            //Localizamos elemento que tiene que ir en la posici\u00f3n i\n            int posMin = i;\n            for (int j = i + 1; j &lt; v.length; j++) {\n                if (v[j] &lt; v[posMin]) {\n                    posMin = j;\n                }\n            }\n            //Intercambiamos los elementos de las posiciones i y posMin\n            int aux = v[posMin];\n            v[posMin] = v[i];\n            v[i] = aux;\n        }\n    }\n}\n</code></pre>"},{"location":"UD04/UD04_ES.html#recursividad_1","title":"Recursividad","text":"<pre><code>package UD04;\n\npublic class Recursividad {\n\n    public static void main(String[] args) {\n        //factorial\n        System.out.println(factorial(4));\n\n        //busqueda binaria recursiva\n        int[] array = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};\n        int buscaDieciocho = BusquedaBinaria(array, 0, array.length - 1, 18);\n        int buscaCinco = BusquedaBinaria(array, 0, array.length - 1, 5);\n        System.out.println(\"Busqueda del 18: \" + buscaDieciocho);\n        System.out.println(\"Busqueda del 5: \" + buscaCinco);\n\n        //desbordamiento de pila\n        desbordamientoPila(9);\n    }\n\n    /**\n     * M\u00e9todo recursivo que calcula el factorial\n     */\n    public static int factorial(int n) {\n        if (n == 0) {\n            //Caso base: Se sabe el resultat directamente\n            System.out.println(\"Caso base: n es igual a 0\");\n            return 1;\n        } else {\n            //Caso recursivo: Para calcularlo hay que invocar al m\u00e9todo recursivo\n            //El valor del nuevo par\u00e1metro de entradad se ha de modificar, de\n            //manera que se vaya acercando al caso base\n            System.out.println(\"Caso recursivo \" + (n - 1)\n                    + \": Se invoca al factorial(\" + (n - 1) + \")\");\n            int res = n * factorial(n - 1);\n            System.out.println(\"  cuyo resultado es: \" + res);\n            return res;\n        }\n    }\n\n    public static int BusquedaBinaria(int[] array, int inicio, int fin, int valor) {\n        if (inicio &gt; fin) {\n            //Caso base: No se ha encontrado el valor\n            return - 1;\n        }\n        //Es calcula la posici\u00f3 central entre els dos \u00edndexs de cerca\n        int pos = inicio + (fin - inicio) / 2;\n        if (array[pos] &gt; valor) {\n            //Caso recursivo: Si el valor es menor que la posici\u00f3n que se ha \n            //consultado, entonces hay que seguir buscando por la parte \n            //\"derecha\" del array\n            return BusquedaBinaria(array, inicio, pos - 1, valor);\n        } else if (array[pos] &lt; valor) {\n            //Caso recursivo: Si el valor es mayor que la posici\u00f3n que se ha\n            //consultado, entonces hay que seguir buscando por la parte \n            //\"izquierda\" del array\n            return BusquedaBinaria(array, pos + 1, fin, valor);\n        } else {\n            //caso base: Es igual, por tanto, se ha encontrado\n            return pos;\n        }\n    }\n\n    public static int desbordamientoPila(int n) {\n        // condici\u00f3n base incorrecta (esto provoca un desbordamiento de la pila).\n        if (n == 100) {\n            return 1;\n        } else {\n            return n * desbordamientoPila(n - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"UD04/UD04_ES.html#pildoras-informaticas-relacionadas","title":"P\u00edldoras inform\u00e1ticas relacionadas","text":"<ul> <li>Curso Java Arrays I. V\u00eddeo 23</li> <li>Curso Java Arrays II. V\u00eddeo 24</li> <li>Curso Java Arrays III. Arrays bidimensionales. V\u00eddeo 25</li> <li>Curso Java Arrays IV. Arrays bidimensionales II. V\u00eddeo 26</li> </ul>"},{"location":"UD04/UD04_anexo_ES.html","title":"Anexo Cheatsheet String","text":""},{"location":"UD04/UD04_anexo_ES.html#anexo-cheatsheet-strings-en-java","title":"Anexo Cheatsheet Strings en Java","text":""},{"location":"UD04/UD04_anexo_ES.html#introduccion","title":"Introducci\u00f3n","text":"<p>Desde el punto de vista de la programaci\u00f3n diaria, uno de los tipos de datos m\u00e1s importantes de Java es String. String define y admite cadenas de caracteres. En algunos otros lenguajes de  programaci\u00f3n, una cadena o string es una matriz o array de caracteres.  Este no es el caso con Java. En Java, los String son objetos.</p> <p>En realidad, has estado usando la clase String desde el comienzo del  curso, pero no lo sab\u00edas. Cuando crea un literal de cadena, en realidad  est\u00e1 creando un objeto String. Por ejemplo, en la declaraci\u00f3n:</p> <pre><code>System.out.println(\"En Java, los String son objetos\");\n</code></pre> <p>La clase String es bastante grande, y solo veremos una peque\u00f1a parte aqu\u00ed.</p>"},{"location":"UD04/UD04_anexo_ES.html#construyendo-string","title":"Construyendo <code>String</code>","text":"<p>Puede construir un <code>String</code> igual que construye cualquier otro tipo de objeto: utilizando new y llamando al constructor String. Por ejemplo:</p> <pre><code>String str = new String(\"Hola\");\n</code></pre> <p>Esto crea un objeto String llamado str que contiene la cadena de caracteres \u201cHola\u201d. Tambi\u00e9n puedes construir una String desde otro String. Por ejemplo:</p> <pre><code>String str = new String(\"Hola\");\nString str2 = new String(str);\n</code></pre> <p>Despu\u00e9s de que esta secuencia se  ejecuta, str2 tambi\u00e9n contendr\u00e1 la cadena de caracteres \u201cHola\u201d. Otra  forma f\u00e1cil de crear una cadena se muestra aqu\u00ed:</p> <pre><code>String str = \"Estoy aprendiendo sobre String en JavadesdeCero.\";\n</code></pre> <p>En este caso, str se inicializa en la secuencia de caracteres \u201cEstoy aprendiendo sobre String en JavadesdeCero.\u201d. Una vez que haya creado un objeto String, puede usarlo en cualquier  lugar que permita una cadena entrecomillada. Por ejemplo, puede usar un  objeto String como argumento para println(), como se muestra en este ejemplo:</p> <pre><code>// Uso de String\nclass DemoString\n{\n    public static void main(String args[])\n    {\n        //Declaraci\u00f3n de String de diferentes maneras\n        String str1=new String(\"En Java, los String son objetos\");\n        String str2=new String(\"Se construyen de varias maneras\");\n        String str3=new String(str2);\n\n        System.out.println(str1);\n        System.out.println(str2);\n        System.out.println(str3);\n\n    }\n}\n</code></pre> <p>La salida del programa se muestra a continuaci\u00f3n:</p> <pre><code>En Java, los String son objetos\nSe construyen de varias maneras\nSe construyen de varias maneras\n</code></pre>"},{"location":"UD04/UD04_anexo_ES.html#operando-con-metodos-de-la-clase-string","title":"Operando con M\u00e9todos de la clase <code>String</code>","text":"<p>La clase String contiene varios m\u00e9todos que operan en cadenas. Aqu\u00ed se detallan todos los m\u00e9todos:</p> <ul> <li><code>int length()</code>: Devuelve la cantidad de caracteres del String.</li> </ul> <pre><code>\"Javadesdecero.es\".length(); // retorna 16\n</code></pre> <ul> <li><code>Char charAt(int i)</code>: Devuelve el car\u00e1cter en el \u00edndice i.</li> </ul> <pre><code>System.out.println(\"Javadesdecero.es\".charAt(3)); // retorna 'a'\n</code></pre> <ul> <li><code>String substring(int i)</code>: Devuelve la subcadena del i-\u00e9simo car\u00e1cter de \u00edndice al final.</li> </ul> <pre><code>\"Javadesdecero.es\".substring(4); // retorna desdecero.es\n</code></pre> <ul> <li><code>String substring(int i, int j)</code>: Devuelve la subcadena del \u00edndice i a j-1.</li> </ul> <pre><code>\"Javadesdecero.es\".substring(4,9); // retorna desde\n</code></pre> <ul> <li><code>String concat(String str)</code>: Concatena la cadena especificada al final de esta cadena.</li> </ul> <pre><code>String s1 = \"Java\";\nString s2 = \"desdeCero;\nString salida = s1.concat(s2); // retorna \"JavadesdeCero\"\n</code></pre> <ul> <li><code>int indexOf(String s)</code>: Devuelve el \u00edndice dentro de la cadena de la primera aparici\u00f3n de la cadena especificada.</li> </ul> <pre><code>String s = \"Java desde Cero\";\nint salida = s.indexOf(\"Cero\"); // retorna 11\n</code></pre> <ul> <li><code>int indexOf(String s, int i)</code>: Devuelve el \u00edndice dentro de la cadena de la primera aparici\u00f3n de la  cadena especificada, comenzando en el \u00edndice especificado.</li> </ul> <pre><code>String s = \"Java desde Cero\";\nint salida = s.indexOf('a',2); //retorna 3\n</code></pre> <ul> <li><code>int lastIndexOf(int ch)</code>: Devuelve el \u00edndice dentro de la cadena de la \u00faltima aparici\u00f3n de la cadena especificada.</li> </ul> <pre><code>String s = \"Java desde Cero\";\nint salida = s.lastIndexOf('a'); // retorna 3\n</code></pre> <ul> <li><code>boolean equals(Objeto otroObjeto)</code>: Compara este String con el objeto especificado.</li> </ul> <pre><code>Boolean salida = \"Java\".equals(\"Java\"); // retorna true\nBoolean salida = \"Java\".equals(\"java\"); // retorna false\n</code></pre> <ul> <li><code>boolean equalsIgnoreCase(String otroString)</code>: Compares string to another string, ignoring case considerations.</li> </ul> <pre><code>Boolean salida= \"Java\".equalsIgnoreCase(\"Java\"); // retorna true\nBoolean salida = \"Java\".equalsIgnoreCase(\"java\"); // retorna true\n</code></pre> <ul> <li><code>int compareTo(String otroString)</code>: Compara dos cadenas lexicogr\u00e1ficamente.</li> </ul> <pre><code>int salida = s1.compareTo(s2); // donde s1 y s2 son strings que se comparan\n/*\n Esto devuelve la diferencia s1-s2. Si:\n    salida &lt; 0 // s1 es menor que s2\n    salida = 0 // s1 y s2 son iguales\n    salida &gt; 0 // s1 es mayor que s2\n */\n</code></pre> <ul> <li><code>int compareToIgnoreCase(String otroString)</code>: Compara dos cadenas lexicogr\u00e1ficamente, ignorando las consideraciones case.</li> </ul> <pre><code>int salida = s1.compareToIgnoreCase(s2); // donde s1 y s2 son strings que se comparan\n/*\n Esto devuelve la diferencia s1-s2. Si:\n    salida &lt; 0 // s1 es menor que s2\n    salida = 0 // s1 y s2 son iguales\n    salida &gt; 0 // s1 es mayor que s2\n*/\n</code></pre> <p>En este caso, no considerar\u00e1 el case de una letra (ignorar\u00e1 si est\u00e1 en may\u00fascula o min\u00fascula). </p> <ul> <li><code>String toLowerCase()</code>: Convierte todos los caracteres de String a min\u00fasculas.</li> </ul> <pre><code>String palabra1 = \"HoLa\";\nString palabra2 = palabra1.toLowerCase(); // retorna \"hola\"\n</code></pre> <ul> <li><code>String toUpperCase()</code>: Convierte todos los caracteres de String a may\u00fasculas.</li> </ul> <pre><code>String palabra1 = \"HoLa\";\nString palabra2 = palabra1.toUpperCase(); // retorna \"HOLA\"\n</code></pre> <ul> <li><code>String trim()</code>: Devuelve la copia de la cadena, eliminando espacios en blanco en ambos extremos. No afecta los espacios en blanco en el medio.</li> </ul> <pre><code>String palabra1 = \" Java desde Cero \";\nString palabra2 = palabra1.trim(); // retorna \"Java desde Cero\"\n</code></pre> <ul> <li><code>String replace(char oldChar, char newChar)</code>: Devuelve una nueva cadena al reemplazar todas las ocurrencias de oldChar con newChar.</li> </ul> <pre><code>String palabra1 = \"yavadesdecero\";\nString palabra2 = palabra1.replace('y' ,'j'); //retorna javadesdecero\n</code></pre> <p>palabra1 sigue siendo yavadesdecero y palabra2, javadesdecero </p> <ul> <li><code>String replaceAll(String regex, String replacement)</code>: devuelve una cadena que reemplaza toda la secuencia de caracteres que coinciden con la expresi\u00f3n regular <code>regex</code> por la cadena de reemplazo <code>replacement</code>.</li> </ul> <pre><code>String str = \"Ejemplo con espacios en blanco y tabs\";\nString str2 = str.replaceAll(\"\\\\s\", \"\"); //retorna Ejemploconespaciosenblancoytabs\n</code></pre> <p>Otras expresiones regulares (entre otras much\u00edsimas):</p> <ul> <li><code>\\w</code> Cualquier cosa que sea un car\u00e1cter de palabra</li> <li><code>\\W</code> Cualquier cosa que no sea un car\u00e1cter de palabra (incluida la puntuaci\u00f3n, etc.)</li> <li><code>\\s</code> Cualquier cosa que sea un car\u00e1cter de espacio (incluido el espacio, los caracteres de tabulaci\u00f3n, etc.)</li> <li><code>\\S</code> Cualquier cosa que no sea un car\u00e1cter de espacio (incluidas letras y n\u00fameros, as\u00ed como puntuaci\u00f3n, etc.)</li> </ul> <p>Debe escapar de la barra invertida si desea que <code>\\s</code> alcance el motor de expresiones regulares, lo que da como resultado <code>\\\\s</code>). </p> <p>M\u00e1s informaci\u00f3n sobre expresiones regulares en java: https://www.vogella.com/tutorials/JavaRegularExpressions/article.html</p>"},{"location":"UD04/UD04_anexo_ES.html#ejemplo-de-todos-los-metodos-de-string","title":"Ejemplo de todos los m\u00e9todos de <code>String</code>","text":"<pre><code>// C\u00f3digo Java para ilustrar diferentes constructores y m\u00e9todos\n// de la clase String.\n\nclass DemoMetodosString\n{\n    public static void main (String[] args)\n    {\n        String s= \"JavadesdeCero\";\n        // o String s= new String (\"JavadesdeCero\");\n\n        // Devuelve la cantidad de caracteres en la Cadena.\n        System.out.println(\"String length = \" + s.length());\n\n        // Devuelve el car\u00e1cter en el \u00edndice i.\n        System.out.println(\"Character at 3rd position = \"\n                + s.charAt(3));\n\n        // Devuelve la subcadena del car\u00e1cter \u00edndice i-\u00e9simo\n        // al final de la cadena\n        System.out.println(\"Substring \" + s.substring(3));\n\n        // Devuelve la subcadena del \u00edndice i a j-1.\n        System.out.println(\"Substring  = \" + s.substring(2,5));\n\n        // Concatena string2 hasta el final de string1.\n        String s1 = \"Java\";\n        String s2 = \"desdeCero\";\n        System.out.println(\"String concatenado  = \" +\n                s1.concat(s2));\n\n        // Devuelve el \u00edndice dentro de la cadena de\n        // la primera aparici\u00f3n de la cadena especificada.\n        String s4 = \"Java desde Cero\";\n        System.out.println(\"\u00cdndice de Cero: \" +\n                s4.indexOf(\"Cero\"));\n\n        // Devuelve el \u00edndice dentro de la cadena de\n        // la primera aparici\u00f3n de la cadena especificada,\n        // comenzando en el \u00edndice especificado.\n        System.out.println(\"\u00cdndice de a  = \" +\n                s4.indexOf('a',3));\n\n        // Comprobando la igualdad de cadenas\n        Boolean out = \"Java\".equals(\"java\");\n        System.out.println(\"Comprobando la igualdad: \" + out);\n        out = \"Java\".equals(\"Java\");\n        System.out.println(\"Comprobando la igualdad: \" + out);\n\n        out = \"Java\".equalsIgnoreCase(\"jaVA \");\n        System.out.println(\"Comprobando la igualdad: \" + out);\n\n        int out1 = s1.compareTo(s2);\n        System.out.println(\"Si s1 = s2: \" + out1);\n\n        // Conversi\u00f3n de cases\n        String palabra1 = \"JavadesdeCero\";\n        System.out.println(\"Cambiando a min\u00fasculas: \" +\n                palabra1.toLowerCase());\n\n        // Conversi\u00f3n de cases\n        String palabra2 = \"JavadesdeCero\";\n        System.out.println(\"Cambiando a MAY\u00daSCULAS: \" +\n                palabra1.toUpperCase());\n\n        // Recortando la palabra\n        String word4 = \" JavadesdeCero \";\n        System.out.println(\"Recortando la palabra: \" + word4.trim());\n\n        // Reemplazar caracteres\n        String str1 = \"YavadesdeCero\";\n        System.out.println(\"String Original: \" + str1);\n        String str2 = \"YavadesdeCero\".replace('Y' ,'J') ;\n        System.out.println(\"Reemplazando Y por J -&gt; \" + str2);\n\n        // Reemplazar todos los car\u00e1cteres\n        String strAll = \"Ejemplo con espacios en blanco y tabs\";\n        System.out.println(\"String Original: \" + strAll);\n        String strAll2 = strAll.replaceAll(\"\\\\s\", \"\");\n        System.out.println(\"Eliminando todos los espacios en blanco -&gt; \" + strAll2);\n    }\n}\n</code></pre> <p>Salida:</p> <pre><code>String length = 13\nCharacter at 3rd position = a\nSubstring adesdeCero\nSubstring = vad\nString concatenado = JavadesdeCero\n\u00cdndice de Cero: 11\n\u00cdndice de a = 3\nComprobando la igualdad: false\nComprobando la igualdad: true\nComprobando la igualdad: false\nSi s1 = s2: -26\nCambiando a min\u00fasculas: javadesdecero\nCambiando a MAY\u00daSCULAS: JAVADESDECERO\nRecortando la palabra: JavadesdeCero\nString Original: YavadesdeCero\nReemplazando Y por J -&gt; JavadesdeCero\nString Original: Ejemplo con espacios en blanco y tabs\nEliminando todos los espacios en blanco -&gt; Ejemploconespaciosenblancoytabs\n</code></pre>"},{"location":"UD04/UD04_anexo_ES.html#arrays-de-string","title":"Arrays de <code>String</code>","text":"<p>Al igual que cualquier otro tipo de datos, los String se pueden ensamblar en arrays. Por ejemplo:</p> <pre><code>// Demostrando arrays de String\nclass StringArray\n{\n    public static void main (String[] args)\n    {\n       String str[]={\"Java\", \"desde\",\"Cero\"};\n\n        System.out.println(\"Array Original: \");\n        for (String s : str)\n            System.out.print(s+ \"\");\n        System.out.println(\"\\n\");\n\n        //Cambiando un String\n        str[1]=\"Curso\";\n        str[2]=\"Online\";\n\n        System.out.println(\"Array Modificado: \");\n        for (String s : str)\n            System.out.print(s+ \"\");\n        System.out.println(\"\\n\");\n    }\n}\n</code></pre> <p>Se muestra el resultado de este programa:</p> <pre><code>Array Original: \nJavadesdeCero\n\nArray Modificado: \nJavaCursoOnline\n</code></pre>"},{"location":"UD04/UD04_anexo_ES.html#los-string-son-inmutables","title":"Los <code>String</code> son inmutables","text":"<p>El contenido de un objeto String es inmutable. Es decir, una vez creada, la secuencia de caracteres que compone la cadena no se puede modificar. Esta restricci\u00f3n permite a Java implementar cadenas de manera m\u00e1s  eficiente. Aunque esto probablemente suene como un serio inconveniente,  no lo es.</p> <p>Cuando necesite una cadena que sea una variaci\u00f3n de una  que ya existe, simplemente cree una nueva cadena que contenga los  cambios deseados. Como los objetos String no utilizados se recolectan de forma autom\u00e1tica, ni siquiera tiene que preocuparse por lo que sucede con las cadenas descartadas. Sin embargo, debe quedar claro que las  variables de referencia de cadena pueden, por supuesto, cambiar el  objeto al que hacen referencia. Es solo que el contenido de un objeto <code>String</code> espec\u00edfico no se puede cambiar despu\u00e9s de haber sido creado.</p> <p>Para comprender completamente por qu\u00e9 las cadenas inmutables no son un obst\u00e1culo, utilizaremos otro de los m\u00e9todos de String: <code>substring()</code>. El m\u00e9todo <code>substring()</code> devuelve una nueva cadena que contiene una parte especificada de la  cadena invocadora. Como se fabrica un nuevo objeto String que contiene  la subcadena, la cadena original no se altera y la regla de  inmutabilidad permanece intacta. La forma de <code>substring( )</code> que vamos a utilizar se muestra aqu\u00ed:</p> <pre><code>String substring(int beginIndex, int endIndex)\n</code></pre> <p>Aqu\u00ed, <code>beginIndex</code> especifica el \u00edndice inicial, y <code>endIndex</code> especifica el punto de detenci\u00f3n. Aqu\u00ed hay un programa que demuestra el uso de <code>substring( )</code> y el principio de cadenas inmutables:</p> <pre><code>// uso de substring()\nclass SubString {\n    public static void main (String[] args){\n        String str=\"Java desde Cero\";\n\n        //Construyendo un substring\n        String substr=str.substring(5,15);\n\n        System.out.println(\"str: \"+str);\n        System.out.println(\"substr: \"+substr);\n    }\n}\n</code></pre> <p>Salida:</p> <pre><code>str: Java desde Cero\nsubstr: desde Cero\n</code></pre> <p>Como puede ver, la cadena original <code>str</code> no se modifica, y <code>substr</code> contiene la subcadena.</p>"},{"location":"UD04/UD04_anexo_ES.html#string-en-argumentos-de-linea-de-comandos","title":"<code>String</code> en Argumentos de L\u00ednea de Comandos","text":"<p>Ahora que conoce la clase String, puede comprender el par\u00e1metro args en main() que ha estado en cada programa mostrado hasta ahora. Muchos programas aceptan lo que se llaman argumentos de l\u00ednea de comandos. Un argumento de l\u00ednea de comandos es la informaci\u00f3n que sigue  directamente el nombre del programa en la l\u00ednea de comando cuando se  ejecuta.</p> <p>Para acceder a los argumentos de la l\u00ednea de comandos  dentro de un programa Java es bastante f\u00e1cil: se almacenan como cadenas  en la matriz String pasada a <code>main()</code>. Por ejemplo, el siguiente programa muestra todos los argumentos de l\u00ednea de comandos con los que se llama:</p> <pre><code>// Mostrando Informaci\u00f3n de L\u00ednea de Comando\nclass DemoLC{\n    public static void main (String[] args){\n        System.out.println(\"Aqu\u00ed se muestran \"+ args.length \n                           + \" argumentos de l\u00ednea de comando.\");\n        System.out.println(\"Estos son: \");\n        for (int i=0; i&lt;args.length; i++){\n            System.out.println(\"arg[\"+i+\"]: \"+args);\n        }\n    }\n}\n</code></pre> <p>Si <code>DemoLC</code> se ejecuta de esta manera,</p> <pre><code>java DemoLC uno dos tres\n</code></pre> <p>ver\u00e1 la siguiente salida:</p> <pre><code>Aqu\u00ed se muestran 3 argumentos de l\u00ednea de comando.\nEstos son:\narg[0]: uno\narg[1]: dos\narg[2]: tres\n</code></pre> <p>Observe que el primer argumento se almacena en el \u00edndice 0, el segundo  argumento se almacena en el \u00edndice 1, y as\u00ed sucesivamente.</p> <p>Para  tener una idea de la forma en que se pueden usar los argumentos de la  l\u00ednea de comandos, considere el siguiente programa. Se necesita un  argumento de l\u00ednea de comandos que especifique el nombre de una persona. Luego busca a trav\u00e9s de una matriz bidimensional de cadenas para ese  nombre. Si encuentra una coincidencia, muestra el n\u00famero de tel\u00e9fono de  esa persona.</p> <pre><code>class Telefono {\n    public static void main (String[] args){\n        String numeros[][]={{ \"Alex\", \"123-456\"},\n                            { \"Juan\", \"145-478\"},\n                            { \"Javier\", \"789-457\"},\n                            { \"Maria\", \"784-554\"}\n                            };\n        int i;\n        if (args.length != 1){\n            System.out.println(\"Ejecute as\u00ed: java Telefono &lt;nombre&gt;\");\n        } else {\n            for (i = 0; i &lt; numeros.length; i++) {\n                System.out.println(numeros[i][0] + \": \" + numeros);\n                break;\n            }\n            if (i == numeros.length){\n                System.out.println(\"Nombre no encontrado.\");\n            }\n        }\n    }\n}\n</code></pre> <p>Aqu\u00ed hay una muestra de ejecuci\u00f3n:</p> <pre><code>java Telefono Alex\nAlex: 123-456\n</code></pre>"},{"location":"UD04/UD04_anexo_ES.html#concatenar-cadenas-en-java","title":"Concatenar cadenas en <code>Java</code>","text":""},{"location":"UD04/UD04_anexo_ES.html#operador","title":"Operador <code>+</code>","text":"<pre><code>String s1 = \"Hola,\";\nString s2 = \"c\u00f3mo estas?\";\nString s3 = s1 + s2;\nSystem.out.println(\"String 1: \" + s1);\nSystem.out.println(\"String 2: \" + s2);\nSystem.out.println(\"Cadena resultante: \" + s3);\n</code></pre> <p>salida:</p> <pre><code>String 1: Hola,\nString 2: c\u00f3mo estas?\nCadena resultante: Hola,c\u00f3mo estas?\n</code></pre>"},{"location":"UD04/UD04_anexo_ES.html#metodo-concat","title":"M\u00e9todo <code>concat()</code>","text":"<pre><code>String s1 = \"Hola,\";\nString s2 = \"c\u00f3mo estas?\";\nString s3 = s1.concat(s2);\nSystem.out.println(\"String 1: \" + s1);\nSystem.out.println(\"String 2: \" + s2);\nSystem.out.println(\"Cadena resultante: \" + s3);\n</code></pre> <p>salida:</p> <pre><code>String 1: Hola,\nString 2: c\u00f3mo estas?\nCadena resultante: Hola,c\u00f3mo estas?\n</code></pre>"},{"location":"UD04/UD04_anexo_ES.html#metodo-append-de-stringbuilder","title":"M\u00e9todo <code>append</code> de <code>StringBuilder</code>","text":"<pre><code>String s3 = (new StringBuilder()).append(\"Hola,\").append(\"c\u00f3mo estas?\").toString();\nSystem.out.println(\"Cadena resultante: \" + s3);\n</code></pre> <p>salida:</p> <pre><code>Cadena resultante: Hola,c\u00f3mo estas?\n</code></pre>"},{"location":"UD04/UD04_anexo_ES.html#cuando-usar-cada-uno","title":"\u00bfCu\u00e1ndo usar cada uno?","text":"<p>Si usas la concatenaci\u00f3n de Strings en un bucle, por ejemplo algo similar a esto:</p> <pre><code>String s = \"\";\nfor (int i = 0; i &lt; 100; i++) {\n    s += \", \" + i;\n}\nSystem.out.println(s);\n</code></pre> <p>Para el caso anterior, lo mejor seria utilitzar el m\u00e9todo <code>append</code> de <code>StringBuilder</code> en lugar del operador <code>+</code> porque es mucho m\u00e1s r\u00e1pido y consume menos memoria.</p> <p>Versi\u00f3n con append:</p> <pre><code>StringBuilder s = new StringBuilder();\nfor (int i = 1; i &lt; 100; i++) {\n    s.append(\", \").append(i);\n}\nSystem.out.println(s.toString());\n</code></pre> <p>Si solo tienes una sentencia similar a esta:</p> <pre><code>String s = \"1, \" + \"2, \" + \"3, \" + \"4, \" ...;\n</code></pre> <p>Entonces puedes usar el operador <code>+</code> sin problemas, porque el compilador usar\u00e1 <code>StringBuilder</code> autom\u00e1ticamente.</p>"},{"location":"UD04/UD04_ejercicios_ES.html","title":"Ejercicios","text":""},{"location":"UD04/UD04_ejercicios_ES.html#ejercicios-de-la-ud04","title":"Ejercicios de la UD04","text":""},{"location":"UD04/UD04_ejercicios_ES.html#arrays-ejercicios-de-recorrido","title":"Arrays. Ejercicios de recorrido","text":"<ol> <li>(Estaturas*)* Escribir un programa que lea de teclado la estatura de 10 personas y las almacene en un array. Al finalizar la introducci\u00f3n de datos, se mostrar\u00e1n al usuario los datos introducidos con el siguiente formato:</li> </ol> <pre><code>Persona 1: 1.85 m.\nPersona 2: 1.53 m.\n...\nPersona 10: 1.23 m.\n</code></pre> <ol> <li>(Lluvias) Se dispone de un fichero, de nombre lluviasEnero.txt, que contiene 31 datos correspondientes a las lluvias ca\u00eddas en el mes de enero del pasado a\u00f1o. Se desea analizar los datos del fichero para averiguar:</li> </ol> <ul> <li>La lluvia total ca\u00edda en el mes.</li> <li>La cantidad media de lluvias del mes.</li> <li>La cantidad m\u00e1s grande de lluvia ca\u00edda en un solo d\u00eda.</li> <li>Cual fue el d\u00eda que m\u00e1s llovi\u00f3.</li> <li>La cantidad m\u00e1s peque\u00f1a de lluvia ca\u00edda en un solo d\u00eda.</li> <li>Cual fue el d\u00eda que menos llovi\u00f3.</li> <li>En cuantos d\u00edas no llovi\u00f3 nada.</li> <li>En cuantos d\u00edas la lluvia super\u00f3 la media.</li> <li>Si en la primera quincena del mes llovi\u00f3 m\u00e1s o menos que en la segunda. </li> <li>En cuantos d\u00edas la lluvia fue menor que la del d\u00eda siguiente.</li> </ul> <p>Para resolver el problema se desarrollar\u00e1n los siguientes m\u00e9todos:</p> <ol> <li><code>public static void leerArray (double v[], String nombreFichero)</code>, que rellena el array v con datos que se encuentran en el fichero especificado. El n\u00famero de datos a leer vendr\u00e1 determinado por el tama\u00f1o del array y no por la cantidad de datos que hay en el fichero.</li> <li><code>public static double suma(double[] v)</code>, que devuelve la suma de los elementos del array v</li> <li><code>public static double media(double v[])</code>, que devuelve la media de los elementos del array v. Se puede hacer uso del m\u00e9todo del apartado anterior.</li> <li><code>public static int contarMayorQueMedia(double v[])</code>, que devuelve la cantidad de elementos del array v que son mayores que la media. Se puede hacer uso del m\u00e9todo del apartado anterior.</li> <li><code>public static double maximo(double v[])</code>, que devuelve el valor m\u00e1s grande almacenado en el array v.</li> <li><code>public static double minimo(double v[])</code>, que devuelve el valor m\u00e1s peque\u00f1o almacenado en el array v.</li> <li><code>public static int posMaximo(double v[])</code>, que devuelve la posici\u00f3n del elemento m\u00e1s grande de v. Si \u00e9ste se repite en el array es suficiente devolver la posici\u00f3n en que aparece por primera vez.</li> <li><code>public static int posMinimo(double v[])</code>, que devuelve la posici\u00f3n del elemento m\u00e1s peque\u00f1o de v. Si \u00e9ste se repite en el array es suficiente devolver la posici\u00f3n en que aparece por primera vez.</li> <li><code>public static int contarApariciones(double v[], double x)</code>, que devuelve el n\u00famero de veces que el valor x aparece en el array v.</li> <li><code>public static double sumaParcial(double v[], int izq, int der)</code>, que devuelve la suma de los elementos del array v que est\u00e1n entre las posiciones izq y der.</li> <li><code>public static int menoresQueElSiguiente(double v[])</code>, que devuelve el n\u00famero de elementos de v que son menores que el elemento que tienen a continuaci\u00f3n. </li> </ol> <p>Adem\u00e1s dispones de un archivo <code>Lluvias.java</code> (incompleto), que el alumnado deber\u00e1 completar. El resultado deberia ser similar a este:</p> <pre><code>La suma de las lluvias es 93,30 litros\nLa media de las lluvias es 3,01 litros\nLa m\u00e1xima de las lluvias es 12,40 litros\nLa m\u00e1xima de las lluvias fu\u00e9 el dia 17\nLa m\u00ednima de las lluvias es 0,00 litros\nLa m\u00ednima de las lluvias fu\u00e9 el dia 1\nHa habido un total de 16 dias sin lluvia\nHa habido un total de 11 dias en los que la lluvia ha superado la media\nLa segunda quincena ha llovido m\u00e1s que la otra\nHa habido 8 dias en los que ha llovido menos que el dia siguiente\n</code></pre> <ol> <li>(Dados) El lanzamiento de un dado es un experimento aleatorio en el que cada n\u00famero tiene las mismas probabilidades de salir. Seg\u00fan esto, cuantas m\u00e1s veces lancemos el dado, m\u00e1s se igualar\u00e1n las veces que aparece cada uno de los 6 n\u00fameros. Vamos a hacer un programa para comprobarlo.</li> </ol> <ul> <li> <p>Generaremos un n\u00famero aleatorio entre 1 y 6 un n\u00famero determinado de veces (por ejemplo 100.000). Para ello puedes usar el m\u00e9todo <code>random</code> de la clase <code>Math</code>.</p> </li> <li> <p>Tras cada lanzamiento incrementaremos un contador correspondiente a la cifra que ha salido. Para ello crearemos un array <code>veces</code> de 7 componentes, en el que el <code>veces[1]</code> servir\u00e1 para contar las veces que sale un 1, <code>veces[2]</code> para contar las veces que sale un 2, etc. <code>veces[0]</code> no se usar\u00e1.</p> </li> <li> <p>Cada, por ejemplo, 1.000 lanzamientos mostraremos por pantalla las estad\u00edsticas que indican que porcentaje de veces ha aparecido cada n\u00famero en los lanzamientos hechos hasta ese momento. Por ejemplo:</p> <pre><code>N\u00famero de lanzamientos: 1000\n1: 18 %\n2: 14 %\n3: 21 %\n4: 10 %\n5: 18 %\n6: 19 %\n\nN\u00famero de lanzamientos: 2000\n...\n</code></pre> </li> <li> <p>Para el n\u00famero de lanzamientos (100.000 en el ejemplo) y para la frecuencia con que se muestran las estad\u00edsticas (1.000 en el ejemplo) utilizaremos dos constantes enteras, de nombre <code>LANZAMIENTOS</code> y <code>FRECUENCIA</code>, de esta forma podremos variar de forma c\u00f3moda el modo en que probamos el programa.</p> </li> </ul> <ol> <li>(Invertir) Dise\u00f1ar un m\u00e9todo <code>public static int[] invertirArray(int[] v)</code>, que dado un array <code>v</code> devuelva otro con los elementos en orden inverso. Es decir, el \u00faltimo en primera posici\u00f3n, el pen\u00faltimo en segunda, etc.</li> </ol> <p>Desde el m\u00e9todo <code>main</code> crearemos e inicializaremos un array, llamaremos a <code>invertirArray</code> y mostraremos el array invertido.</p> <p>NOTA: Puede ser \u00fatil un m\u00e9todo que imprima por pantalla un Array <code>public static void imprimirArray(int[] v)</code>, y as\u00ed poder imprimir el Array v</p> <ol> <li>(SumasParciales) Se quiere dise\u00f1ar un m\u00e9todo <code>public static int[] sumaParcial(int[] v)</code>, que dado un array de enteros <code>v</code>, devuelva otro array de enteros t de forma que <code>t[i] = v[0] + v[1] + ...+ v[i]</code>. Es decir:</li> </ol> <pre><code>t[0] = v[0]\nt[1] = v[0] + v[1]\nt[2] = v[0] + v[1] + v[2]\n...\nt[10] = v[0] + v[1] + v[2] + ... + v[10]\n</code></pre> <p>Desde el m\u00e9todo main crearemos e inicializaremos un array, llamaremos a <code>sumaParcial</code> y mostraremos el array resultante.</p> <p>Ejemplo de salida, suponiendo que <code>v = {2,4,1,0,6}</code>:</p> <pre><code>El valor del array con sumas parciales es:\n2 6 7 7 13\n</code></pre> <ol> <li>(Rotaciones) Rotar una posici\u00f3n a la derecha los elementos de un array consiste en mover cada elemento del array una posici\u00f3n a la derecha. El \u00faltimo elemento pasa a la posici\u00f3n 0 del array. Por ejemplo si rotamos a la derecha el array <code>{1,2,3,4}</code> obtendr\u00edamos <code>{4,1,2,3}</code>. </li> </ol> <ul> <li> <p>Dise\u00f1ar un m\u00e9todo <code>public static void rotarDerecha(int[] v)</code>, que dado un array de enteros rote sus elementos un posici\u00f3n a la derecha.</p> </li> <li> <p>En el m\u00e9todo <code>main</code> crearemos e inicializaremos un array y rotaremos sus elementos tantas veces como elementos tenga el array (mostrando cada vez su contenido), de forma que al final el array quedar\u00e1 en su estado original. Por ejemplo, si inicialmente el array contiene <code>{7,3,4,2}</code>, el programa mostrar\u00e1</p> <pre><code>Rotaci\u00f3n 1: 2 7 3 4\nRotaci\u00f3n 2: 4 2 7 3 \nRotaci\u00f3n 3: 3 4 2 7\nRotaci\u00f3n 4: 7 3 4 2\n</code></pre> </li> <li> <p>Dise\u00f1a tambi\u00e9n un m\u00e9todo para rotar a la izquierda y pru\u00e9balo de la misma forma.</p> </li> </ul> <ol> <li>(DosArrays) Desarrolla los siguientes m\u00e9todos en los que intervienen dos arrays y pru\u00e9balos desde el m\u00e9todo <code>main</code>    - <code>public static double[] sumaArraysIguales (double[] a, double[] b)</code> que dados dos arrays de <code>double</code> <code>a</code> y <code>b</code>, del mismo tama\u00f1o devuelva un array con la suma de los elementos de <code>a</code> y <code>b</code>, es decir, devolver\u00e1 el array <code>{a[0]+b[0], a[1]+b[1], ....}</code>    - <code>public static double[] sumaArrays(double[] a, double[] b)</code>. Repite el ejercicio anterior pero teniendo en cuenta que <code>a</code> y <code>b</code> podr\u00edan tener longitudes distintas. En tal caso el n\u00famero de elementos del array resultante coincidir\u00e1 con la longitud del array de mayor tama\u00f1o.</li> </ol>"},{"location":"UD04/UD04_ejercicios_ES.html#arrays-ejercicios-de-busqueda","title":"Arrays. Ejercicios de b\u00fasqueda","text":"<ol> <li>(Lluvias \u2013 continuaci\u00f3n). Queremos incorporar al programa la siguiente informaci\u00f3n:</li> </ol> <ul> <li>Cual fue el primer d\u00eda del mes en que llovi\u00f3 exactamente 19 litros (si no hubo ninguno mostrar un mensaje por pantalla indic\u00e1ndolo)</li> <li>Cual fue el \u00faltimo d\u00eda del mes en que llovi\u00f3 ex\u00e1ctamente 8 litros (si no hubo ninguno mostrar un mensaje por pantalla indic\u00e1ndolo)</li> </ul> <p>Para ello desarrollar\u00e1n los siguientes m\u00e9todos:</p> <ul> <li><code>public static int posPrimero(double[] v, double x)</code>, que devuelve la posici\u00f3n de la primera aparici\u00f3n de <code>x</code> en el array <code>v</code>. Si <code>x</code> no est\u00e1 en <code>v</code> el m\u00e9todo devolver\u00e1 -1. El m\u00e9todo realizar\u00e1 una b\u00fasqueda ascendente para proporcionar el resultado.</li> <li><code>public static int posUltimo(double[] v, double x)</code>, que devuelve la posici\u00f3n de la \u00faltima aparici\u00f3n de <code>x</code> en el array <code>v</code>. Si <code>x</code> no est\u00e1 en <code>v</code> el m\u00e9todo devolver\u00e1 -1. El m\u00e9todo realizar\u00e1 una b\u00fasqueda descendente para proporcionar el resultado.</li> </ul> <ol> <li>(Tocayos) Disponemos de los nombres de dos grupos de personas (dos arrays de <code>String</code>). Dentro de cada grupo todas las personas tienen nombres distintos, pero queremos saber cu\u00e1ntas personas del primer grupo tienen alg\u00fan tocayo en el segundo grupo, es decir, el mismo nombre que alguna persona del segundo grupo. Escribir un programa que resuelva el problema (inicializa los dos arrays con los valores que quieras y dise\u00f1a los m\u00e9todos que consideres necesarios).</li> </ol> <p>Por ejemplo, si los nombres son {\"miguel\",\"jos\u00e9\",\"ana\",\"mar\u00eda\"} y {\"Ana\", \"luj\u00e1n\", \"juan\", \"jos\u00e9\", \"pepa\", \"\u00e1ngela\", \"sof\u00eda\", \"andr\u00e9s\", \"bartolo\"} , el programa mostrar\u00eda:</p> <pre><code>jos\u00e9 tiene tocayo en el segundo grupo.\nana tiene tocayo en el segundo grupo.\nTOTAL: 2 personas del primer grupo tienen tocayo.\n</code></pre> <p>Optimiza el algoritmo para que no tenga en cuenta si se escribe el nombre en may\u00fasculas, min\u00fasculas o cualquier combinaci\u00f3n de may\u00fasculas y min\u00fasculas.</p> <ol> <li> <p>(SumaDespuesImpar) Escribir un m\u00e9todo que, dado un array de enteros, devuelva la suma de los elementos que aparecen tras el primer valor impar. Usar <code>main</code> para probar el m\u00e9todo.</p> </li> <li> <p>(HayPares) Para determinar si existe alg\u00fan valor par en un array se proponen varias soluciones. Indica cual/cuales son v\u00e1lidas para resolver el problema.</p> </li> </ol> <pre><code>public static boolean haypares1(int[] v) {\n\n    int i = 0;\n\n    while (i &lt; v.length &amp;&amp; v[i] % 2 != 0) {\n        i++;\n    }\n\n    if (v[i] % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\npublic static boolean haypares2(int v[]) {\n\n    int i = 0;\n\n    while (i &lt; v.length &amp;&amp; v[i] % 2 != 0) {\n        i++;\n    }\n\n    if (i &lt; v.length) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\npublic static boolean haypares3(int v[]) {\n\n    int i = 0;\n\n    while (v[i] % 2 != 0 &amp;&amp; i &lt; v.length) {\n        i++;\n    }\n\n    if (i &lt; v.length) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\npublic static boolean haypares4(int v[]) {\n\n    int i = 0;\n\n    boolean encontrado = false;\n\n    while (i &lt;= v.length &amp;&amp; !encontrado) {\n\n        if (v[i] % 2 == 0) {\n            encontrado = true;\n        } else {\n            i++;\n        }\n\n    }\n\n    return encontrado;\n\n}\n</code></pre> <p></p><pre><code>public static boolean haypares5(int v[]) {\n\n    int i = 0;\n\n    boolean encontrado = false;\n\n    while (i &lt; v.length &amp;&amp; !encontrado) {\n\n        if (v[i] % 2 == 0) {\n            encontrado = true;\n        }\n\n        i++;\n\n    }\n\n    return encontrado;\n\n}\n\npublic static boolean haypares6(int v[]) {\n\n    int i = 0;\n\n    while (i &lt; v.length) {\n\n        if (v[i] % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n}\n\npublic static boolean haypares7(int v[]) {\n\n    int i = 0;\n\n    while (i &lt; v.length) {\n\n        if (v[i] % 2 == 0) {\n            return true;\n        }\n\n        i++;\n\n    }\n\n    return false;\n\n}\n</code></pre> 4. (Capic\u00faa) Escribir un m\u00e9todo para determinar si un array de palabras (<code>String</code>) es capic\u00faa, esto es, si la primera y \u00faltima palabra del array son la misma, la segunda y la pen\u00faltima palabras tambi\u00e9n lo son, y as\u00ed sucesivamente. Escribir el m\u00e9todo main para probar el m\u00e9todo anterior. <ol> <li>(Subsecuencia) Escribir un m\u00e9todo que, dado un array, determine la posici\u00f3n de la primera subsecuencia del array que comprenda al menos tres n\u00fameros enteros consecutivos en posiciones consecutivas del array. De no existir dicha secuencia devolver\u00e1 -1. </li> </ol> <p>Por ejemplo: en el array {23, 8, 12, 6, 7, 9, 10, 11, 2} hay 3 n\u00fameros consecutivos en tres posiciones consecutivas, a partir de la posici\u00f3n 5: {9,10,11}</p> <ol> <li>(MismosValores) Se desea comprobar si dos arrays de <code>double</code> contienen los mismos valores, aunque sea en orden distinto. Para ello se ha escrito el siguiente m\u00e9todo, que aparece incompleto:</li> </ol> <pre><code>public static boolean mismosValores(double[] v1, double[] v2) {\n    boolean encontrado = false;\n    int i = 0;\n    while (i &lt; v1.length &amp;&amp; !encontrado) {\n        boolean encontrado2 = false;\n        int j = 0;\n        while (j &lt; v2.length &amp;&amp; !encontrado2) {\n            if (v1[?] == v2[?]) {\n                encontrado2 = true;\n                i++;\n            } else {\n                ?;\n            }\n        }\n        if (encontrado2 == ?) {\n            encontrado = true;\n        }\n    }\n    return !encontrado;\n}\n</code></pre> <p>\u200b   Completa el programa en los lugares donde aparece el s\u00edmbolo </p>"},{"location":"UD04/UD04_ejercicios_ES.html#matrices","title":"Matrices","text":"<ol> <li> <p>(Notas). Se dispone de una matriz que contiene las notas de una serie de alumnos en una serie de asignaturas. Cada fila corresponde a un alumno, mientras que cada columna corresponde a una asignatura. Desarrollar m\u00e9todos para:</p> </li> <li> <p>Imprimir las notas alumno por alumno. </p> </li> <li>Imprimir las notas asignatura por asignatura.</li> <li>Imprimir la media de cada alumno.</li> <li>Imprimir la media de cada asignatura.</li> <li>Indicar cual es la asignatura m\u00e1s f\u00e1cil, es decir la de mayor nota media.</li> <li>\u00bfHay alg\u00fan alumno que suspenda todas las asignaturas? \u00bfQui\u00e9n?</li> <li>\u00bfHay alguna asignatura en la que suspendan todos los alumnos? \u00bfCual es?</li> </ol> <p>Generar la matriz (al menos 5x5) en el m\u00e9todo main, rellenarla, y comprobar los m\u00e9todos anteriores.</p> <ol> <li>(Ventas). Una empresa comercializa 10 productos para lo cual tiene 5 distribuidores.</li> </ol> <p>Los datos de ventas los tenemos almacenados en una matriz de 5 filas x 10 columnas, <code>ventas</code>, con el n\u00famero de unidades de cada producto que ha vendido cada distribuidor. Cada fila corresponde a las ventas de un distribuidor (la primera fila, del primer distribuidor, etc.), mientras que cada columna corresponde a un producto :</p> 100 25 33 89 23 90 87 6 5 233 28 765 65 77 987 55 4 66 4 8 ... <p>El array <code>precio</code>, de 10 elementos*,* contiene el precio en \u20ac de cada uno de los 10 productos.</p> 125.2 234.4 453.9 ... <p>Escribe el programa y los m\u00e9todos necesarios para averiguar:</p> <ol> <li>Distribuidor que m\u00e1s art\u00edculos ha vendido.</li> <li>El art\u00edculo que m\u00e1s se vende.</li> <li> <p>Sabiendo que los distribuidores que realizan ventas superiores a 30.000\u20ac cobran una comisi\u00f3n del 5% de las ventas y los que superan los 70.000\u20ac una comisi\u00f3n del 8%, emite un informe de los distribuidores que cobran comisi\u00f3n, indicando n\u00ba de distribuidor, importe de las ventas, porcentaje de comisi\u00f3n e importe de la comisi\u00f3n en \u20ac.</p> </li> <li> <p>(Utiles) Dada una matr\u00edz con el mismo n\u00famero de filas y de columnas, dise\u00f1ar los siguientes m\u00e9todos:</p> </li> </ol> <ul> <li> <p><code>public static void mostrarDiagonal(int[][] m)</code> que muestre por pantalla los elementos de la diagonal principal.</p> </li> <li> <p><code>public static int filaDelMayor (int[][] m)</code>, que devuelva la fila en que se encuentra el mayor elemento de la matriz.</p> </li> <li> <p><code>public static void intercambiarFilas(int[][] m, int f1, int f2)</code>, que intercambie los elementos de las filas indicadas.</p> </li> <li> <p>Escribir un m\u00e9todo <code>public static boolean esSimetrica (int[][] m)</code> que devuelva true si la matriz m es sim\u00e9trica. Una matriz es sim\u00e9trica si tiene el mismo n\u00famero de filas que de columnas y adem\u00e1s <code>m[i][j] = m[j][i]</code> para todo par de \u00edndices <code>i,j</code>.</p> <p>Por ejemplo, es sim\u00e9trica:</p> <pre><code>1 5 3\n5 4 7\n3 7 5\n</code></pre> </li> </ul> <ol> <li>(Tetris) Supongamos que estamos desarrollando un Tetris en Java y para representar la partida utilizamos una matriz bidimensional de enteros 15 filas por 8 columnas. Se utiliza el valor 0 para indicar que la celda est\u00e1 vac\u00eda y un valor distinto de cero para las celdas que contienen parte de una pieza (distintos valores para distintos colores):</li> </ol> <p></p> <p>Escribir un m\u00e9todo que reciba la matriz y elimine las filas completas, haciendo caer las piezas que hay por encima de las celdas eliminadas tal y como se hace en el juego.</p>"},{"location":"UD04/UD04_ejercicios_ES.html#puede-ser-util-para-ver-resultados-crear-un-metodo-public-static-void-imprimepartidaint-partida-que-imprima-el-estado-actual-de-la-matriz-partida","title":"Puede ser \u00fatil para ver resultados crear un m\u00e9todo <code>public static void imprimePartida(int[][] partida)</code> que imprima el estado actual de la matriz <code>partida</code>","text":""},{"location":"UD04/UD04_ejercicios_ES.html#recursividad","title":"Recursividad","text":"<ol> <li> <p>(Palindromo) Implemente, tanto de forma recursiva como de forma iterativa, una funci\u00f3n que nos diga si una cadena de caracteres es sim\u00e9trica (un pal\u00edndromo). Por ejemplo, \"DABALEARROZALAZORRAELABAD\" es un pal\u00edndromo.</p> <p>\"La ruta nos aporto otro paso natural\"</p> <p>\"Nada, yo soy Adan\"</p> <p>\"A mama Roma le aviva el amor a papa y a papa Roma le aviva el amor a mama\"</p> <p>\"Ana, la taca\u00f1a catalana\"</p> <p>\"Yo hago yoga hoy\"</p> </li> <li> <p>(InvertirCadena) Implemente, tanto de forma recursiva como de forma iterativa, una funci\u00f3n que le d\u00e9 la vuelta a una cadena de caracteres. </p> </li> </ol> <ol> <li>(Combinaciones) Implemente, tanto de forma recursiva como de forma iterativa, una funci\u00f3n que permitan calcular el n\u00famero de combinaciones de <code>n</code> elementos tomados de <code>m</code> en <code>m</code>. </li> </ol> <p>Realice dos versiones de la implementaci\u00f3n iterativa, una aplicando la f\u00f3rmula y otra utilizando una matriz auxiliar (en la que se vaya construyendo el tri\u00e1ngulo de Pascal).</p> <ol> <li>(MCD) Implemente, tanto de forma recursiva como de forma iterativa, una funci\u00f3n que nos devuelva el m\u00e1ximo com\u00fan divisor de dos n\u00fameros enteros utilizando el algoritmo de Euclides. </li> </ol> <pre><code>ALGORITMO DE EUCLIDES MCD\nDados dos n\u00fameros enteros positivos m y n, tal que m &gt; n, para encontrar su m\u00e1ximo com\u00fan divisor (es decir, el mayor entero positivo que divide a ambos): \n- Dividir m por n para obtener el resto r (0 \u2264 r &lt; n) \n- Si r = 0, el MCD es n. \n- Si no, el m\u00e1ximo com\u00fan divisor es MCD(n,r). \n</code></pre> <ol> <li> <p>(MergeSort) La ordenaci\u00f3n por mezcla (mergesort) es un m\u00e9todo de ordenaci\u00f3n que se basa en un principio muy simple: se ordenan las dos mitades de un vector y, una vez ordenadas, se mezclan. Escriba un programa que implemente este m\u00e9todo de ordenaci\u00f3n. </p> </li> <li> <p>(Descomposiciones) Dise\u00f1e e implemente un algoritmo que imprima todas las posibles descomposiciones de un n\u00famero natural como suma de n\u00fameros menores que \u00e9l (sumas con m\u00e1s de un sumando). </p> </li> <li> <p>(Determinante) Dise\u00f1e e implemente un m\u00e9todo recursivo que nos permita obtener el determinante de una matriz cuadrada de dimensi\u00f3n <code>n</code>.</p> </li> <li> <p>(CifrasYLetras) Dise\u00f1e e implemente un programa que juegue al juego de cifras de  \"Cifras y Letras \". El juego consiste en obtener, a partir de 6 n\u00fameros, un n\u00famero lo m\u00e1s cercano posible a un n\u00famero de tres cifras realizando operaciones aritm\u00e9ticas con los 6 n\u00fameros.</p> </li> <li> <p>(OchoReinas) Problema de las 8 reinas: Se trata de buscar la forma de colocar 8 reinas en un tablero de ajedrez de forma que ninguna de ellas amenace ni se vea amenazada por otra reina.</p> </li> </ol> <pre><code> Algoritmo: \n - Colocar la reina i en la primera casilla v\u00e1lida de la fila i \n - Si una reina no puede llegar a colocarse en ninguna casilla, se vuelve atr\u00e1s y se cambia la posici\u00f3n de la reina de la fila i-1\n - Intentar colocar las reinas restantes en las filas que quedan \n</code></pre> <ol> <li> <p>(Laberinto) Salida de un laberinto: Se trata de encontrar un camino que nos permita salir de un laberinto definido en una matriz NxN. Para movernos por el laberinto, s\u00f3lo podemos pasar de una casilla a otra que sea adyacente a la primera y no est\u00e9 marcada como una casilla prohibida (esto es, las casillas prohibidas determinan las paredes que forman el laberinto). </p> <pre><code>Algoritmo:\n- Se comienza en la casilla (0,0) y se termina en la casilla (N-1, N-1) \n- Nos movemos a una celda adyacente si esto es posible. \n- Cuando llegamos a una situaci\u00f3n en la que no podemos realizar ning\u00fan movimiento que nos lleve a una celda que no hayamos visitado ya, retrocedemos sobre nuestros pasos y buscamos un camino alternativo. \n</code></pre> </li> </ol>"},{"location":"UD04/UD04_ejercicios_ES.html#te-atreves-a-implementar-una-solucion-que-permita-la-entrada-con-espacios-y-permitiendo-espacios-y-signos-de-puntuacion","title":"\u00bfTe atreves a implementar una soluci\u00f3n que permita la entrada con espacios? \u00bfY permitiendo espacios y signos de puntuaci\u00f3n?\"","text":""},{"location":"UD04/UD04_ejercicios_ES.html#obviamente-si-la-cadena-es-un-palindromo-la-cadena-y-su-inversa-coincidiran","title":"Obviamente, si la cadena es un pal\u00edndromo, la cadena y su inversa coincidir\u00e1n.","text":""},{"location":"UD05/Novedades%20respecto%20a%20la%20UD02.html","title":"Novedades respecto a la UD02","text":""},{"location":"UD05/Novedades%20respecto%20a%20la%20UD02.html#novedades-respecto-a-la-ud02","title":"Novedades respecto a la UD02","text":"<p>3.2. Modificadores de acceso</p> <p>4.3. Modificadores en la declaraci\u00f3n de un m\u00e9todo</p> <p>4.7. Sobrecarga de operadores</p> <p>5.1 Ocultaci\u00f3n de atributos. M\u00e9todos de acceso</p> <p>5.2 Ocultaci\u00f3n de m\u00e9todos</p> <p>7.4 Constructor de copia</p> <ol> <li> <p>Clases anidada, internas</p> </li> <li> <p>Introducci\u00f3n a la herencia</p> </li> <li> <p>Conversi\u00f3n entre objetos (Casting)</p> </li> <li> <p>Acceso a m\u00e9todos de la superclase</p> </li> <li>Empaquetado de clases</li> </ol>"},{"location":"UD05/UD05_ES.html","title":"Desarrollo de clases","text":""},{"location":"UD05/UD05_ES.html#desarrollo-de-clases","title":"Desarrollo de clases","text":""},{"location":"UD05/UD05_ES.html#como-estudiar-esta-unidad","title":"\u00bfC\u00f3mo estudiar esta unidad?","text":"<p>Si lees esta unidad de principio a fin, veras que es como la Unidad 2: Utilizaci\u00f3n de Objetos y Clases, pero con algunos conceptos m\u00e1s desarrollados y otros nuevos.</p> <p>Si tienes absolutamente clara la Unidad 2, puedes leer solamente los siguientes puntos, que contienen las principales novedades. Si por el contrario tienes dudas, lagunas o algunos conceptos no quedaron claros, este es la \u00faltima oportunidad de estudiarlos, preguntar al docente, entender los ejemplos y hacer los ejercicios. Desde esta unidad en adelante, los Objetos y Clases formaran parte del dia a dia, si te pierdes ahora ser\u00e1 dificil seguir el ritmo.</p> <p>Novedades respecto a la Unidad 2:</p> <ul> <li> <p>4.2. Modificadores de acceso</p> </li> <li> <p>5.3. Modificadores en la declaraci\u00f3n de un m\u00e9todo</p> </li> <li> <p>5.7. Sobrecarga de operadores</p> </li> <li> <p>6.1 Ocultaci\u00f3n de atributos. M\u00e9todos de acceso</p> </li> <li> <p>6.2 Ocultaci\u00f3n de m\u00e9todos</p> </li> <li> <p>8.4 Constructores de copia</p> </li> <li>9 Clases Anidadas, Clases Internas (Inner Class)</li> <li>10 Introducci\u00f3n a la herencia</li> <li>11 Conversi\u00f3n entre objetos (Casting)</li> <li>12 Acceso a m\u00e9todos de la superclase</li> <li>13 Empaquetado de clases</li> </ul>"},{"location":"UD05/UD05_ES.html#introduccion","title":"Introducci\u00f3n","text":"<p>Como ya has visto en anteriores unidades, las clases est\u00e1n compuestas por atributos y m\u00e9todos. Una clase especifica las caracter\u00edsticas comunes de un conjunto de objetos. </p> <p>De esta forma los programas que escribas estar\u00e1n formados por un conjunto de clases a partir de las cuales ir\u00e1s creando objetos que se interrelacionar\u00e1n unos con otros.</p> <p>En esta unidad se va a utilizar el concepto de objeto as\u00ed como algunas de las diversas estructuras de control b\u00e1sicas que ofrece cualquier lenguaje de programaci\u00f3n. Todos esos conceptos han sido explicados y utilizados en las unidades anteriores. Si consideras que es necesario hacer un repaso del concepto de objeto o del uso de las estructuras de control elementales, \u00e9ste es el momento de hacerlo.</p>"},{"location":"UD05/UD05_ES.html#repaso-del-concepto-de-objeto","title":"Repaso del concepto de objeto","text":"<p>Desde el comienzo del m\u00f3dulo llevas utilizando el concepto de objeto para desarrollar tus programas de ejemplo. En las unidades anteriores se ha descrito un objeto como una entidad que contiene informaci\u00f3n y que es capaz de realizar ciertas operaciones con esa informaci\u00f3n. Seg\u00fan los valores que tenga esa informaci\u00f3n el objeto tendr\u00e1 un estado determinado y seg\u00fan las operaciones que pueda llevar a cabo con esos datos ser\u00e1n responsables de un comportamiento concreto.</p> <p>Recuerda que entre las caracter\u00edsticas fundamentales de un objeto se encontraban la identidad (los objetos son \u00fanicos y por tanto distinguibles entre s\u00ed, aunque pueda haber objetos exactamente iguales), un estado (los atributos que describen al objeto y los valores que tienen en cada momento ) y un determinado comportamiento (acciones que se pueden realizar sobre el objeto).</p> <p>Algunos ejemplos de objetos que podr\u00edamos imaginar podr\u00edan ser:</p> <ul> <li>Un coche de color rojo, marca SEAT, modelo Toledo, del a\u00f1o 2003. En este ejemplo tenemos una serie de atributos, como el color (en este caso rojo), la marca, el modelo, el a\u00f1o, etc. As\u00ed mismo tambi\u00e9n podr\u00edamos imaginar determinadas caracter\u00edsticas como la cantidad de combustible que le queda, o el n\u00famero de kil\u00f3metros recorridos hasta el momento.</li> <li>Un coche de color amarillo, marca Opel, modelo Astra, del a\u00f1o 2002.</li> <li>Otro coche de color amarillo, marca Opel, modelo Astra y tambi\u00e9n del a\u00f1o 2002. Se tratar\u00eda de otro objeto con las mismas propiedades que el anterior, pero ser\u00eda un segundo objeto.</li> <li>Un cocodrilo de cuatro metros de longitud y de veinte a\u00f1os de edad. </li> <li>Un c\u00edrculo de radio 2 cent\u00edmetros, con centro en las coordenadas (0,0) y relleno de color amarillo.</li> <li>Un c\u00edrculo de radio 3 cent\u00edmetros, con centro en las coordenadas (1,2) y relleno de color verde.</li> </ul> <p>Si observas los ejemplos anteriores podr\u00e1s distinguir sin demasiada dificultad al menos tres familias de objetos diferentes, que no tienen nada que ver una con otra:</p> <ul> <li>Los coches.</li> <li>Los c\u00edrculos.</li> <li>Los cocodrilos.</li> </ul> <p>Es de suponer entonces que cada objeto tendr\u00e1 determinadas posibilidades de comportamiento (acciones) dependiendo de la familia a la que pertenezcan. Por ejemplo, en el caso de los coches podr\u00edamos imaginar acciones como: arrancar, frenar, acelerar, cambiar de marcha, etc. En el caso de los cocodrilos podr\u00edas imaginar otras acciones como: desplazarse, comer, dormir, cazar, etc. Para el caso del c\u00edrculo se podr\u00edan plantear acciones como: c\u00e1lculo de la superficie del c\u00edrculo, c\u00e1lculo de la longitud de la circunferencia que lo rodea, etc.</p> <p>Por otro lado, tambi\u00e9n podr\u00edas imaginar algunos atributos cuyos valores podr\u00edan ir cambiando en funci\u00f3n de las acciones que se realizaran sobre el objeto: ubicaci\u00f3n del coche (coordenadas), velocidad instant\u00e1nea, kil\u00f3metros recorridos, velocidad media, cantidad de combustible en el dep\u00f3sito, etc. En el caso de los cocodrilos podr\u00edas imaginar otros atributos como: peso actual, el n\u00famero de dientes actuales (ir\u00e1 perdiendo algunos a lo largo de su vida), el n\u00famero de presas que ha cazado hasta el momento, etc.</p> <p>Como puedes ver, un objeto puede ser cualquier cosa que puedas describir en t\u00e9rminos de atributos y acciones. </p> <p>Un objeto no es m\u00e1s que la representaci\u00f3n de cualquier entidad concreta o abstracta que puedas percibir o imaginar y que pueda resultar de utilidad para modelar los elementos el entorno del problema que deseas resolver.</p>"},{"location":"UD05/UD05_ES.html#el-concepto-de-clase","title":"El concepto de clase","text":"<p>Est\u00e1 claro que dentro de un mismo programa tendr\u00e1s la oportunidad de encontrar decenas, cientos o incluso miles de objetos. En algunos casos no se parecer\u00e1n en nada unos a otros, pero tambi\u00e9n podr\u00e1s observar que habr\u00e1 muchos que tengan un gran parecido, compartiendo un mismo comportamiento y unos mismos atributos. Habr\u00e1 muchos objetos que s\u00f3lo se diferenciaran por los valores que toman algunos de esos atributos.</p> <p>Es aqu\u00ed donde entra en escena el concepto de clase. Est\u00e1 claro que no podemos definir la estructura y el comportamiento de cada objeto cada vez que va a ser utilizado dentro de un programa, pues la escritura del c\u00f3digo ser\u00eda una tarea interminable y redundante. La idea es poder disponer de una plantilla o modelo para cada conjunto de objetos que sean del mismo tipo, es decir, que tengan los mismos atributos y un comportamiento similar.</p> <p>Una clase consiste en la definici\u00f3n de un tipo de objeto. Se trata de una descripci\u00f3n detallada de c\u00f3mo van a ser los objetos que pertenezcan a esa clase indicando qu\u00e9 tipo de informaci\u00f3n contendr\u00e1n (atributos) y c\u00f3mo se podr\u00e1 interactuar con ellos (comportamiento).</p> <p>Como ya has visto en unidades anteriores, una clase consiste en un plantilla en la que se especifican:</p> <ul> <li>Los atributos que van a ser comunes a todos los objetos que pertenezcan a esa clase (informaci\u00f3n).</li> <li>Los m\u00e9todos que permiten interactuar con esos objetos (comportamiento).</li> </ul> <p>A partir de este momento podr\u00e1s hablar ya sin confusi\u00f3n de objetos y de clases,sabiendo que los primeros son instancias concretas de las segundas, que no son m\u00e1s que una abstracci\u00f3n o definici\u00f3n.</p> <p>Si nos volvemos a fijar en los ejemplos de objetos del apartado anterior podr\u00edamos observar que las clases ser\u00edan lo que clasificamos como \"familias\" de objetos (coches, cocodrilos y c\u00edrculos). </p> <p>En el lenguaje cotidiano de muchos programadores puede ser habitual la confusi\u00f3n entre los t\u00e9rminos clase y objeto. Aunque normalmente el contexto nos permite distinguir si nos estamos refiriendo realmente a una clase (definici\u00f3n abstracta) o a un objeto (instancia concreta), hay que tener cuidado con su uso para no dar lugar a interpretaciones err\u00f3neas, especialmente durante el proceso de aprendizaje.</p>"},{"location":"UD05/UD05_ES.html#estructura-y-miembros-de-una-clase","title":"Estructura y miembros de una clase","text":"<p>En unidades anteriores ya se indic\u00f3 que para declarar una clase en Java se usa la palabra reservada <code>class</code>. En la declaraci\u00f3n de una clase vas a encontrar:</p> <ul> <li>Cabecera de la clase. Compuesta por una serie de modificadores de acceso, la palabra reservada <code>class</code> y el nombre de la clase.</li> <li>Cuerpo de la clase. En \u00e9l se especifican los distintos miembros de la clase: atributos y m\u00e9todos. Es decir, el contenido de la clase.</li> </ul> <pre><code>public class NombreDeLaClase [herencia] [interfaces]\n{\n    // Atributos de la clase\n    ...\n    ...\n    ...\n    // M\u00e9todos de la clase\n    ...\n    ...\n    ...\n}\n</code></pre> <p>Como puedes observar, el cuerpo de la clase es donde se declaran los atributos que caracterizan a los objetos de la clase y donde se define e implementa el comportamiento de dichos objetos; es decir, donde se declaran e implementan los m\u00e9todos.</p>"},{"location":"UD05/UD05_ES.html#declaracion-de-una-clase","title":"Declaraci\u00f3n de una clase.","text":"<p>La declaraci\u00f3n de una clase en Java tiene la siguiente estructura general:</p> <pre><code>// Cabecera de la clase\n[modificadores] class &lt;NombreClase&gt; [herencia] [interfaces] {\n    // Cuerpo de la clase\n    Declaraci\u00f3n de los atributos\n    Declaraci\u00f3n de los m\u00e9todos\n}\n</code></pre> <p>Un ejemplo b\u00e1sico pero completo podr\u00eda ser:</p> <pre><code>class Punto{\n    // Atributos\n    private int x,y;\n\n    // M\u00e9todos\n    int obtenerX () {\n        return x;\n    }\n    int obtenerY() {\n        return y;\n    }\n    void establecerX (int nuevoX) {\n        x = nuevoX;\n    }\n    void establecerY (int nuevoY) {\n        y= nuevoY;\n    }\n}\n</code></pre> <p>En este caso se trata de una clase muy sencilla en la que el cuerpo de la clase (el \u00e1rea entre las llaves) contiene el c\u00f3digo y las declaraciones necesarias para que los objetos que se construyan (bas\u00e1ndose en esta clase) puedan funcionar apropiadamente en un programa (declaraciones de atributos para contener el estado del objeto y m\u00e9todos que implementen el comportamiento de la clase y los objetos creados a partir de ella).</p> <p>Si te fijas en los distintos programas que se han desarrollado en los ejemplos de las unidades anteriores, podr\u00e1s observar que cada uno de esos programas era en s\u00ed mismo una clase Java: se declaraban con la palabra reservada <code>class</code> y conten\u00edan algunos atributos (variables) as\u00ed como algunos m\u00e9todos (como m\u00ednimo el m\u00e9todo <code>main</code>).</p> <p>En el ejemplo anterior hemos visto lo m\u00ednimo que se tiene que indicar en la cabecera de una clase (el nombre de la clase y la palabra reservada <code>class</code>). Se puede proporcionar bastante m\u00e1s informaci\u00f3n mediante modificadores y otros indicadores como por ejemplo el nombre de su superclase (si es que esa clase hereda de otra), si implementa alg\u00fan interfaz y algunas cosas m\u00e1s que ir\u00e1s aprendiendo poco a poco.</p> <p>A la hora de implementar una clase Java (escribirla en un archivo con un editor de textos o con alguna herramienta integrada como por ejemplo Netbeans o Eclipse) debes tener en cuenta: </p> <ul> <li>Por convenio, se ha decidido que en lenguaje Java los nombres de las clases deben de empezar por una letra may\u00fascula. As\u00ed, cada vez que observes en el c\u00f3digo una palabra con la primera letra en may\u00fascula sabr\u00e1s que se trata de una clase sin necesidad de tener que buscar su declaraci\u00f3n. Adem\u00e1s, si el nombre de la clase est\u00e1 formado por varias palabras, cada una de ellas tambi\u00e9n tendr\u00e1 su primera letra en may\u00fascula. Siguiendo esta recomendaci\u00f3n, algunos ejemplos de nombres de clases podr\u00edan ser: <code>Recta</code>, <code>Circulo</code>, <code>Coche</code>, <code>CocheDeportivo</code>, <code>Jugador</code>, <code>JugadorFutbol</code>, <code>AnimalMarino</code>, <code>AnimalAcuatico</code>, etc.</li> <li>El archivo en el que se encuentra una clase Java debe tener el mismo nombre que esa clase si queremos poder utilizarla desde otras clases que se encuentren fuera de ese archivo (clase principal del archivo).</li> <li>Tanto la definici\u00f3n como la implementaci\u00f3n de una clase se incluye en el mismo archivo (archivo <code>.java</code>). En otros lenguajes como por ejemplo C++, definici\u00f3n e implementaci\u00f3n podr\u00edan ir en archivos separados (por ejemplo en C++, ser\u00edan sendos archivos con extensiones <code>.h</code> y <code>.cpp</code>).</li> </ul>"},{"location":"UD05/UD05_ES.html#cabecera-de-una-clase","title":"Cabecera de una clase.","text":"<p>En general, la declaraci\u00f3n de una clase puede incluir los siguientes elementos y en el siguiente orden:</p> <ol> <li>Modificadores tales como <code>public</code>, <code>abstract</code> o <code>final</code>.</li> <li>El nombre de la clase (con la primera letra de cada palabra en may\u00fasculas, por convenio).</li> <li>El nombre de su clase padre (superclase), si es que se especifica, precedido por la palabra reservada <code>extends</code> (\"extiende\" o \"hereda de\").</li> <li>Una lista separada por comas de interfaces que son implementadas por la clase, precedida por la palabra reservada <code>implements</code> (\"implementa\").</li> <li>El cuerpo de la clase, encerrado entre llaves <code>{...}</code>.</li> </ol> <p>La sintaxis completa de una cabecera (los cuatro primeros puntos) queda de la forma:</p> <pre><code>[modificadores] class &lt;NombreClase&gt; [extends &lt;NombreSuperClase&gt;][implements &lt;NombreInterface1&gt;][[implements&lt;NombreInterface2&gt;] ...] {\n</code></pre> <p>En el ejemplo anterior de la clase Punto ten\u00edamos la siguiente cabecera:</p> <pre><code>class Punto {\n</code></pre> <p>En este caso no hay modificadores, ni indicadores de herencia, ni implementaci\u00f3n de interfaces. Tan solo la palabra reservada <code>class</code> y el nombre de la clase. Es lo m\u00ednimo que puede haber en la cabecera de una clase.</p> <p>La herencia y las interfaces las ver\u00e1s m\u00e1s adelante. Vamos a ver ahora cu\u00e1les son los modificadores que se pueden indicar al crear la clase y qu\u00e9 efectos tienen. Los modificadores de clase son:</p> <pre><code>[public] [final | abstract]\n</code></pre> <p>Veamos qu\u00e9 significado tiene cada uno de ellos:</p> <ul> <li>Modificador <code>public</code>. Indica que la clase es visible (se pueden crear objetos de esa clase) desde cualquier otra clase. Es decir, desde cualquier otra parte del programa. Si no se especifica este modificador, la clase s\u00f3lo podr\u00e1 ser utilizada desde clases que est\u00e9n en el mismo paquete. El concepto de paquete lo veremos m\u00e1s adelante. S\u00f3lo puede haber una clase public (clase principal) en un archivo <code>.java</code>. El resto de clases que se definan en ese archivo no ser\u00e1n p\u00fablicas.</li> <li>Modificador <code>abstract</code>. Indica que la clase es abstracta. Una clase abstracta no es instanciable. Es decir, no es posible crear objetos de esa clase (habr\u00e1 que utilizar clases que hereden de ella). En este momento es posible que te parezca que no tenga sentido que esto pueda suceder (si no puedes crear objetos de esa clase, \u00bfpara qu\u00e9 la quieres?), pero puede resultar \u00fatil a la hora de crear una jerarqu\u00eda de clases. Esto lo ver\u00e1s tambi\u00e9n m\u00e1s adelante al estudiar el concepto de herencia.</li> <li>Modificador <code>final</code>. Indica que no podr\u00e1s crear clases que hereden de ella. Tambi\u00e9n volver\u00e1s a este modificador cuando estudies el concepto de herencia. Los modificadores final y abstract son excluyentes (s\u00f3lo se puede utilizar uno de ellos).</li> </ul> <p>Todos estos modificadores y palabras reservadas las iremos viendo poco a poco, as\u00ed que no te preocupes demasiado por intentar entender todas ellas en este momento.</p> <p>En el ejemplo anterior de la clase <code>Punto</code> tendr\u00edamos una clase que ser\u00eda s\u00f3lo visible (utilizable) desde el mismo paquete en el que se encuentra la clase (modificador de acceso por omisi\u00f3n o de paquete, o <code>package</code>). Desde fuera de ese paquete no ser\u00eda visible o accesible. Para poder utilizarla desde cualquier parte del c\u00f3digo del programa bastar\u00eda con a\u00f1adir el atributo <code>public</code>: </p> <pre><code>public class Punto{\n    ...\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#cuerpo-de-una-clase","title":"Cuerpo de una clase.","text":"<p>Como ya has visto anteriormente, el cuerpo de una clase se encuentra encerrado entre llaves y contiene la declaraci\u00f3n e implementaci\u00f3n de sus miembros. Los miembros de una clase pueden ser:</p> <ul> <li>Atributos, que especifican los datos que podr\u00e1 contener un objeto de la clase.</li> <li>M\u00e9todos, que implementan las acciones que se podr\u00e1n realizar con un objeto de la clase.</li> </ul> <p>Una clase puede no contener en su declaraci\u00f3n atributos o m\u00e9todos, pero debe de contener al menos uno de los dos (la clase no puede ser vac\u00eda).</p> <p>En el ejemplo anterior donde se defin\u00eda una clase <code>Punto</code>, tendr\u00edamos los siguientes atributos:</p> <ul> <li>Atributo <code>x</code>, de tipo <code>int</code>.</li> <li>Atributo <code>y</code>, de tipo <code>int</code>.</li> </ul> <p>Es decir, dos valores de tipo entero. Cualquier objeto de la clase <code>Punto</code> que sea creado almacenar\u00e1 en su interior dos n\u00fameros enteros (<code>x</code> e <code>y</code>). Cada objeto diferente de la clase <code>Punto</code> contendr\u00e1 sendos valores <code>x</code> e <code>y</code>, que podr\u00e1ncoincidir o no con el contenido de otros objetos de esa misma clase <code>Punto</code>.</p> <p>Por ejemplo, si se han declarado varios objetos de tipo <code>Punto</code>:</p> <pre><code>Punto p1, p2, p3;\n</code></pre> <p>Sabremos que cada uno de esos objetos <code>p1</code>, <code>p2</code> y <code>p3</code> contendr\u00e1n un par de coordenadas (<code>x</code>, <code>y</code>) que definen el estado de ese objeto. Puede que esos valores coincidan con los de otros objetos de tipo <code>Punto</code>, o puede que no, pero en cualquier caso ser\u00e1n objetos diferentes creados a partir del mismo molde (de la misma clase).</p> <p>Por otro lado, la clase <code>Punto</code> tambi\u00e9n defin\u00eda una serie de m\u00e9todos:</p> <ul> <li> <p><code>java   int obtenerX () {       return x;   }</code></p> </li> <li> <p><code>java   int a;int obtenerY() {       return y;   }</code></p> </li> <li> <p><code>java   void establecerX (int nuevoX) {       x= nuevoX;    }</code></p> </li> <li> <p><code>java   void establecerY (int nuevoY) {       y= nuevoY;    }</code></p> </li> </ul> <p>Cada uno de esos m\u00e9todos puede ser llamado desde cualquier objeto que sea una instancia de la clase <code>Punto</code>. Se trata de operaciones que permiten manipular los datos (atributos) contenidos en el objeto bien para calcular otros datos o bien para modificar los propios atributos.</p>"},{"location":"UD05/UD05_ES.html#miembros-estaticos-o-de-clase","title":"Miembros est\u00e1ticos o de clase.","text":"<p>Cada vez que se produce una instancia de una clase (es decir, se crea un objeto de esa clase), se desencadenan una serie de procesos (construcci\u00f3n del objeto) que dan lugar a la creaci\u00f3n en memoria de un espacio f\u00edsico que constituir\u00e1 el objeto creado. De esta manera cada objeto tendr\u00e1 sus propios miembros a imagen y semejanza de la plantilla propuesta por la clase.</p> <p>Por otro lado, podr\u00e1s encontrarte con ocasiones en las que determinados miembros de la clase (atributos o m\u00e9todos) no tienen demasiado sentido como partes del objeto,sino m\u00e1s bien como partes de la clase en s\u00ed (partes de la plantilla, pero no de cada instancia de esa plantilla). Por ejemplo, si creamos una clase <code>Coche</code> y quisi\u00e9ramos disponer de un atributo con el nombre de la clase (un atributo de tipo <code>String</code> con la cadena \"Coche\"), no tiene mucho sentido replicar ese atributo para todos los objetos de la clase <code>Coche</code>, pues para todos va a tener siempre el mismo valor (la cadena \"Coche\"). Es m\u00e1s, ese atributo puede tener sentido y existencia al margen de la existencia de cualquier objeto de tipo <code>Coche</code>. Podr\u00eda no haberse creado ning\u00fan objeto de la clase <code>Coche</code> y sin embargo seguir\u00eda teniendo sentido poder acceder a ese atributo de nombre de la clase, pues se trata en efecto de un atributo de la propia clase m\u00e1s que de un atributo de cada objeto instancia de la clase.</p> <p>Para poder definir miembros est\u00e1ticos en Java se utiliza el modificador <code>static</code>. Los miembros (tanto atributos como m\u00e9todos) declarados utilizando este modificador son conocidos como miembros est\u00e1ticos o miembros de clase. A continuaci\u00f3n vas a estudiar la creaci\u00f3n y utilizaci\u00f3n de atributos y m\u00e9todos. En cada caso ver\u00e1s c\u00f3mo declarar y usar atributos est\u00e1ticos y m\u00e9todos est\u00e1ticos.</p>"},{"location":"UD05/UD05_ES.html#atributos","title":"Atributos","text":"<p>Los atributos constituyen la estructura interna de los objetos de una clase. Se trata del conjunto de datos que los objetos de una determinada clase almacenan cuando son creados. Es decir es como si fueran variables cuyo \u00e1mbito de existencia es el objeto dentro del cual han sido creadas. Fuera del objeto esas variables no tienen sentido y si el objeto deja de existir, esas variables tambi\u00e9n deber\u00edan hacerlo (proceso de destrucci\u00f3n del objeto). Los atributos a veces tambi\u00e9n son conocidos con el nombre de variables miembro o variables de objeto.</p> <p>Los atributos pueden ser de cualquier tipo de los que pueda ser cualquier otra variable en un programa en Java: desde tipos elementales como <code>int</code>, <code>boolean</code> o <code>float</code> hasta tipos referenciados como <code>arrays</code>, <code>Strings</code> u <code>objetos</code>.</p> <p>Adem\u00e1s del tipo y del nombre, la declaraci\u00f3n de un atributo puede contener tambi\u00e9n algunos modificadores (como por ejemplo <code>public</code>, <code>private</code>, <code>protected</code> o <code>static</code>). Por ejemplo, en el caso de la clase <code>Punto</code> que hab\u00edamos definido en el aparado anterior podr\u00edas haber declarado sus atributos como:</p> <pre><code>public int x;\npublic int y;\n</code></pre> <p>De esta manera estar\u00edas indicando que ambos atributos son p\u00fablicos, es decir, accesibles por cualquier parte del c\u00f3digo programa que tenga acceso a un objeto de esa clase.</p> <p>Como ya ver\u00e1s m\u00e1s adelante al estudiar el concepto de encapsulaci\u00f3n, lo normal es declarar todos los atributos (o al menos la mayor\u00eda) como privados (<code>private</code>) de manera que si se desea acceder o manipular alg\u00fan atributo se tenga que hacer a trav\u00e9s de los m\u00e9todos proporcionados por la clase.</p>"},{"location":"UD05/UD05_ES.html#declaracion-de-atributos","title":"Declaraci\u00f3n de atributos.","text":"<p>La sintaxis general para la declaraci\u00f3n de un atributo en el interior de una clase es:</p> <pre><code>[modificadores] &lt;tipo&gt; &lt;nombreAtributo&gt;;\n</code></pre> <p>Ejemplos:</p> <pre><code>int x;\npublic int elementoX, elementoY;\nprivate int x1, y1, z1;\nstatic double descuentoGeneral;\nfinal boolean CASADO;\nprivate Punto p1;\n</code></pre> <p>Te suena bastante, \u00bfverdad? La declaraci\u00f3n de los atributos en una clase es exactamente igual a la declaraci\u00f3n de cualquier variable tal y como has estudiado en las unidades anteriores y similar a como se hace en cualquier lenguaje de programaci\u00f3n. Es decir mediante la indicaci\u00f3n del tipo y a continuaci\u00f3n el nombre del atributo, pudi\u00e9ndose declarar varios atributos del mismo tipo mediante una lista de nombres de atributos separada por comas (exactamente como ya has estudiado al declarar variables).</p> <p>La declaraci\u00f3n de un atributo (o variable miembro o variable de objeto) consiste en la declaraci\u00f3n de una variable que \u00fanicamente existe en el interior del objeto y por tanto su vida comenzar\u00e1 cuando el objeto comience a existir (el objeto sea creado). Esto significa que cada vez que se cree un objeto se crear\u00e1n tantas variables como atributos contenga ese objeto en su interior (definidas en la clase, que es la plantilla o \"molde\" del objeto). Todas esas variables estar\u00e1n encapsuladas dentro del objeto y s\u00f3lo tendr\u00e1n sentido dentro de \u00e9l.</p> <p>En el ejemplo que estamos utilizando de objetos de tipo <code>Punto</code> (instancias de la clase <code>Punto</code>), cada vez que se cree un nuevo <code>Punto</code> <code>p1</code>, se crear\u00e1n sendos atributos <code>x</code>, <code>y</code> de tipo int que estar\u00e1n en el interior de ese punto <code>p1</code>.</p> <p>Si a continuaci\u00f3n se crea un nuevo objeto <code>Punto</code> <code>p2</code>, se crear\u00e1n otros dos nuevos atributos <code>x</code>, <code>y</code> de tipo <code>int</code> que estar\u00e1n esta vez alojados en el interior de <code>p2</code>. Y as\u00ed sucesivamente...</p> <p>Dentro de la declaraci\u00f3n de un atributo puedes encontrar tres partes:</p> <ul> <li>Modificadores. Son palabras reservadas que permiten modificar la utilizaci\u00f3n del atributo (indicar el control de acceso, si el atributo es constante, si se trata de un atributo de clase, etc.). Los iremos viendo uno a uno.</li> <li>Tipo. Indica el tipo del atributo. Puede tratarse de un tipo primitivo (<code>int</code>, <code>char</code>, <code>boolean</code>, <code>double</code>...) o bien de uno referenciado (<code>objeto</code>, <code>array</code>, etc.).</li> <li>Nombre. Identificador \u00fanico para el nombre del atributo. Por convenio se suelen utilizar las min\u00fasculas. En caso de que se trate de un identificador que contenga varias palabras, a partir de la segunda palabra se suele poner la letra de cada palabra en may\u00fasculas. Por ejemplo: <code>primerValor</code>,  <code>valor</code>, <code>puertaIzquierda</code>, <code>cuartoTrasero</code>, <code>equipoVecendor</code>, <code>sumaTotal</code>, <code>nombreCandidatoFinal</code>, etc.  Cualquier identificador v\u00e1lido de Java ser\u00e1 admitido como nombre de atributo v\u00e1lido, pero es importante seguir este convenio para facilitar la legibilidad del c\u00f3digo (todos los programadores de Java lo utilizan).</li> </ul> <p>Como puedes observar, los atributos de una clase tambi\u00e9n pueden contener modificadores en su declaraci\u00f3n (como suced\u00eda al declarar la propia clase). Estos modificadores permiten indicar cierto comportamiento de una tributo a la hora de utilizarlo. Entre los modificadores de un atributo podemos distinguir:</p> <ul> <li>Modificadores de acceso. Indican la forma de acceso al atributo desde otra clase. Son modificadores excluyentes entre s\u00ed. S\u00f3lo se puede poner uno.</li> <li>Modificadores de contenido. No son excluyentes. Pueden aparecer varios a la vez. </li> <li>Otros modificadores: <code>transient</code> y <code>volatile</code>. El primero se utiliza para indicar que un atributo es transitorio (no persistente) y el segundo es para indicar al compilador que no debe realizar optimizaciones sobre esa variable. Es m\u00e1s que probable que no necesites utilizarlos en este m\u00f3dulo.</li> </ul> <p>Aqu\u00ed tienes la sintaxis completa de la declaraci\u00f3n de un atributo teniendo en cuenta la lista de todos los modificadores e indicando cu\u00e1les son incompatibles unos con otros:</p> <pre><code>[private | protected | public] [static] [final] [transient] [volatile] &lt;tipo&gt;&lt;nombreAtributo&gt;;\n</code></pre> <p>Vamos a estudiar con detalle cada uno de ellos.</p>"},{"location":"UD05/UD05_ES.html#modificadores-de-acceso-nuevo","title":"Modificadores de acceso. (NUEVO)","text":"<p>Los modificadores de acceso disponibles en Java para un atributo son:</p> <ul> <li>Modificador de acceso <code>public</code>. Indica que cualquier clase (por muy ajena o lejana que sea) tiene acceso a ese atributo. No es muy habitual declarar atributos p\u00fablicos (<code>public</code>).</li> <li>Modificador de acceso <code>protected</code>. En este caso se permitir\u00e1 acceder al atributo desde cualquier subclase (lo ver\u00e1s m\u00e1s adelante al estudiar la herencia) de la clase en la que se encuentre declarado el atributo, y tambi\u00e9n desde las clases del mismo paquete.</li> <li>Modificador de acceso por omisi\u00f3n (o de paquete). Si no se indica ning\u00fan modificador de acceso en la declaraci\u00f3n del atributo, se utilizar\u00e1 este tipo de acceso. Se permitir\u00e1 el acceso a este atributo desde todas las clases que est\u00e9n dentro del mismo paquete (<code>package</code>) que esta clase (la que contiene el atributo que se est\u00e1 declarando). No es necesario escribir ninguna palabra reservada. Si no se pone nada se supone se desea indicar este modo de acceso.</li> <li>Modificador de acceso <code>private</code>. Indica que s\u00f3lo se puede acceder al atributo desde dentro de la propia clase. El atributo estar\u00e1 \"oculto\" para cualquier otra zona de c\u00f3digo fuera de la clase en la que est\u00e1 declarado el atributo. Es lo opuesto a lo que permite <code>public</code>.</li> </ul> <p>A continuaci\u00f3n puedes observar un resumen de los distintos niveles accesibilidad que permite cada modificador:</p> modificador Misma clase Mismo paquete Subclase Otro paquete <code>public</code> \u2714 \u2714 \u2714 \u2714 <code>protected</code> \u2714 \u2714 \u2714 \u274c Sin modificador (<code>package</code>) \u2714 \u2714 \u274c \u274c <code>private</code> \u2714 \u274c \u274c \u274c <p>\u00a1Recuerda que los modificadores de acceso son excluyentes! S\u00f3lo se puede utilizar uno de ellos en la declaraci\u00f3n de un atributo.</p>"},{"location":"UD05/UD05_ES.html#modificadores-de-contenido","title":"Modificadores de contenido.","text":"<p>Los modificadores de contenido no son excluyentes (pueden aparecer varios para un mismo atributo). Son los siguientes:</p> <ul> <li>Modificador <code>static</code>. Hace que el atributo sea com\u00fan para todos los objetos de una misma clase. Es decir, todos los objetos de la clase compartir\u00e1n ese mismo atributo con el mismo valor. Es un caso de miembro est\u00e1tico o miembro de clase: un atributo est\u00e1tico o atributo de clase o variable de clase.</li> <li>Modificador <code>final</code>. Indica que el atributo es una constante. Su valor no podr\u00e1 ser modificado a lo largo de la vida del objeto. Por convenio, el nombre de los atributos constantes (<code>final</code>) se escribe con todas las letras en may\u00fasculas.</li> </ul> <p>En el siguiente apartado sobre atributos est\u00e1ticos ver\u00e1s un ejemplo completo de un atributo est\u00e1tico (<code>static</code>). Veamos ahora un ejemplo de atributo constante (<code>final</code>).</p> <p>Imagina que est\u00e1s dise\u00f1ando un conjunto de clases para trabajar con expresiones geom\u00e9tricas (figuras, superficies, vol\u00famenes, etc.) y necesitas utilizar muy a menudo la constante pi con abundantes cifras significativas, por ejemplo, 3.14159265. Utilizar esa constante literal muy a menudo puede resultar tedioso adem\u00e1s de poco operativo (imagina que el futuro hubiera que cambiar la cantidad de cifras significativas). La idea es declararla una sola vez, asociarle un nombre simb\u00f3lico (un identificador) y utilizar ese identificador cada vez que se necesite la constante. En tal caso puede resultar muy \u00fatil declarar un atributo final con el valor 3.14159265 dentro de la clase en la que se considere oportuno utilizarla. El mejor identificador que podr\u00edas utilizar para ella ser\u00e1 probablemente el propio nombre de la constante (y en may\u00fasculas, para seguir el convenio de nombres), es decir, <code>PI</code>.</p> <p>As\u00ed podr\u00eda quedar la declaraci\u00f3n del atributo:</p> <pre><code>class claseGeometria {\n    // Declaraci\u00f3n de constantes\n    public final float PI = 3.14159265;\n    ...\n</code></pre>"},{"location":"UD05/UD05_ES.html#atributos-estaticos","title":"Atributos est\u00e1ticos.","text":"<p>Como ya has visto, el modificador <code>static</code> hace que el atributo sea com\u00fan (el mismo) para todos los objetos de una misma clase. En este caso s\u00ed podr\u00eda decirse que la existencia del atributo no depende de la existencia del objeto, sino de la propia clase y por tanto s\u00f3lo habr\u00e1 uno, independientemente del n\u00famero de objetos que se creen. El atributo ser\u00e1 siempre el mismo para todos los objetos y tendr\u00e1 un valor \u00fanico independientemente de cada objeto. Es m\u00e1s, aunque no exista ning\u00fan objeto de esa clase, el atributo s\u00ed existir\u00e1 y podr\u00e1 contener un valor (pues se trata de un atributo de la clase m\u00e1s que del objeto).</p> <p>Uno de los ejemplos m\u00e1s habituales (y sencillos) de atributos est\u00e1ticos o de clase es el de un contador que indica el n\u00famero de objetos de esa clase que se han ido creando. Por ejemplo, en la clase de ejemplo <code>Punto</code> podr\u00edas incluir un atributo que fuera ese contador para llevar un registro del n\u00famero de objetos de la clase <code>Punto</code> que se van construyendo durante la ejecuci\u00f3n del programa.</p> <p>Otro ejemplo de atributo est\u00e1tico (y en este caso tambi\u00e9n constante) que tambi\u00e9n se ha mencionado anteriormente al hablar de miembros est\u00e1ticos era disponer de un atributo <code>nombre</code>, que contuviera un <code>String</code> con el nombre de la clase. Nuevamente ese atributo s\u00f3lo tiene sentido para la clase, pues habr\u00e1 de ser compartido por todos los objetos que sean de esa clase (es el nombre de la clase a la que pertenecen los objetos y por tanto siempre ser\u00e1 la misma e igual para todos, no tiene sentido que cada objeto de tipo <code>Punto</code> almacene en su interior el nombre de la clase, eso lo deber\u00eda hacer la propia clase).</p> <pre><code>class Punto {\n    // Coordenadas del punto\n    private int x, y;\n    // Atributos de clase: cantidad de puntos creados hasta el momento\n    public static cantidadPuntos;\n</code></pre> <p>Obviamente, para que esto funcione como est\u00e1s pensando, tambi\u00e9n habr\u00e1 que escribir el c\u00f3digo necesario para que cada vez que se cree un objeto de la clase <code>Punto</code> se incremente el valor del atributo <code>cantidadPuntos</code>.</p> <p>Volver\u00e1s a este ejemplo para implementar esa otra parte cuando estudies los constructores.</p>"},{"location":"UD05/UD05_ES.html#metodos","title":"M\u00e9todos","text":"<p>Como ya has visto anteriormente, los m\u00e9todos son las herramientas que nos sirven para definir el comportamiento de un objeto en sus interacciones con otros objetos. Forman parte de la estructura interna del objeto junto con los atributos.</p> <p>En el proceso de declaraci\u00f3n de una clase que est\u00e1s estudiando ya has visto c\u00f3mo escribir la cabecera de la clase y c\u00f3mo especificar sus atributos dentro del cuerpo de la clase. Tan solo falta ya declarar los m\u00e9todos, que estar\u00e1n tambi\u00e9n en el interior del cuerpo de la clase junto con los atributos.</p> <p>Los m\u00e9todos suelen declararse despu\u00e9s de los atributos. Aunque atributos y m\u00e9todos pueden aparecer mezclados por todo el interior del cuerpo de la clase es aconsejable no hacerlo para mejorar la claridad y la legibilidad del c\u00f3digo. De ese modo, cuando echemos un vistazo r\u00e1pido al contenido de una clase, podremos ver r\u00e1pidamente los atributos al principio (normalmente ocupar\u00e1n menos l\u00edneas de c\u00f3digo y ser\u00e1n f\u00e1ciles de reconocer) y cada uno de los m\u00e9todos inmediatamente despu\u00e9s.</p> <p>Cada m\u00e9todo puede ocupar un n\u00famero de l\u00edneas de c\u00f3digo m\u00e1s o menos grande en funci\u00f3n de la complejidad del proceso que pretenda implementar.</p> <p>Los m\u00e9todos representan la interfaz de una clase. Son la forma que tienen otros objetos de comunicarse con un objeto determinado solicit\u00e1ndole cierta informaci\u00f3n o pidi\u00e9ndole que lleve a cabo una determinada acci\u00f3n. Este modo de programar, como ya has visto en unidades anteriores, facilita mucho la tarea al desarrollador de aplicaciones, pues le permite abstraerse del contenido de las clases haciendo uso \u00fanicamente del interfaz (m\u00e9todos).</p>"},{"location":"UD05/UD05_ES.html#declaracion-de-un-metodo","title":"Declaraci\u00f3n de un m\u00e9todo.","text":"<p>La definici\u00f3n de un m\u00e9todo se compone de dos partes:</p> <ul> <li>Cabecera del m\u00e9todo, que contiene el nombre del m\u00e9todo junto con el tipo devuelto, un conjunto de posibles modificadores y una lista de par\u00e1metros.</li> <li>Cuerpo del m\u00e9todo, que contiene las sentencias que implementan el comportamiento del m\u00e9todo (incluidas posibles sentencias de declaraci\u00f3n de variables locales).</li> </ul> <p>Los elementos m\u00ednimos que deben aparecer en la declaraci\u00f3n de un m\u00e9todo son:</p> <ul> <li>El tipo devuelto por el m\u00e9todo.</li> <li>El nombre del m\u00e9todo.</li> <li>Los par\u00e9ntesis.</li> <li>El cuerpo del m\u00e9todo entre llaves: <code>{ }</code>.</li> </ul> <p>Por ejemplo, en la clase <code>Punto</code> que se ha estado utilizando en los apartados anteriores podr\u00edas encontrar el siguiente m\u00e9todo:</p> <pre><code>int obtenerX(){\n    // Cuerpo del m\u00e9todo\n    ...\n}\n</code></pre> <p>Donde:</p> <ul> <li>El tipo devuelto por el m\u00e9todo es <code>int</code>.</li> <li>El nombre del m\u00e9todo es <code>obtenerX</code>.</li> <li>No recibe ning\u00fan par\u00e1metro: aparece una lista vac\u00eda entre par\u00e9ntesis: <code>( )</code>.</li> <li>El cuerpo del m\u00e9todo es todo el c\u00f3digo que habr\u00eda encerado entre llaves: <code>{ }</code>.</li> </ul> <p>Dentro del cuerpo del m\u00e9todo podr\u00e1s encontrar declaraciones de variables, sentencias y todo tipo de estructuras de control (bucles, condiciones, etc.) que has estudiado en los apartados anteriores.</p> <p>Ahora bien, la declaraci\u00f3n de un m\u00e9todo puede incluir algunos elementos m\u00e1s. Vamos a estudiar con detalle cada uno de ellos.</p>"},{"location":"UD05/UD05_ES.html#cabecera-de-metodo","title":"Cabecera de m\u00e9todo.","text":"<p>La declaraci\u00f3n de un m\u00e9todo puede incluir los siguientes elementos:</p> <ol> <li>Modificadores (como por ejemplo los ya vistos <code>public</code> o <code>private</code>, m\u00e1s algunos otros que ir\u00e1s conociendo poco a poco). No es obligatorio incluir modificadores en la declaraci\u00f3n.</li> <li>El tipo devuelto (o tipo de retorno), que consiste en el tipo de dato (primitivo o referencia) que el m\u00e9todo devuelve tras ser ejecutado. Si eliges <code>void</code> como tipo devuelto, el m\u00e9todo no devolver\u00e1 ning\u00fan valor.</li> <li>El nombre del m\u00e9todo, aplic\u00e1ndose para los nombres el mismo convenio que para los atributos.</li> <li>Una lista de par\u00e1metros separados por comas y entre par\u00e9ntesis donde cada par\u00e1metro debe ir precedido por su tipo. Si el m\u00e9todo no tiene par\u00e1metros la lista estar\u00e1 vac\u00eda y \u00fanicamente aparecer\u00e1n los par\u00e9ntesis.</li> <li>Una lista de excepciones que el m\u00e9todo puede lanzar. Se utiliza la palabra reservada <code>throws</code> seguida de una lista de nombres de excepciones separadas por comas. No es obligatorio que un m\u00e9todo incluya una lista de excepciones, aunque muchas veces ser\u00e1 conveniente. En unidades anteriores ya has trabajado con el concepto de excepci\u00f3n y m\u00e1s adelante volver\u00e1s a hacer uso de ellas.</li> <li>El cuerpo del m\u00e9todo, encerrado entre llaves. El cuerpo contendr\u00e1 el c\u00f3digo del m\u00e9todo (una lista sentencias y estructuras de control en lenguaje Java) as\u00ed como la posible declaraci\u00f3n de variables locales.</li> </ol> <p>La sintaxis general de la cabecera de un m\u00e9todo podr\u00eda entonces quedar as\u00ed:</p> <pre><code>[private | protected | public] [static] [abstract] [final] [native] [synchronized] &lt;tipo&gt;&lt;nombreM\u00e9todo&gt; ( [&lt;lista_parametros&gt;] ) [throws&lt;lista_excepciones&gt;]\n</code></pre> <p>Como sucede con todos los identificadores en Java (variables, clases, objetos, m\u00e9todos, etc.), puede usarse cualquier identificador que cumpla las normas. Ahora bien, para mejorar la legibilidad del c\u00f3digo, se ha establecido el siguiente convenio para nombrar los m\u00e9todos: utilizar un verbo en min\u00fascula o bien un nombre formado por varias palabras que comience por un verbo en min\u00fascula, seguido por adjetivos, nombres, etc. los cuales s\u00ed aparecer\u00e1n en may\u00fasculas.</p> <p>Algunos ejemplos de m\u00e9todos que siguen este convenio podr\u00edan ser: <code>ejecutar</code>, <code>romper</code>, <code>mover</code>, <code>subir</code>, <code>responder</code>, <code>obtenerX</code>, <code>establecerValor</code>, <code>estaVacio</code>, <code>estaLleno</code>, <code>moverFicha</code>, <code>subirPalanca</code>, <code>responderRapido</code>, <code>girarRuedaIzquierda</code>, <code>abrirPuertaDelantera</code>, <code>cambiarMarcha</code>, etc.</p> <p>En el ejemplo de la clase <code>Punto</code>, puedes observar c\u00f3mo los m\u00e9todos <code>obtenerX</code> y <code>obtenerY</code> siguen el convenio de nombres para los m\u00e9todos, devuelven en ambos casos un tipo <code>int</code>, su lista de par\u00e1metros es vac\u00eda (no tienen par\u00e1metros) y no lanzan ning\u00fan tipo de excepci\u00f3n:</p> <ul> <li> <p><code>java   abstract int obtenerX()</code></p> </li> <li> <p><code>java   int obtenerY()</code></p> </li> </ul>"},{"location":"UD05/UD05_ES.html#modificadores-en-la-declaracion-de-un-metodo","title":"Modificadores en la declaraci\u00f3n de un m\u00e9todo.","text":"<p>En la declaraci\u00f3n de un m\u00e9todo tambi\u00e9n pueden aparecer modificadores (como en la declaraci\u00f3n de la clase o delos atributos). Un m\u00e9todo puede tener los siguientes tipos de modificadores:</p> <ul> <li>Modificadores de acceso. Son los mismos que en el caso de los atributos (por omisi\u00f3n o de paquete (<code>package</code>), <code>public</code>, <code>private</code> y <code>protected</code>) y tienen el mismo cometido (acceso al m\u00e9todo s\u00f3lo por parte de clases del mismo paquete, o por cualquier parte del programa, o s\u00f3lo para la propia clase, o tambi\u00e9n para las subclases).</li> <li>Modificadores de contenido. Son tambi\u00e9n los mismos que en el caso de los atributos (<code>static</code> y <code>final</code>) aunque su significado no es el mismo.</li> <li>Otros modificadores (no son aplicables a los atributos, s\u00f3lo a los m\u00e9todos): <code>abstract</code>, <code>native</code>, <code>synchronized</code>.</li> </ul> <p>Un m\u00e9todo <code>static</code> es un m\u00e9todo cuya implementaci\u00f3n es igual para todos los objetos de la clase y s\u00f3lo tendr\u00e1 acceso a los atributos est\u00e1ticos de la clase (dado que se trata de un m\u00e9todo de clase y no de objeto, s\u00f3lo podr\u00e1 acceder a la informaci\u00f3n de clase y no la de un objeto en particular). Este tipo de m\u00e9todos pueden ser llamados sin necesidad de tener un objeto de la clase instanciado.</p> <p>En Java un ejemplo t\u00edpico de m\u00e9todos est\u00e1ticos se encuentra en la clase <code>Math</code>, cuyos m\u00e9todos son todos est\u00e1ticos (<code>Math.abs</code>, <code>Math.sin</code>, <code>Math.cos</code>, etc.). Como habr\u00e1s podido comprobar en este ejemplo, la llamada a m\u00e9todos est\u00e1ticos se hace normalmente usando el nombre de la propia clase y no el de una instancia (objeto), pues se trata realmente de un m\u00e9todo de clase. En cualquier caso, los objetos tambi\u00e9n admiten la invocaci\u00f3n de los m\u00e9todos est\u00e1ticos de su clase y funcionar\u00eda correctamente.</p> <p>Un m\u00e9todo <code>final</code> es un m\u00e9todo que no permite ser sobrescrito por las clases descendientes de la clase a la quepertenece el m\u00e9todo. Volver\u00e1s a ver este modificador cuando estudies en detalle la herencia.</p> <p>El modificador <code>native</code> es utilizado para se\u00f1alar que un m\u00e9todo ha sido implementado en c\u00f3digo nativo (en un lenguaje que ha sido compilado a lenguaje m\u00e1quina, como por ejemplo C o C++). En estos casos simplemente se indica la cabecera del m\u00e9todo, pues no tiene cuerpo escrito en Java.</p> <p>Un m\u00e9todo <code>abstract</code> (m\u00e9todo abstracto) es un m\u00e9todo que no tiene implementaci\u00f3n (el cuerpo est\u00e1 vac\u00edo). La implementaci\u00f3n ser\u00e1 realizada en las clases descendientes. Un m\u00e9todo s\u00f3lo puede ser declarado como <code>abstract</code> si se encuentra dentro de una clase <code>abstract</code>. Tambi\u00e9n volver\u00e1s a este modificador en unidades posteriores cuando trabajes con la herencia.</p> <p>Por \u00faltimo, si un m\u00e9todo ha sido declarado como <code>synchronized</code>, el entorno de ejecuci\u00f3n obligar\u00e1 a que cuando un proceso est\u00e9 ejecutando ese m\u00e9todo, el resto de procesos que tengan que llamar a ese mismo m\u00e9todo deber\u00e1n esperar a que el otro proceso termine. Puede resultar \u00fatil si sabes que un determinado m\u00e9todo va a poder ser llamado concurrentemente por varios procesos a la vez. Por ahora no lo vas a necesitar.</p> <p>Dada la cantidad de modificadores que has visto hasta el momento y su posible aplicaci\u00f3n en la declaraci\u00f3n de clases, atributos o m\u00e9todos, veamos un resumen de todos los que has visto y en qu\u00e9 casos pueden aplicarse:</p> modificador Clase Atributo M\u00e9todo Sin modificador (package) \u2714 \u2714 \u2714 <code>public</code> \u2714 \u2714 \u2714 <code>private</code> \u274c \u2714 \u2714 <code>protected</code> \u2714 \u2714 \u2714 <code>static</code> \u274c \u2714 \u2714 <code>final</code> \u2714 \u2714 \u2714 <code>synchronized</code> \u274c \u274c \u2714 <code>native</code> \u274c \u274c \u2714 <code>abstract</code> \u2714 \u274c \u2714"},{"location":"UD05/UD05_ES.html#parametros-en-un-metodo","title":"Par\u00e1metros en un m\u00e9todo.","text":"<p>La lista de par\u00e1metros de un m\u00e9todo se coloca tras el nombre del m\u00e9todo. Esta lista estar\u00e1 constituida por  pares de la forma <code>&lt;tipoParametro&gt; &lt;nombreParametro&gt;</code>. Cada uno de esos pares estar\u00e1 separado por comas y la lista completa estar\u00e1 encerrada entre par\u00e9ntesis:</p> <pre><code>&lt;tipo&gt; nombreMetodo ( &lt;tipo_1&gt; &lt;nombreParametro_1&gt;, &lt;tipo_2&gt; &lt;nombreParametro_2&gt;, ..., &lt;tipo_n&gt;&lt;nombreParametro_n&gt; )\n</code></pre> <p>Si la lista de par\u00e1metros es vac\u00eda, tan solo aparecer\u00e1n los par\u00e9ntesis:</p> <pre><code>&lt;tipo&gt; &lt;nombreMetodo&gt; ( )\n</code></pre> <p>A la hora de declarar un m\u00e9todo, debes tener en cuenta:</p> <ul> <li>Puedes incluir cualquier cantidad de par\u00e1metros. Se trata de una decisi\u00f3n del programador, pudiendo ser incluso una lista vac\u00eda.</li> <li>Los par\u00e1metros podr\u00e1n ser de cualquier tipo (tipos primitivos, referencias, objetos, arrays, etc.).</li> <li>No est\u00e1 permitido que el nombre de una variable local del m\u00e9todo coincida con el nombre de un par\u00e1metro.</li> <li>No puede haber dos par\u00e1metros con el mismo nombre. Se producir\u00eda ambig\u00fcedad.</li> <li>Si el nombre de alg\u00fan par\u00e1metro coincide con el nombre de un atributo de la clase, \u00e9ste ser\u00e1 ocultado por el par\u00e1metro. Es decir, al indicar ese nombre en el c\u00f3digo del m\u00e9todo estar\u00e1s haciendo referencia al par\u00e1metro y no al atributo. Para poder acceder al atributo tendr\u00e1s que hacer uso del operador de autorreferencia <code>this</code>, que ver\u00e1s un poco m\u00e1s adelante.</li> <li>En Java el paso de par\u00e1metros es siempre por valor, excepto en el caso de los tipos referenciados (por ejemplo los objetos) en cuyo caso se est\u00e1 pasando efectivamente una referencia. La referencia (el objeto en s\u00ed mismo) no podr\u00e1 ser cambiada pero s\u00ed elementos de su interior (atributos) a trav\u00e9s de sus m\u00e9todos o por acceso directo si se trata de un miembro p\u00fablico.</li> </ul> <p>Es posible utilizar una construcci\u00f3n especial llamada <code>varargs</code> (argumentos variables) que permite que un m\u00e9todo pueda tener un n\u00famero variable de par\u00e1metros. Para utilizar este mecanismo se colocan unos puntos suspensivos (tres puntos: <code>...</code>) despu\u00e9s del tipo del cual se puede tener una lista variable de argumentos, un espacio en blanco y a continuaci\u00f3n el nombre del par\u00e1metro que aglutinar\u00e1 la lista de argumentos variables.</p> <pre><code>&lt;tipo&gt;&lt;nombreMetodo&gt; (&lt;tipo&gt; ... &lt;nombre&gt;)\n</code></pre> <p>Es posible adem\u00e1s mezclar el uso de <code>varargs</code> con par\u00e1metros fijos. En tal caso, la lista de par\u00e1metros variables debe aparecer al final (y s\u00f3lo puede aparecer una). En realidad se trata una manera transparente de pasar un <code>array</code> con un n\u00famero variable de elementos para no tener que hacerlo manualmente. Dentro del m\u00e9todo habr\u00e1 que ir recorriendo el <code>array</code> para ir obteniendo cada uno de los elementos de la lista de argumentos variables.</p>"},{"location":"UD05/UD05_ES.html#cuerpo-de-un-metodo","title":"Cuerpo de un m\u00e9todo.","text":"<p>El interior de un m\u00e9todo (cuerpo) est\u00e1 compuesto por una serie de sentencias en lenguaje Java:</p> <ul> <li>Sentencias de declaraci\u00f3n de variables locales al m\u00e9todo.</li> <li>Sentencias que implementan la l\u00f3gica del m\u00e9todo (estructuras de control como bucles o condiciones; utilizaci\u00f3n de m\u00e9todos de otros objetos; c\u00e1lculo de expresiones matem\u00e1ticas, l\u00f3gicas o de cadenas; creaci\u00f3n de nuevos objetos, etc.). Es decir, todo lo que has visto en las unidades anteriores. </li> <li>Sentencia de devoluci\u00f3n del valor de retorno (<code>return</code>). Aparecer\u00e1 al final del m\u00e9todo y es la que permite devolver la informaci\u00f3n que se le ha pedido al m\u00e9todo. Es la \u00faltima parte del proceso y la forma de comunicarse con la parte de c\u00f3digo que llam\u00f3 al m\u00e9todo (paso de mensaje de vuelta). Esta sentencia de devoluci\u00f3n siempre tiene que aparecer al final del m\u00e9todo. Tan solo si el tipo devuelto por el m\u00e9todo es <code>void</code> (vac\u00edo) no debe aparecer (pues no hay que devolver nada al c\u00f3digo llamante).</li> </ul> <p>En el ejemplo de la clase <code>Punto</code>, ten\u00edas los m\u00e9todos <code>obtenerX</code> y <code>obtenerY</code>. Veamos uno de ellos:</p> <pre><code>int obtenerX(){\n    return x;\n}\n</code></pre> <p>En ambos casos lo \u00fanico que hace el m\u00e9todo es precisamente devolver un valor (utilizaci\u00f3n de la sentencia <code>return</code>). No recibe par\u00e1metros (mensajes o informaci\u00f3n de entrada) ni hace c\u00e1lculos, ni obtiene resultados intermedios o finales. Tan solo devuelve el contenido de un atributo. Se trata de uno de los m\u00e9todos m\u00e1s sencillos que se pueden implementar: un m\u00e9todo que devuelve el valor de un atributo. En ingl\u00e9s se les suele llamar m\u00e9todos de tipo <code>get</code>, que en ingl\u00e9s significa <code>obtener</code>.</p> <p>Adem\u00e1s de esos dos m\u00e9todos, la clase tambi\u00e9n dispon\u00eda de otros dos que sirven para la funci\u00f3n opuesta (<code>establecerX</code> y <code>establecerX</code>). Veamos uno de ellos:</p> <pre><code>void establecerX (int nuevoX){\n    x= nuevoX;\n}\n</code></pre> <p>En este caso se trata de pasar un valor al m\u00e9todo (par\u00e1metro <code>vx</code> de tipo <code>int</code>) el cual ser\u00e1 utilizado para modificar el contenido del atributo <code>x</code> del objeto. Como habr\u00e1s podido comprobar, ahora no se devuelve ning\u00fan valor (el tipo devuelto es <code>void</code> y no hay sentencia <code>return</code>). En ingl\u00e9s se suele hablar de m\u00e9todos de tipo <code>set</code>, que en ingl\u00e9s significa poner o fijar (establecer un valor). El m\u00e9todo <code>establecerY</code> es pr\u00e1cticamente igual pero para establecer el valor del atributo <code>y</code>.</p> <p>Normalmente el c\u00f3digo en el interior de un m\u00e9todo ser\u00e1 algo m\u00e1s complejo y estar\u00e1 formado un conjunto de sentencias en las que se realizar\u00e1n c\u00e1lculos, se tomar\u00e1n decisiones, se repetir\u00e1n acciones, etc. Puedes ver un ejemplo m\u00e1s completo en el siguiente ejercicio.</p>"},{"location":"UD05/UD05_ES.html#sobrecarga-de-metodos","title":"Sobrecarga de m\u00e9todos","text":"<p>En principio podr\u00edas pensar que un m\u00e9todo puede aparecer una sola vez en la declaraci\u00f3n de una clase (no se deber\u00eda repetir el mismo nombre para varios m\u00e9todos). Pero no tiene porqu\u00e9 siempre suceder as\u00ed. Es posible tener varias versiones de un mismo m\u00e9todo (varios m\u00e9todos con el mismo nombre) gracias a la sobrecarga de m\u00e9todos.</p> <p>El lenguaje Java soporta la caracter\u00edstica conocida como sobrecarga de m\u00e9todos. \u00c9sta permite declarar en una misma clase varias versiones del mismo m\u00e9todo con el mismo nombre. La forma que tendr\u00e1 el compilador de distinguir entre varios m\u00e9todos que tengan el mismo nombre ser\u00e1 mediante la lista de par\u00e1metros del m\u00e9todo: si el m\u00e9todo tiene una lista de par\u00e1metros diferente, ser\u00e1 considerado como un m\u00e9todo diferente (aunque tenga el mismo nombre) y el analizador l\u00e9xico no producir\u00e1 un error de compilaci\u00f3n al encontrar dos nombres de m\u00e9todo iguales en la misma clase.</p> <p>Imag\u00ednate que est\u00e1s desarrollando una clase para escribir sobre un lienzo que permite utilizar diferentes tipograf\u00edas en funci\u00f3n del tipo de informaci\u00f3n que se va a escribir. Es probable que necesitemos un m\u00e9todo diferente seg\u00fan se vaya a pintar un n\u00famero entero (<code>int</code>), un n\u00famero real (<code>double</code>) o una cadena de caracteres (<code>String</code>). Una primera opci\u00f3n podr\u00eda ser definir un nombre de m\u00e9todo diferente dependiendo de lo que se vaya a escribir en el lienzo. Por ejemplo:</p> <ul> <li>M\u00e9todo <code>pintarEntero (int entero)</code>.</li> <li>M\u00e9todo <code>pintarReal (double real)</code>.</li> <li>M\u00e9todo <code>pintarCadena (double String)</code>.</li> <li>M\u00e9todo <code>pintarEnteroCadena (int entero, String cadena)</code>.</li> </ul> <p>Y as\u00ed sucesivamente para todos los casos que desees contemplar...</p> <p>La posibilidad que te ofrece la sobrecarga es utilizar un mismo nombre para todos esos m\u00e9todos (dado que en el fondo hacen lo mismo: pintar). Pero para poder distinguir unos de otros ser\u00e1 necesario que siempre exista alguna diferencia entre ellos en las listas de par\u00e1metros (bien en el n\u00famero de par\u00e1metros, bien en el tipo de los par\u00e1metros). Volviendo al ejemplo anterior, podr\u00edamos utilizar un mismo nombre, por ejemplo <code>pintar</code>, para todos los m\u00e9todos anteriores:</p> <ul> <li>M\u00e9todo <code>pintar (int entero)</code>.</li> <li>M\u00e9todo <code>pintar (double real)</code>.</li> <li>M\u00e9todo <code>pintar (double String)</code>.</li> <li>M\u00e9todo <code>pintar (int entero, String cadena)</code>.</li> </ul> <p>En este caso el compilador no va a generar ning\u00fan error pues se cumplen las normas ya que unos m\u00e9todos son perfectamente distinguibles de otros (a pesar de tener el mismo nombre) gracias a que tienen listas de par\u00e1metros diferentes.</p> <p>Lo que s\u00ed habr\u00eda producido un error de compilaci\u00f3n habr\u00eda sido por ejemplo incluir otro m\u00e9todo pintar (<code>int</code> entero), pues es imposible distinguirlo de otro m\u00e9todo con el mismo nombre y con la misma lista de par\u00e1metros (ya existe un m\u00e9todo <code>pintar</code> con un \u00fanico par\u00e1metro de tipo <code>int</code>).</p> <p>Tambi\u00e9n debes tener en cuenta que el tipo devuelto por el m\u00e9todo no es considerado a la hora de identificar un m\u00e9todo, as\u00ed que un tipo devuelto diferente no es suficiente para distinguir un m\u00e9todo de otro. Es decir, no podr\u00edas definir dos m\u00e9todos exactamente iguales en nombre y lista de par\u00e1metros e intentar distinguirlos indicando un tipo devuelto diferente. El compilador producir\u00e1 un error de duplicidad en el nombre del m\u00e9todo y no te lo permitir\u00e1. </p> <p>Es conveniente no abusar de sobrecarga de m\u00e9todos y utilizarla con cierta moderaci\u00f3n (cuando realmente puede beneficiar su uso), dado que podr\u00eda hacer el c\u00f3digo menos legible.</p>"},{"location":"UD05/UD05_ES.html#sobrecarga-de-operadores","title":"Sobrecarga de operadores.","text":"<p>Del mismo modo que hemos visto la posibilidad de sobrecargar m\u00e9todos (disponer de varias versiones de un m\u00e9todo con el mismo nombre cambiando su lista de par\u00e1metros), podr\u00eda plantearse tambi\u00e9n la opci\u00f3n de sobrecargar operadores del lenguaje tales como <code>+</code>, <code>\u2010</code>, <code>*</code>, <code>( )</code>, <code>&lt;</code>, <code>&gt;</code>, etc. para darles otro significado dependiendo del tipo de objetos con los que vaya a operar.</p> <p>En algunos casos puede resultar \u00fatil para ayudar a mejorar la legibilidad del c\u00f3digo, pues esos operadores resultan muy intuitivos y pueden dar una idea r\u00e1pida de cu\u00e1l es su funcionamiento.</p> <p>Un t\u00edpico ejemplo podr\u00eda ser el de la sobrecarga de operadores aritm\u00e9ticos como la suma (+) o el producto (*) para operar con fracciones. Si se definen objetos de una clase <code>Fracci\u00f3n</code> (que contendr\u00e1 los atributos <code>numerador</code> y <code>denominador</code>) podr\u00edan sobrecargarse los operadores aritm\u00e9ticos (habr\u00eda que redefinir el operador suma (<code>+</code>) para la suma, el operador asterisco (<code>*</code>) para el producto, etc.) para esta clase y as\u00ed podr\u00edan utilizarse para sumar o multiplicar objetos de tipo <code>Fraccion</code> mediante el algoritmo espec\u00edfico de suma o de producto del objeto <code>Fraccion</code> (pues esos operadores no est\u00e1n preparados en el lenguaje para operar con esos objetos).</p> <p>En algunos lenguajes de programaci\u00f3n como por ejemplo C++ o C# se permite la sobrecarga, pero no es algo soportado en todos los lenguajes. \u00bfQu\u00e9 sucede en el caso concreto de Java?</p> <p>El lenguaje Java NO soporta la sobrecarga de operadores.</p> <p>En el ejemplo anterior de los objetos de tipo Fracci\u00f3n, habr\u00e1 que declarar m\u00e9todos en la clase <code>Fraccion</code> que se encarguen de realizar esas operaciones, pero no lo podremos hacer sobrecargando los operadores del lenguaje (los s\u00edmbolos de la suma, resta, producto, etc.). Por ejemplo:</p> <pre><code>public Fraccion sumar (Fraccion sumando)\npublic Fraccion multiplicar (Fraccion multiplicando)\n</code></pre> <p>Y as\u00ed sucesivamente...</p> <p>Dado que en este m\u00f3dulo se est\u00e1 utilizando el lenguaje Java para aprender a programar, no podremos hacer uso de esta funcionalidad. M\u00e1s adelante, cuando aprendas a programar en otros lenguajes, es posible que s\u00ed tengas la posibilidad de utilizar este recurso.</p>"},{"location":"UD05/UD05_ES.html#la-referencia-this","title":"La referencia <code>this</code>.","text":"<p>La palabra reservada <code>this</code> consiste en una referencia al objeto actual. El uso de este operador puede resultar muy \u00fatil a la hora de evitar la ambig\u00fcedad que puede producirse entre el nombre de un par\u00e1metro de un m\u00e9todo y el nombre de un atributo cuando ambos tienen el mismo identificador (mismo nombre). En tales casos el par\u00e1metro \"oculta\" al atributo y no tendr\u00edamos acceso directo a \u00e9l (al escribir el identificador estar\u00edamos haciendo referencia al par\u00e1metro y no al atributo). En estos casos la referencia <code>this</code> nos permite acceder a estos atributos ocultados por los par\u00e1metros.</p> <p>Dado que <code>this</code> es una referencia a la propia clase en la que te encuentras en ese momento, puedes acceder a sus atributos mediante el operador punto (<code>.</code>) como sucede con cualquier otra clase u objeto. Por tanto, en lugar deponer el nombre del atributo (que estos casos har\u00eda referencia al par\u00e1metro), podr\u00edas escribir <code>this.nombreAtributo</code>, de manera que el compilador sabr\u00e1 que te est\u00e1s refiriendo al atributo y se eliminar\u00e1 la ambig\u00fcedad.</p> <p>En el ejemplo de la clase <code>Punto</code>, podr\u00edamos utilizar la referencia <code>this</code> si el nombre del par\u00e1metro del m\u00e9todo coincidiera con el del atributo que se desea modificar. Por ejemplo:</p> <pre><code>class Punto{\n    private int x,y;\n\n    void establecerX (int nuevaX){\n        int x = 1; //&lt;&lt;&lt;--- metodo\n        this.x = 1; //&lt;&lt;&lt;--- clase\n        this.x=x;\n        this.x=nuevaX;\n    }\n}\n</code></pre> <p>En este caso ha sido indispensable el uso de <code>this</code>, pues si no ser\u00eda imposible saber en qu\u00e9 casos te est\u00e1s refiriendo al par\u00e1metro <code>x</code> y en cu\u00e1les al atributo <code>x</code>. Para el compilador el identificador <code>x</code> ser\u00e1 siempre el par\u00e1metro, pues ha \"ocultado\" al atributo.</p> <p>En algunos casos puede resultar \u00fatil hacer uso de la referencia <code>this</code> aunque no sea necesario, pues puede ayudara mejorar la legibilidad del c\u00f3digo.</p>"},{"location":"UD05/UD05_ES.html#metodos-estaticos","title":"M\u00e9todos est\u00e1ticos.","text":"<p>Como ya has visto en ocasiones anteriores, un m\u00e9todo est\u00e1tico es un m\u00e9todo que puede ser usado directamente desde la clase, sin necesidad de tener que crear una instancia para poder utilizar al m\u00e9todo. Tambi\u00e9n son conocidos como m\u00e9todos de clase (como suced\u00eda con los atributos de clase), frente a los m\u00e9todos de objeto (es necesario un objeto para poder disponer de ellos).</p> <p>Los m\u00e9todos est\u00e1ticos no pueden manipular atributos de instancias (objetos) sino atributos est\u00e1ticos (de clase) y suelen ser utilizados para realizar operaciones comunes a todos los objetos de la clase, m\u00e1s que para una instancia concreta.</p> <p>Algunos ejemplos de operaciones que suelen realizarse desde m\u00e9todos est\u00e1ticos:</p> <ul> <li>Acceso a atributos espec\u00edficos de clase: incremento o decremento de contadores internos de la clase (<code>node instancias</code>), acceso a un posible atributo de nombre de la clase, etc.</li> <li>Operaciones gen\u00e9ricas relacionadas con la clase pero que no utilizan atributos de instancia. Por ejemplo una clase <code>NIF</code> (o <code>DNI</code>) que permite trabajar con el <code>DNI</code> y la letra del <code>NIF</code> y que proporciona funciones adicionales para calcular la letra <code>NIF</code> de un n\u00famero de <code>DNI</code> que se le pase como par\u00e1metro. Ese m\u00e9todo puede ser interesante para ser usado desde fuera de la clase de manera independiente a la existencia de objetos de tipo <code>NIF</code>.</li> </ul> <p>En la biblioteca de Java es muy habitual encontrarse con clases que proporcionan m\u00e9todos est\u00e1ticos que pueden resultar muy \u00fatiles para c\u00e1lculos auxiliares, conversiones de tipos, etc. Por ejemplo, la mayor\u00eda de las clases del paquete <code>java.lang</code> que representan tipos (<code>Integer</code>, <code>String</code>, <code>Float</code>, <code>Double</code>, <code>Boolean</code>, etc.) ofrecen m\u00e9todos est\u00e1ticos para hacer conversiones. Aqu\u00ed tienes algunos ejemplos:</p> <ul> <li><code>java   static String valueOf(int i)</code></li> </ul> <p>Devuelve la representaci\u00f3n en formato <code>String</code> (cadena) de un valor <code>int</code>. Se trata de un m\u00e9todo que no tiene que ver nada en absoluto con instancias de concretas de <code>String</code>, sino de un m\u00e9todo auxiliar que puede servir como herramienta para ser usada desde otras clases. Se utilizar\u00eda directamente con el nombre de la clase. Por ejemplo: </p> <ul> <li> <p><code>java     String enteroCadena = String.valueOf(23).</code></p> </li> <li> <p><code>java   static String valueOf(float f)</code></p> </li> </ul> <p>Algo similar para un valor de tipo <code>float</code>. Ejemplo de uso:</p> <ul> <li> <p><code>java     String floatCadena = String.valueOf(24.341)</code></p> </li> <li> <p><code>java   static int parseInt(String s)</code></p> </li> </ul> <p>En este caso se trata de un m\u00e9todo est\u00e1tico de la clase <code>Integer</code>. Analiza la cadena pasada como par\u00e1metro y la transforma en un <code>int</code>. Ejemplo de uso: </p> <ul> <li><code>java     int cadenaEntero=Integer.parseInt (\"\u201012\")</code></li> </ul> <p>Todos los ejemplos anteriores son casos en los que se utiliza directamente la clase como una especie de caja de herramientas que contiene m\u00e9todos que pueden ser utilizados desde cualquier parte, por eso suelen ser m\u00e9todos p\u00fablicos.</p>"},{"location":"UD05/UD05_ES.html#encapsulacion-control-de-acceso-y-visibilidad","title":"Encapsulaci\u00f3n, control de acceso y visibilidad.","text":"<p>Dentro de la Programaci\u00f3n Orientada a Objetos ya has visto que es muy importante el concepto de ocultaci\u00f3n, la cual ha sido lograda gracias a la encapsulaci\u00f3n de la informaci\u00f3n dentro de las clases. De esta manera una clase puede ocultar parte de su contenido o restringir el acceso a \u00e9l para evitar que sea manipulado de manera inadecuada. Los modificadores de acceso en Java permiten especificar el \u00e1mbito de visibilidad de los miembros de una clase, proporcionando as\u00ed un mecanismo de accesibilidad a varios niveles.</p> <p>Acabas de estudiar que cuando se definen los miembros de una clase (atributos o m\u00e9todos), e incluso la propia clase, se indica (aunque sea por omisi\u00f3n) un modificador de acceso. En funci\u00f3n de la visibilidad que se desee que tengan los objetos o los miembros de esos objetos se elegir\u00e1 alguno de los modificadores de acceso que has estudiado. Ahora que ya sabes c\u00f3mo escribir una clase completa (declaraci\u00f3n de la clase, declaraci\u00f3n de sus atributos y declaraci\u00f3n de sus m\u00e9todos), vamos a hacer un repaso general de las opciones de visibilidad (control de acceso) que has estudiado.</p> <p>Los modificadores de acceso determinan si una clase puede utilizar determinados miembros (acceder a atributos o invocar miembros) de otra clase. Existen dos niveles de control de acceso:</p> <ol> <li>A nivel general (nivel de clase): visibilidad de la propia clase.</li> <li>A nivel de miembros: especificaci\u00f3n, miembro por miembro, de su nivel de visibilidad.</li> </ol> <p>En el caso de la clase, ya estudiaste que los niveles de visibilidad pod\u00edan ser:</p> <ul> <li>P\u00fablico (modificador <code>public</code>), en cuyo caso la clase era visible a cualquier otra clase (cualquier otro fragmento de c\u00f3digo del programa).</li> <li>Privada al paquete (<code>package</code>)(sin modificador o modificador \"por omisi\u00f3n\"). En este caso, la clase s\u00f3lo ser\u00e1 visible a las dem\u00e1s clases del mismo paquete, pero no al resto del c\u00f3digo del programa (otros paquetes).</li> <li>Protegido (<code>protected</code>), lo podr\u00e1n ver las clases del mismo paquete y tambi\u00e9n las clases herederas.</li> </ul> <p>En el caso de los miembros, dispon\u00edas de otras dos posibilidades m\u00e1s de niveles de accesibilidad, teniendo un total de cuatro opciones a la hora de definir el control de acceso al miembro:</p> <ul> <li>P\u00fablico (modificador <code>public</code>), igual que en el caso global de la clase y con el mismo significado (miembro visible desde cualquier parte del c\u00f3digo).</li> <li>Del paquete (sin modificador), tambi\u00e9n con el mismo significado que en el caso de la clase (miembro visible s\u00f3lo desde clases del mismo paquete, ni siquiera ser\u00e1 visible desde una subclase salvo si \u00e9sta est\u00e1 en el mismo paquete).</li> <li>Privado (modificador <code>private</code>), donde s\u00f3lo la propia clase tiene acceso al miembro.</li> <li>Protegido (modificador <code>protected</code>), lo podr\u00e1n ver las clases del mismo paquete y tambi\u00e9n las clases herederas.</li> </ul>"},{"location":"UD05/UD05_ES.html#ocultacion-de-atributos-metodos-de-acceso","title":"Ocultaci\u00f3n de atributos. M\u00e9todos de acceso.","text":"<p>Los atributos de una clase suelen ser declarados como privados a la clase o, como mucho, <code>protected</code> (accesibles tambi\u00e9n por clases heredadas), pero no como <code>public</code>. De esta manera puedes evitar que sean manipulados inadecuadamente (por ejemplo modificarlos sin ning\u00fan tipo de control) desde el exterior del objeto.</p> <p>En estos casos lo que se suele hacer es declarar esos atributos como privados o protegidos y crear m\u00e9todos p\u00fablicos que permitan acceder a esos atributos. Si se trata de un atributo cuyo contenido puede ser observado pero no modificado directamente, puede implementarse un m\u00e9todo de \"obtenci\u00f3n\" del atributo (en ingl\u00e9s se les suele llamar m\u00e9todo de tipo <code>get</code>) y si el atributo puede ser modificado, puedes tambi\u00e9n implementar otro m\u00e9todo para la modificaci\u00f3n o \"establecimiento\" del valor del atributo (en ingl\u00e9s se le suele llamar m\u00e9todo de tipo <code>set</code>). Esto ya lo has visto en apartados anteriores.</p> <p>Si recuerdas la clase <code>Punto</code> que hemos utilizado como ejemplo, ya hiciste algo as\u00ed con los m\u00e9todos de obtenci\u00f3n y establecimiento de las coordenadas:</p> <pre><code>private int x, y;\n\n// M\u00e9todos get\npublic int obtenerX() {\n    return x;\n}\npublic int obtenerY() {\n    return y;\n}\n// M\u00e9todos set\npublic void establecerX(int x) {\n    this.x= x;\n}\npublic void establecerY(int y) {\n    this.y= y;\n}\n</code></pre> <p>As\u00ed, para poder obtener el valor del atributo <code>x</code> de un objeto de tipo <code>Punto</code> ser\u00e1 necesario utilizar el <code>m\u00e9todoobtenerX()</code> y no se podr\u00e1 acceder directamente al atributo <code>x</code> del objeto. En algunos casos los programadores directamente utilizan nombres en ingl\u00e9s para nombrar a estos m\u00e9todos:</p> <pre><code>getX(), getY(), setX(), setY(), getNombre, setNombre, getColor, etc.\n</code></pre> <p>Tambi\u00e9n pueden darse casos en los que no interesa que pueda observarse directamente el valor de un atributo, sino un determinado procesamiento o c\u00e1lculo que se haga con el atributo (pero no el valor original). Por ejemplo podr\u00edas tener un atributo <code>DNI</code> que almacene los 8 d\u00edgitos del <code>DNI</code> pero no la letra del <code>NIF</code> (pues se puede calcular a partir de los d\u00edgitos). El m\u00e9todo de acceso para el <code>DNI</code> (m\u00e9todo <code>getDNI</code>) podr\u00eda proporcionar el <code>DNI</code> completo (es decir, el <code>NIF</code>, incluyendo la letra), mientras que la letra no es almacenada realmente en el atributo del objeto. Algo similar podr\u00eda suceder con el d\u00edgito de control de una cuenta bancaria, que puede no ser almacenado en el objeto, pero s\u00ed calculado y devuelto cuando se nos pide el n\u00famero de cuenta completo.</p> <p>En otros casos puede interesar disponer de m\u00e9todos de modificaci\u00f3n de un atributo pero a trav\u00e9s de un determinado procesamiento previo para por ejemplo poder controlar errores o valores inadecuados. Volviendo al ejemplo del <code>NIF</code>, un m\u00e9todo para modificar un <code>DNI</code> (m\u00e9todo <code>setDNI</code>) podr\u00eda incluir la letra (<code>NIF</code> completo), de manera que as\u00ed podr\u00eda comprobarse si el n\u00famero de <code>DNI</code> y la letra coinciden (es un <code>NIF</code> v\u00e1lido). En tal caso se almacenar\u00e1 el <code>DNI</code> y en caso contrario se producir\u00e1 un error de validaci\u00f3n (por ejemplo lanzando una excepci\u00f3n). En cualquier caso, el <code>DNI</code> que se almacenara ser\u00eda solamente el n\u00famero y no la letra (pues la letra es calculable a partir del n\u00famero de <code>DNI</code>).</p>"},{"location":"UD05/UD05_ES.html#ocultacion-de-metodos","title":"Ocultaci\u00f3n de m\u00e9todos.","text":"<p>Normalmente los m\u00e9todos de una clase pertenecen a su interfaz y por tanto parece l\u00f3gico que sean declarados como p\u00fablicos. Pero tambi\u00e9n es cierto que pueden darse casos en los que exista la necesidad de disponer de algunos m\u00e9todos privados a la clase. Se trata de m\u00e9todos que realizan operaciones intermedias o auxiliares y que son utilizados por los m\u00e9todos que s\u00ed forman parte de la interfaz. Ese tipo de m\u00e9todos (de comprobaci\u00f3n, de adaptaci\u00f3n de formatos, de c\u00e1lculos intermedios, etc.) suelen declararse como privados pues no son de inter\u00e9s (o no es apropiado que sean visibles) fuera del contexto del interior del objeto.</p> <p>En el ejemplo anterior de objetos que contienen un <code>DNI</code>, ser\u00e1 necesario calcular la letra correspondiente a un determinado n\u00famero de <code>DNI</code> o comprobar si una determinada combinaci\u00f3n de n\u00famero y letra forman un <code>DNI</code> v\u00e1lido. Este tipo de c\u00e1lculos y comprobaciones podr\u00edan ser implementados en m\u00e9todos privados de la clase (o al menos como m\u00e9todos protegidos).</p> <pre><code>public static boolean validarDNI(String dni){\n    [...]\n    char letra = LetraDNI(Long numeroDNI);\n    [...]\n}\n\n??? static char LetraDNI (Long numero) {\n    [...]\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#utilizacion-de-los-metodos-y-atributos-de-una-clase","title":"Utilizaci\u00f3n de los m\u00e9todos y atributos de una clase.","text":"<p>Una vez que ya tienes implementada una clase con todos sus atributos y m\u00e9todos, ha llegado el momento de utilizarla, es decir, de instanciar objetos de esa clase e interaccionar con ellos. En unidades anteriores ya has visto c\u00f3mo declarar un objeto de una clase determinada, instanciarlo con el operador <code>new</code> y utilizar sus m\u00e9todos y atributos.</p>"},{"location":"UD05/UD05_ES.html#declaracion-de-un-objeto","title":"Declaraci\u00f3n de un objeto.","text":"<p>Como ya has visto en unidades anteriores, la declaraci\u00f3n de un objeto se realiza exactamente igual que la declaraci\u00f3n de una variable de cualquier tipo:</p> <pre><code>&lt;tipo&gt; nombreVariable;\n</code></pre> <p>En este caso el tipo ser\u00e1 alguna clase que ya hayas implementado o bien alguna de las proporcionadas por la biblioteca de Java o por alguna otra biblioteca escrita por terceros.</p> <p>Por ejemplo:</p> <pre><code>Punto p1;\nRectangulo r1, r2;\nCoche cocheAntonio;\nString palabra;\n</code></pre> <p>Esas variables (<code>p1</code>, <code>r1</code>, <code>r2</code>, <code>cocheAntonio</code>, <code>palabra</code>) en realidad son referencias (tambi\u00e9n conocidas como punteros o direcciones de memoria) que apuntan (hacen \"referencia\") a un objeto (una zona de memoria) de la clase indicada en la declaraci\u00f3n.</p> <p>Como ya estudiaste en la unidad dedicada a los objetos, un objeto reci\u00e9n declarado (referencia reci\u00e9n creada) no apunta a nada. Se dice que la referencia est\u00e1 vac\u00eda o que es una referencia nula (la variable objeto contiene el valor <code>null</code>). Es decir, la variable existe y est\u00e1 preparada para guardar una direcci\u00f3n de memoria que ser\u00e1 la zona donde se encuentre el objeto al que har\u00e1 referencia, pero el objeto a\u00fan no existe (no ha sido creado o instanciado). Por tanto se dice que apunta a un objeto nulo o inexistente.</p> <p>Para que esa variable (referencia) apunte realmente a un objeto (contenga una referencia o direcci\u00f3n de memoria que apunte a una zona de memoria en la que se ha reservado espacio para un objeto) es necesario crear o instanciar el objeto. Para ello se utiliza el operador <code>new</code>.</p>"},{"location":"UD05/UD05_ES.html#creacion-de-un-objeto","title":"Creaci\u00f3n de un objeto.","text":"<p>Para poder crear un objeto (instancia de una clase) es necesario utilizar el operador <code>new</code>, el cual tiene la siguiente sintaxis:</p> <pre><code>nombreObjeto= new &lt;ConstructorClase&gt; ([listaParametros]);\n</code></pre> <p>El constructor de una clase (<code>&lt;ConstructorClase&gt;</code>) es un m\u00e9todo especial que tiene toda clase y cuyo nombre coincide con el de la clase. Es quien se encarga de crear o construir el objeto, solicitando la reserva de memoria necesaria para los atributos e inicializ\u00e1ndolos a alg\u00fan valor si fuera necesario.</p> <p>Dado que el constructor es un m\u00e9todo m\u00e1s de la clase, podr\u00e1 tener tambi\u00e9n su lista de par\u00e1metros como tienen todos los m\u00e9todos.</p> <p>De la tarea de reservar memoria para la estructura del objeto (sus atributos m\u00e1s alguna otra informaci\u00f3n de car\u00e1cter interno para el entorno de ejecuci\u00f3n) se encarga el propio entorno de ejecuci\u00f3n de Java. Es decir, que por el hecho de ejecutar un m\u00e9todo constructor, el entorno sabr\u00e1 que tiene que realizar una serie de tareas (solicitud de una zona de memoria disponible, reserva de memoria para los atributos, enlace de la variable objeto a esa zona, etc.) y se pondr\u00e1 r\u00e1pidamente a desempe\u00f1arlas.</p> <p>Cuando escribas el c\u00f3digo de una clase no es necesario que implementes el m\u00e9todo constructor si no quieres hacerlo. Java se encarga de dotar de un constructor por omisi\u00f3n (tambi\u00e9n conocido como constructor por defecto) a toda clase. Ese constructor por omisi\u00f3n se ocupar\u00e1 exclusivamente de las tareas de reserva de memoria. Si deseas que el constructor realice otras tareas adicionales, tendr\u00e1s que escribirlo t\u00fa. El constructor por omisi\u00f3n no tiene par\u00e1metros.</p> <p>El constructor por defecto no se ve en el c\u00f3digo de una clase. Lo incluir\u00e1 el compilador de Java al compilar la clase si descubre que no se ha creado ning\u00fan m\u00e9todo constructor para esa clase. </p> <p>Algunos ejemplos de instanciaci\u00f3n o creaci\u00f3n de objetos podr\u00edan ser:</p> <pre><code>p1 = new Punto();\nr1 = new Rectangulo();\nr2 = new Rectangulo;\ncocheAntonio = new Coche();\npalabra = new String; //palabra = new String(\"\");\n</code></pre> <p>En el caso de los constructores, si \u00e9stos no tienen par\u00e1metros, pueden omitirse los par\u00e9ntesis vac\u00edos.</p> <p>Un objeto puede ser declarado e instanciado en la misma l\u00ednea. Por ejemplo:</p> <pre><code>Punto p1 = new Punto();\n</code></pre>"},{"location":"UD05/UD05_ES.html#manipulacion-de-un-objeto-utilizacion-de-metodos-y-atributos","title":"Manipulaci\u00f3n de un objeto: utilizaci\u00f3n de m\u00e9todos y atributos.","text":"<p>Una vez que un objeto ha sido declarado y creado (clase instanciada) ya s\u00ed se puede decir que el objeto existe en el entorno de ejecuci\u00f3n, y por tanto que puede ser manipulado como un objeto m\u00e1s en el programa, haci\u00e9ndose uso de sus atributos y sus m\u00e9todos.</p> <p>Para acceder a un miembro de un objeto se utiliza el operador punto (<code>.</code>) del siguiente modo:</p> <pre><code>&lt;nombreObjeto&gt;.&lt;nombreMiembro&gt;\n</code></pre> <p>Donde <code>&lt;nombreMiembro&gt;</code> ser\u00e1 el nombre de alg\u00fan miembro del objeto (atributo o m\u00e9todo) al cual se tenga acceso.</p> <p>Por ejemplo, en el caso de los objetos de tipo <code>Punto</code> que has declarado e instanciado en los apartados anteriores, podr\u00edas acceder a sus miembros de la siguiente manera:</p> <pre><code>Punto p1, p2, p3;\n\np1= new Punto();\np1.x= 5;\np1.y= 6;\n\nSystem.out.printf (\"p1.x: %d\\np1.y: %d\\n\", p1.x, p1.y);\nSystem.out.printf (\"p1.x: %d\\np1.y: %d\\n\", p1.obtenerX(), p1.obtenerY());\np1.establecerX(25);\np1.establecerX(30);\nSystem.out.printf (\"p1.x: %d\\np1.y: %d\\n\", p1.obtenerX(), p1.obtenerY());\n</code></pre> <p>Es decir, colocando el operador punto (<code>.</code>) a continuaci\u00f3n del nombre del objeto y seguido del nombre del miembro al que se desea acceder.</p>"},{"location":"UD05/UD05_ES.html#constructores","title":"Constructores.","text":"<p>Como ya has estudiado en unidades anteriores, en el ciclo de vida de un objeto se pueden distinguir las fases de:</p> <ul> <li>Construcci\u00f3n del objeto.</li> <li>Manipulaci\u00f3n y utilizaci\u00f3n del objeto accediendo a sus miembros.</li> <li>Destrucci\u00f3n del objeto.</li> </ul> <p>Como has visto en el apartado anterior, durante la fase de construcci\u00f3n o instanciaci\u00f3n de un objeto es cuando se reserva espacio en memoria para sus atributos y se inicializan algunos de ellos. Un constructor es un m\u00e9todo especial con el mismo nombre de la clase y que se encarga de realizar este proceso.</p> <p>El proceso de declaraci\u00f3n y creaci\u00f3n de un objeto mediante el operador <code>new</code> ya ha sido estudiado en apartados anteriores. Sin embargo las clases que hasta ahora has creado no ten\u00edan constructor. Has estado utilizando los constructores por defecto que proporciona Java al compilar la clase. Ha llegado el momento de que empieces a implementar tus propios constructores.</p> <p>Los m\u00e9todos constructores se encargan de llevar a cabo el proceso de creaci\u00f3n o construcci\u00f3n de un objeto.</p>"},{"location":"UD05/UD05_ES.html#concepto-de-constructor","title":"Concepto de constructor.","text":"<p>Un constructor es un m\u00e9todo que tiene el mismo nombre que la clase a la que pertenece y que no devuelve ning\u00fan valor tras su ejecuci\u00f3n. Su funci\u00f3n es la de proporcionar el mecanismo de creaci\u00f3n de instancias (objetos) de la clase.</p> <p>Cuando un objeto es declarado, en realidad a\u00fan no existe. Tan solo se trata de un nombre simb\u00f3lico (una variable) que en el futuro har\u00e1 referencia a una zona de memoria que contendr\u00e1 la informaci\u00f3n que representa realmente a un objeto. Para que esa variable de objeto a\u00fan \"vac\u00eda\" (se suele decir que es una referencia nula o vac\u00eda) apunte, o haga referencia a una zona de memoria que represente a una instancia de clase (objeto) existente, es necesario \"construir\" el objeto. Ese proceso se realizar\u00e1 a trav\u00e9s del m\u00e9todo constructor de la clase. Por tanto para crear un nuevo objeto es necesario realizar una llamada a un m\u00e9todo constructor de la clase a la que pertenece ese objeto.</p> <p>Ese proceso se realiza mediante la utilizaci\u00f3n del operador <code>new</code>.</p> <p>Hasta el momento ya has utilizado en numerosas ocasiones el operador <code>new</code> para instanciar o crear objetos. En realidad lo que estabas haciendo era una llamada al constructor de la clase para que reservara memoria para ese objeto y por tanto \"crear\" f\u00edsicamente el objeto en la memoria (dotarlo de existencia f\u00edsica dentro de la memoria del ordenador). Dado que en esta unidad est\u00e1s ya definiendo tus propias clases, parece que ha llegado el momento de que empieces a escribir tambi\u00e9n los constructores de tus clases.</p> <p>Por otro lado, si un constructor es al fin y al cabo una especie de m\u00e9todo (aunque algo especial) y Java soporta la sobrecarga de m\u00e9todos, podr\u00edas plantearte la siguiente pregunta: \u00bfpodr\u00e1 una clase disponer de m\u00e1s de constructor? En otras palabras, \u00bfser\u00e1 posible la sobrecarga de constructores? La respuesta es afirmativa.</p> <p>Una misma clase puede disponer de varios constructores. Los constructores soportan la sobrecarga.</p> <p>Es necesario que toda clase tenga al menos un constructor. Si no se define ning\u00fan constructor en una clase, el compilador crear\u00e1 por nosotros un constructor por defecto vac\u00edo que se encarga de inicializar todos los atributos a sus valores por defecto (0 para los num\u00e9ricos, null para las referencias, false para los boolean, etc.).</p> <p>Algunas analog\u00edas que podr\u00edas imaginar para representar el constructor de una clase podr\u00edan ser:</p> <ul> <li>Los moldes de cocina para flanes, galletas, pastas, etc.</li> <li>Un cubo de playa para crear castillos de arena.</li> <li>Un molde de un lingote de oro.</li> <li>Una bolsa para hacer cubitos de hielo.</li> </ul> <p>Una vez que incluyas un constructor personalizado a una clase, el compilador ya no incluir\u00e1 el constructor por defecto (sin par\u00e1metros) y por tanto si intentas usarlo se producir\u00eda un error de compilaci\u00f3n. Si quieres que tu clase tenga tambi\u00e9n un constructor sin par\u00e1metros tendr\u00e1s que escribir su c\u00f3digo (ya no lo har\u00e1 por ti el compilador)</p>"},{"location":"UD05/UD05_ES.html#creacion-de-constructores","title":"Creaci\u00f3n de constructores.","text":"<p>Cuando se escribe el c\u00f3digo de una clase normalmente se pretende que los objetos de esa clase se creen de una determinada manera. Para ello se definen uno o m\u00e1s constructores en la clase. En la definici\u00f3n de un constructor se indican:</p> <ul> <li>El tipo de acceso.</li> <li>El nombre de la clase (el nombre de un m\u00e9todo constructor es siempre el nombre de la propia clase).</li> <li>La lista de par\u00e1metros que puede aceptar.</li> <li>Si lanza o no excepciones.</li> <li>El cuerpo del constructor (un bloque de c\u00f3digo como el de cualquier m\u00e9todo).</li> </ul> <p>Como puedes observar, la estructura de los constructores es similar a la de cualquier m\u00e9todo, con las excepciones de que no tiene tipo de dato devuelto (no devuelve ning\u00fan valor) y que el nombre del m\u00e9todo constructor debe ser obligatoriamente el nombre de la clase.</p> <p>Si defines constructores personalizados para una clase, el constructor por defecto (sin par\u00e1metros) para esa clase deja de ser generado por el compilador, de manera que tendr\u00e1s que crearlo t\u00fa si quieres poder utilizarlo.</p> <p>Si se ha creado un constructor con par\u00e1metros y no se ha implementado el constructor por defecto, el intento de utilizaci\u00f3n del constructor por defecto producir\u00e1 un error de compilaci\u00f3n (el compilador no lo har\u00e1 por nosotros).</p> <p>Un ejemplo de constructor para la clase Punto podr\u00eda ser:</p> <pre><code>public Punto(int x, int y) {\n    this.x= x;\n    this.y= y;\n    cantidadPuntos++; // Suponiendo que tengamos un atributo est\u00e1tico cantidadPuntos\n}\n</code></pre> <p>En este caso el constructor recibe dos par\u00e1metros. Adem\u00e1s de reservar espacio para los atributos (de lo cual se encarga autom\u00e1ticamente Java), tambi\u00e9n asigna sendos valores iniciales a los atributos <code>x</code> e y. Por \u00faltimo incrementa un atributo (probablemente est\u00e1tico) llamado <code>cantidadPuntos</code>.</p>"},{"location":"UD05/UD05_ES.html#utilizacion-de-constructores","title":"Utilizaci\u00f3n de constructores.","text":"<p>Una vez que dispongas de tus propios constructores personalizados, la forma de utilizarlos es igual que con el constructor por defecto (mediante la utilizaci\u00f3n de la palabra reservada <code>new</code>) pero teniendo en cuenta que si has declarado par\u00e1metros en tu m\u00e9todo constructor, tendr\u00e1s que llamar al constructor con alg\u00fan valor para esos par\u00e1metros. Un ejemplo de utilizaci\u00f3n del constructor que has creado para la clase <code>Punto</code> en el apartado anterior podr\u00eda ser:</p> <pre><code>Punto p1;\np1= new Punto(10, 7);\n</code></pre> <p>En este caso no se estar\u00eda utilizando el constructor por defecto sino el constructor que acabas de implementar en el cual adem\u00e1s de reservar memoria se asigna un valor a algunos de los atributos.</p>"},{"location":"UD05/UD05_ES.html#constructores-de-copia","title":"Constructores de copia.","text":"<p>Una forma de iniciar un objeto podr\u00eda ser mediante la copia de los valores de los atributos de otro objeto ya existente. Imagina que necesitas varios objetos iguales (con los mismos valores en sus atributos) y que ya tienes uno de ellos perfectamente configurado (sus atributos contienen los valores que t\u00fa necesitas). Estar\u00eda bien disponer de un constructor que hiciera copias id\u00e9nticas de ese objeto.</p> <p>Durante el proceso de creaci\u00f3n de un objeto puedes generar objetos exactamente iguales(basados en la misma clase) que se distinguir\u00e1n posteriormente porque podr\u00e1n tener estados distintos (valores diferentes en los atributos). La idea es poder decirle a la clase que adem\u00e1s de generar un objeto nuevo, que lo haga con los mismos valores que tenga otro objeto ya existente. Es decir, algo as\u00ed como si pudieras clonar el objeto tantas veces como te haga falta. A este tipo de mecanismo se le suele llamar constructor copia o constructor de copia.</p> <p>Un constructor copia es un m\u00e9todo constructor como los que ya has utilizado pero con la particularidad de que recibe como par\u00e1metro una referencia al objeto cuyo contenido se desea copiar. Este m\u00e9todo revisa cada uno de los atributos del objeto recibido como par\u00e1metro y se copian todos sus valores en los atributos del objeto que se est\u00e1 creando en ese momento en el m\u00e9todo constructor.</p> <p>Un ejemplo de constructor copia para la clase Punto podr\u00eda ser:</p> <pre><code>public Punto(Punto p){\n    this.x = p.obtenerX();\n    this.y = p.obtenerY();\n}\n</code></pre> <p>En este caso el constructor recibe como par\u00e1metro un objeto del mismo tipo que el que va a ser creado (clase <code>Punto</code>), inspecciona el valor de sus atributos (atributos <code>x</code> e <code>y</code>), y los reproduce en los atributos del objeto en proceso de construcci\u00f3n (<code>this</code>).</p> <p>Un ejemplo de utilizaci\u00f3n de ese constructor podr\u00eda ser:</p> <pre><code>Punto p1, p2;\np1 = new Punto (10, 7);\np2 = new Punto (p1);\n</code></pre> <p>En este caso el objeto <code>p2</code> se crea a partir de los valores del objeto <code>p1</code>.</p>"},{"location":"UD05/UD05_ES.html#destruccion-de-objetos","title":"Destrucci\u00f3n de objetos.","text":"<p>Como ya has estudiado en unidades anteriores, cuando un objeto deja de ser utilizado, los recursos usados por \u00e9l (memoria, acceso a archivos, conexiones con bases de datos, etc.) deber\u00edan de ser liberados para que puedan volver a ser utilizados por otros procesos (mecanismo de destrucci\u00f3n del objeto).</p> <p>Mientras que de la construcci\u00f3n de los objetos se encargan los m\u00e9todos constructores, de la destrucci\u00f3n se encarga un proceso del entorno de ejecuci\u00f3n conocido como recolector de basura (garbage collector). Este proceso va buscando peri\u00f3dicamente objetos que ya no son referenciados (no hay ninguna variable que haga referencia a ellos) y los marca para ser eliminados. Posteriormente los ir\u00e1 eliminando de la memoria cuando lo considere oportuno (en funci\u00f3n de la carga del sistema, los recursos disponibles, etc.).</p> <p>Normalmente se suele decir que en Java no hay m\u00e9todo destructor y que en otros lenguajes orientados a objetos como C++, s\u00ed se implementa expl\u00edcitamente el destructor de una clase de la misma manera que se define el constructor. En realidad en Java tambi\u00e9n es posible implementar el m\u00e9todo destructor de una clase, se trata del m\u00e9todo <code>finalize()</code>.</p> <p>Este m\u00e9todo <code>finalize</code> es llamado por el recolector de basura cuando va a destruir el objeto (lo cual nunca se sabe cu\u00e1ndo va a suceder exactamente, pues una cosa es que el objeto sea marcado para ser borrado y otra que sea borrado efectivamente). Si ese m\u00e9todo no existe, se ejecutar\u00e1 un destructor por defecto (el m\u00e9todo <code>finalize</code> que contiene la clase <code>Object</code>, de la cual heredan todas las clases en Java) que liberar\u00e1 la memoria ocupada por el objeto. Se recomienda por tanto que si un objeto utiliza determinados recursos de los cuales no tienes garant\u00eda que el entorno de ejecuci\u00f3n los vaya a liberar (cerrar archivos, cerrar conexiones de red, cerrar conexiones con bases de datos, etc.), implementes expl\u00edcitamente un m\u00e9todo <code>finalize</code> en tus clases. Si el \u00fanico recurso que utiliza tu clase es la memoria necesaria para albergar sus atributos, eso s\u00ed ser\u00e1 liberado sin problemas. Pero si se trata de algo m\u00e1s complejo, ser\u00e1 mejor que te encargues t\u00fa mismo de hacerlo implementando tu destructor personalizado (<code>finalize</code>).</p> <p>Por otro lado, esta forma de funcionar del entorno de ejecuci\u00f3n de Java (destrucci\u00f3n de objetos no referenciados mediante el recolector de basura) implica que no puedas saber exactamente cu\u00e1ndo un objeto va a ser definitivamente destruido, pues si una variable deja de ser referenciada (se cierra el \u00e1mbito de ejecuci\u00f3n donde fue creada) no implica necesariamente que sea inmediatamente borrada, sino que simplemente es marcada para que el recolector la borre cuando pueda hacerlo.</p> <p>Si en un momento dado fuera necesario garantizar que el proceso de finalizaci\u00f3n (m\u00e9todo <code>finalize</code>) sea invocado, puedes recurrir al m\u00e9todo <code>runFinalization()</code> de la clase <code>System</code> para forzarlo:</p> <pre><code>System.runFinalization ();\n</code></pre> <p>Este m\u00e9todo se encarga de llamar a todos los m\u00e9todos <code>finalize</code> de todos los objetos marcados por el recolector de basura para ser destruidos.</p> <p>Si necesitas implementar un destructor (normalmente no ser\u00e1 necesario), debes tener en cuenta que:</p> <ul> <li>El nombre del m\u00e9todo destructor debe ser <code>finalize()</code>.</li> <li>No puede recibir par\u00e1metros.</li> <li>S\u00f3lo puede haber un destructor en una clase. No es posible la sobrecarga dado que no tiene par\u00e1metros.</li> <li>No puede devolver ning\u00fan valor. Debe ser de tipo <code>void</code>.</li> </ul>"},{"location":"UD05/UD05_ES.html#clases-anidadas-clases-internas-inner-class","title":"Clases Anidadas, Clases Internas (Inner Class)","text":""},{"location":"UD05/UD05_ES.html#clase-anidada-nested-class","title":"Clase Anidada (Nested Class):","text":"<p>Una clase anidada es una clase est\u00e1tica definida dentro de otra clase. Se declara con el modificador <code>static</code>.</p> <p>Asociaci\u00f3n:</p> <ul> <li>No tiene una relaci\u00f3n directa con las instancias de la clase externa.</li> <li>Se puede acceder a ella sin necesidad de crear una instancia de la clase externa.</li> </ul> <p>Contexto:</p> <ul> <li>Solo puede acceder a los miembros <code>static</code> de la clase externa.</li> <li>No puede acceder a miembros de instancia (no est\u00e1ticos) de la clase externa.</li> </ul> <p>Uso com\u00fan:</p> <ul> <li>Se utiliza cuando la clase anidada tiene un prop\u00f3sito independiente de las instancias de la clase externa.</li> </ul> <p>Ejemplo:</p> <pre><code>public class Empresa {\n[...]\n    static class PlantillaCompletaException extends Exception {\n        public PlantillaCompletaException() {\n            super(\"La empresa tiene la plantilla completa.\");\n        }\n    }\n}\n</code></pre> <p>As\u00ed despu\u00e9s podemos usarla en el <code>catch</code> accediendo directamente a la clase <code>Empresa</code> (ya que es <code>static</code>):</p> <pre><code>public class TestEmpresa {\n    public static void main(String[] args) {\n        [...]\n        try {\n            [...]\n        } catch (Empresa.PlantillaCompletaException ex) {\n            System.err.println(ex.getMessage());\n        }\n        [...]\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#clase-interna-inner-class","title":"Clase Interna (Inner Class):","text":"<p>Una clase interna es una clase no est\u00e1tica definida dentro de otra clase. No se declara con <code>static</code>.</p> <p>Asociaci\u00f3n:</p> <ul> <li>Est\u00e1 directamente asociada con una instancia de la clase externa.</li> <li>Para instanciarla, primero necesitas una instancia de la clase externa.</li> </ul> <p>Contexto:</p> <ul> <li>Puede acceder a todos los miembros (est\u00e1ticos y no est\u00e1ticos) de la clase externa, incluso si son privados.</li> <li>La clase interna tiene una referencia impl\u00edcita a la instancia de la clase externa.</li> </ul> <p>Uso com\u00fan:</p> <ul> <li>Se utiliza cuando la clase interna necesita interactuar con los miembros de instancia de la clase externa.</li> </ul> <p>Ejemplo:</p> <pre><code>class Pc {\n\n    double precio;\n\n    public String toString() {\n        return \"El precio del PC es \" + this.precio;\n    }\n\n    class Monitor {\n\n        String marca;\n\n        public String toString() {\n            return \"El monitor es de la marca \" + this.marca;\n        }\n    }\n\n    class Cpu {\n\n        String marca;\n\n        public String toString() {\n            return \"La CPU es de la marca \" + this.marca;\n        }\n    }\n}\n\npublic class ClaseInternaHardware {\n\n    public static void main(String[] args) {\n        Pc miPc = new Pc();\n        Pc.Monitor miMonitor = miPc.new Monitor();\n        Pc.Cpu miCpu = miPc.new Cpu();\n        miPc.precio = 1250.75;\n        miMonitor.marca = \"Asus\";\n        miCpu.marca = \"AMD\";\n        System.out.println(miPc); //El precio del PC es 1250.75\n        System.out.println(miMonitor); //El monitor es de la marca Asus\n        System.out.println(miCpu); //La CPU es de la marca AMD\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#comparacion-resumida","title":"Comparaci\u00f3n Resumida:","text":"Caracter\u00edstica Clase Anidada (Nested) Clase Interna (Inner) Es est\u00e1tica S\u00ed (<code>static</code>) No (<code>non-static</code>) Acceso a clase externa Solo miembros <code>static</code> Miembros est\u00e1ticos y no est\u00e1ticos Asociaci\u00f3n con clase externa No est\u00e1 asociada a instancias Est\u00e1 asociada a una instancia de la clase externa Uso com\u00fan L\u00f3gica independiente de instancias de la clase externa L\u00f3gica que necesita interactuar con la instancia externa Instanciaci\u00f3n <code>OuterClass.NestedClass nested = new OuterClass.NestedClass();</code> <code>OuterClass.InnerClass inner = outer.new InnerClass();</code>"},{"location":"UD05/UD05_ES.html#convenciones-comunes-sobre-el-numero-de-clases-en-un-archivo","title":"Convenciones comunes sobre el n\u00famero de clases en un archivo:","text":"<ol> <li> <p>Una clase p\u00fablica por archivo:     Es una convenci\u00f3n est\u00e1ndar en Java que cada archivo .java debe contener solo una clase p\u00fablica, y el nombre del archivo debe coincidir exactamente con el nombre de la clase p\u00fablica (incluyendo may\u00fasculas y min\u00fasculas). Esto es obligatorio para que el compilador de Java pueda encontrar las clases correctamente.</p> <p>Ejemplo: </p><pre><code>// Archivo: MiClase.java\npublic class MiClase {\n    // C\u00f3digo de la clase\n}\n</code></pre> 2. Clases no p\u00fablicas en el mismo archivo: <p>Puedes incluir m\u00faltiples clases no p\u00fablicas (con modificador default o package-private) en el mismo archivo, siempre que no haya m\u00e1s de una clase p\u00fablica.</p> <p>Ejemplo:</p> <pre><code>// Archivo: ClasePrincipal.java\npublic class ClasePrincipal {\n    // C\u00f3digo de la clase p\u00fablica\n}\n\nclass ClaseAuxiliar {\n    // C\u00f3digo de la clase auxiliar\n}\n</code></pre> <p>Sin embargo, esto no es una pr\u00e1ctica com\u00fan en proyectos grandes, ya que puede dificultar el mantenimiento y la localizaci\u00f3n de clases.</p> </li> <li> <p>Separar clases auxiliares en archivos propios:</p> </li> </ol> <p>Aunque no es obligatorio, es una buena pr\u00e1ctica colocar cada clase en su propio archivo, incluso si no es p\u00fablica. Esto facilita:</p> <ul> <li>La localizaci\u00f3n y lectura de la clase.</li> <li>El control de versiones y la fusi\u00f3n de cambios en sistemas de control de c\u00f3digo fuente.</li> <li>La prueba unitaria y el mantenimiento.</li> </ul> <ol> <li>Uso de clases anidadas:</li> </ol> <p>Si una clase es relevante solo dentro del contexto de otra clase, considera usar una clase anidada o una clase interna en lugar de una clase separada.</p> <p>Ejemplo:</p> <pre><code>```java\npublic class ClaseExterna {\n    private static class ClaseAnidada {\n        // Clase anidada\n    }\n\n    private class InnerClass {\n        // Clase interna\n    }\n}\n```\n</code></pre> <ol> <li>Evitar clases no relacionadas en un solo archivo:</li> </ol> <p>Colocar m\u00faltiples clases no relacionadas en un solo archivo se considera una mala pr\u00e1ctica, ya que:</p> <ul> <li>Puede hacer que el archivo sea dif\u00edcil de leer.</li> <li>Introduce acoplamiento innecesario entre clases.</li> <li>Viola el principio de responsabilidad \u00fanica (SRP).</li> </ul> <ol> <li>Clases utilitarias:</li> </ol> <p>Para clases con m\u00e9todos est\u00e1ticos (por ejemplo, <code>Utils</code> o <code>Constants</code>), es com\u00fan colocarlas en un \u00fanico archivo, ya que suelen ser peque\u00f1as y no tienen l\u00f3gica compleja.</p>"},{"location":"UD05/UD05_ES.html#introduccion-a-la-herencia","title":"Introducci\u00f3n a la herencia.","text":"<p>La herencia es uno de los conceptos fundamentales que introduce la programaci\u00f3n orientada a objetos. La idea fundamental es permitir crear nuevas clases aprovechando las caracter\u00edsticas (atributos y m\u00e9todos) de otras clases ya creadas evitando as\u00ed tener que volver a definir esas caracter\u00edsticas (reutilizaci\u00f3n).</p> <p>A una clase que hereda de otra se le llama subclase o clase hija y aquella de la que se hereda es conocida como superclase o clase padre. Tambi\u00e9n se puede hablar en general de clases descendientes o clases ascendientes. Al heredar, la subclase adquiere todas las caracter\u00edsticas (atributos y m\u00e9todos) de su superclase, aunque algunas de ellas pueden ser sobrescritas o modificadas dentro de la subclase (a eso se le suele llamar especializaci\u00f3n).</p> <p>Una clase puede heredar de otra que a su vez ha podido heredar de una tercera y as\u00ed sucesivamente. Esto significa que las clases van tomando todas las caracter\u00edsticas de sus clases ascendientes (no s\u00f3lo de su superclase o clase padre inmediata) a lo largo de toda la rama del \u00e1rbol de la jerarqu\u00eda de clases en la que se encuentre.</p> <p>Imagina que quieres modelar el funcionamiento de algunos veh\u00edculos para trabajar con ellos en un programa de simulaci\u00f3n. Lo primero que haces es pensar en una clase <code>Veh\u00edculo</code> que tendr\u00e1 un conjunto de atributos (por ejemplo: posici\u00f3n actual, velocidad actual y velocidad m\u00e1xima que puede alcanzar el veh\u00edculo) y de m\u00e9todos (por ejemplo: detener, acelerar, frenar, establecer direcci\u00f3n, establecer sentido).</p> <p>Dado que vas a trabajar con muchos tipos de veh\u00edculos, no tendr\u00e1s suficiente con esas caracter\u00edsticas, as\u00ed que seguramente vas a necesitar nuevas clases que las incorporen. Pero las caracter\u00edsticas b\u00e1sicas que has definido en la clase Veh\u00edculo van a ser compartidas por cualquier nuevo veh\u00edculo que vayas a modelar. Esto significa que si creas otra clase podr\u00edas heredar de <code>Veh\u00edculo</code> todas esos atributos y propiedades y tan solo tendr\u00edas que a\u00f1adir las nuevas.</p> <p>Si vas a trabajar con veh\u00edculos que se desplazan por tierra, agua y aire, tendr\u00e1s que idear nuevas clases con caracter\u00edsticas adicionales. Por ejemplo, podr\u00edas crear una clase <code>VehiculoTerrestre</code>, que herede las caracter\u00edsticas de <code>Veh\u00edculo</code>, pero que tambi\u00e9n incorpore atributos como el n\u00famero de ruedas o la altura de los bajos). A su vez, podr\u00eda idearse una nueva clase que herede de <code>VehiculoTerrestre</code> y que incorpore nuevos atributos y m\u00e9todos como, por ejemplo, una clase <code>Coche</code>. Y as\u00ed sucesivamente con toda la jerarqu\u00eda de clases heredadas que consideres oportunas para representar lo mejor posible el entorno y la informaci\u00f3n sobre la que van a trabajar tus programas.</p>"},{"location":"UD05/UD05_ES.html#creacion-y-utilizacion-de-clases-heredadas","title":"Creaci\u00f3n y utilizaci\u00f3n de clases heredadas.","text":"<p>\u00bfC\u00f3mo se indica en Java que una clase hereda de otra? Para indicar que una clase hereda de otra es necesario utilizar la palabra reservada <code>extends</code> junto con el nombre de la clase de la que se quieren heredar sus caracter\u00edsticas:</p> <pre><code>class&lt;NombreClase&gt; extends &lt;nombreSuperClase&gt; {\n    ...\n}\n</code></pre> <p>En el ejemplo anterior de los veh\u00edculos, la clase <code>VehiculoTerrestre</code> podr\u00eda quedar as\u00ed al ser declarada:</p> <pre><code>class VehiculoTerrestre extends Vehiculo {\n    ...\n}\n</code></pre> <p>Y en el caso de la clase <code>Coche</code>:</p> <pre><code>class Coche extends VehiculoTerrestre {\n    ...\n}\n</code></pre> <p>En unidades posteriores estudiar\u00e1s detalladamente c\u00f3mo crear una jerarqu\u00eda de clases y qu\u00e9 relaci\u00f3n existe entre la herencia y los distintos modificadores de clases, atributos y m\u00e9todos. Por ahora es suficiente con que entiendas el concepto de herencia y sepas reconocer cu\u00e1ndo una clase hereda de otra (uso de la palabra reservada <code>extends</code>).</p> <p>Puedes comprobar que en las bibliotecas proporcionadas por Java aparecen jerarqu\u00edas bastante complejas de clases heredadas en las cuales se han ido aprovechando cada uno de los miembros de una clase base para ir construyendo las distintas clases derivadas a\u00f1adiendo (y a veces modificando) poco a poco nueva funcionalidad.</p> <p>Eso suele suceder en cualquier proyecto de software conforme se van a analizando, descomponiendo y modelando los datos con los que hay que trabajar. La idea es poder representar de una manera eficiente toda la informaci\u00f3n que es manipulada por el sistema que se desea automatizar. Una jerarqu\u00eda de clases suele ser una buena forma de hacerlo.</p> <p>En el caso de Java, cualquier clase con la que trabajes tendr\u00e1 un ascendiente. Si en la declaraci\u00f3n de clase no indicas la clase de la que se hereda (no se incluye un <code>extends</code>), el compilador considerar\u00e1 autom\u00e1ticamente que se hereda de la clase <code>Object</code>, que es la clase que se encuentra en el nivel superior de toda la jerarqu\u00eda de clases en Java (y que es la \u00fanica que no hereda de nadie).</p> <p>Tambi\u00e9n ir\u00e1s viendo al estudiar distintos componentes de las bibliotecas de Java (por ejemplo en el caso de las interfaces gr\u00e1ficas) que para poder crear objetos basados en las clases proporcionadas por esas bibliotecas tendr\u00e1s que crear tus propias clases que hereden de algunas de esas clases. Para ellos tendr\u00e1s que hacer uso de la palabra reservada <code>extends</code>.</p> <p>En Java todas las clases son descendientes (de manera expl\u00edcita o impl\u00edcita) de la clase <code>Object</code>.</p>"},{"location":"UD05/UD05_ES.html#conversion-entre-objetos-casting","title":"Conversi\u00f3n entre objetos (Casting)","text":"<p>La esencia de Casting permite convertir un dato de tipo primitivo en otro generalmente de m\u00e1s precisi\u00f3n.</p> <p>Entre objetos es posible realizar el casting. Tenemos una clase persona con una subclase empleado y este a su vez una subclase encargado.</p> <pre><code>classDiagram\nPersona &lt;|-- Empleado\nEmpleado &lt;|-- Encargado</code></pre> <p>Si creamos una instancia de tipo persona y le asignamos un objeto de tipo empleado o encargado, al ser una subclase no existe ning\u00fan tipo de problema, ya que todo encargado o empleado es persona.</p> <p>Por otro lado, si intentamos asignar valores a los atributos espec\u00edficos de empleado o encargado nos encontramos con una p\u00e9rdida de precisi\u00f3n puesto que no se pueden ejecutar todos los m\u00e9todos de los que dispone un objeto de tipo empleado o encargado, ya que persona contiene menos m\u00e9todos que la clase empleado o encargado. En este caso es necesario hacer un casting, sino el compilador dar\u00e1 error.</p> <p>Ejemplo:</p> <pre><code>package UD05;\n\n// Clase Persona que solo dispone de nombre\npublic class Persona {\n\n    String nombre;\n\n    public Persona(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public void setNombre(String nom) {\n        nombre = nom;\n    }\n\n    public String getNombre() {\n        return nombre;\n    }\n\n    @Override\n    public String toString() {\n        return \"Nombre: \" + nombre;\n    }\n}\n</code></pre> <pre><code>package UD05;\n\n// Clase Empleado que hereda de Persona y a\u00f1ade atributo sueldoBase\npublic class Empleado extends Persona {\n\n    double sueldoBase;\n\n    public Empleado(String nombre, double sueldoBase) {\n        super(nombre);\n        this.sueldoBase = sueldoBase;\n    }\n\n    public double getSueldo() {\n        return sueldoBase;\n    }\n\n    public void setSueldoBase(double sueldoBase) {\n        this.sueldoBase = sueldoBase;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \"\\nSueldo Base: \" + sueldoBase;\n    }\n}\n</code></pre> <pre><code>package UD05;\n\n// Clase Encargado que hereda de Empleado y a\u00f1ade atributo seccion\npublic class Encargado extends Empleado {\n\n    String seccion;\n\n    public Encargado(String nombre, double sueldoBase, String seccion) {\n        super(nombre, sueldoBase);\n        this.seccion = seccion;\n    }\n\n    public String getSeccion() {\n        return seccion;\n    }\n\n    public void setSeccion(String seccion) {\n        this.seccion = seccion;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \"\\nSecci\u00f3n:\" + seccion ;\n    }\n}\n</code></pre> <pre><code>package UD05;\n\npublic class Casting {\n\n    public static void main(String[] args) {     \n        // Casting Implicito\n        Persona encargadoCarniceria = new Encargado(\"Rosa Ramos\", 1200, \"Carniceria\");\n\n        // No tenemos disponibles los m\u00e9todos de la clase Encargado:\n        //EncargadaCarniceria.setSueldoBase(1200);\n        //EncargadaCarniceria.setSeccion(\"Carniceria\");\n        //Pero al imprimir se imprime con el m\u00e9todo m\u00e1s espec\u00edfico (luego lo vemos)\n        System.out.println(encargadoCarniceria);\n\n        // Casting Explicito\n        Encargado miEncargado = (Encargado) encargadoCarniceria;\n        //Tenemos disponibles los m\u00e9todos de la clase Encargado:       \n        miEncargado.setSueldoBase(1200);\n        miEncargado.setSeccion(\"Carniceria\");\n        //Al imprimir se imprime con el m\u00e9todo m\u00e1s espec\u00edfico de nuevo.\n        System.out.println(miEncargado);\n    }\n}\n</code></pre> <p>Las reglas a la hora de realizar casting es que:</p> <ul> <li>cuando se utiliza una clase m\u00e1s espec\u00edficas (m\u00e1s abajo en la jerarqu\u00eda) no hace falta casting. Es lo que llamamos casting impl\u00edcito.</li> <li>cuando se utiliza una clase menos espec\u00edfica (m\u00e1s arriba en la jerarqu\u00eda) hay que hacer un casting expl\u00edcito.</li> </ul> <p>\u00bfPorqu\u00e9 a la hora de imprimir el casting implicito la clase m\u00e1s gen\u00e9rica se imprime con el m\u00e9todo m\u00e1s especializado?</p> <p>Debes entender que en realidad <code>encargadoCarniceria</code> es un <code>Encargado</code> que se disfraza de <code>Persona</code>, pero en realidad sus m\u00e9todos son los especializados (el <code>toString()</code> m\u00e1s moderno sobrescribe al de sus padres. Recuerda que la anotaci\u00f3n <code>@override</code> es opcional, y aunque no se indique el m\u00e9todo sigue sobrescribiendo al de su padre)</p> <p>Si por ejemplo usamos este fragmento:</p> <pre><code>//Persona\nPersona David = new Persona (\"David\");\nSystem.out.println(David);\n</code></pre> <p>Se imprimir\u00e1 con el m\u00e9todo <code>toString()</code> de la clase <code>Persona</code> (s\u00f3lo el nombre).</p> <p>Y si hacemos un casting del objeto David a uno m\u00e1s gen\u00e9rico (Object) seguir\u00e1 usando el m\u00e9todo m\u00e1s especializado:</p> <pre><code>//Object\nObject oDavid = David;\nSystem.out.println(oDavid);\n</code></pre>"},{"location":"UD05/UD05_ES.html#acceso-a-metodos-de-la-superclase","title":"Acceso a m\u00e9todos de la superclase","text":"<p>Para acceder a los m\u00e9todos de la superclase se utiliza la sentencia <code>super</code>. La sentencia <code>this</code> permite acceder a los campos y m\u00e9todos de la clase. La sentencia <code>super</code> permite acceder a los campos y m\u00e9todos de la superclase. El uso de <code>super</code> lo hemos visto en las clases <code>Empleado</code> y <code>Encargado</code> anteriores:</p> <pre><code>public class Persona {\n    private String nombre;\n\n    public Persona(String nombre){\n        this.nombre=nombre;\n    }\n}\n</code></pre> <pre><code>public class Empleado extends Persona {\n[...]    \n    public Empleado(String nombre, double sueldoBase) {\n        super(nombre);\n        this.sueldoBase = sueldoBase;\n    }\n[...]\n</code></pre> <pre><code>public class Encargado extends Empleado {\n[...]    \n    public Encargado(String nombre, double sueldoBase, String seccion) {\n        super(nombre, sueldoBase);\n        this.seccion = seccion;\n    }\n[...]\n</code></pre> <p>Podemos mostrar el nombre de la clase y el nombre de la clase de la que hereda con <code>getClass()</code> y <code>getSuperclass()</code>. Ejemplo:</p> <pre><code>package UD05;\n\npublic class Anexo4SuperClase {\n\n    public static void main(String[] args) {\n        Empleado empleadoCarniceria = new Empleado(\"Rosa Ramos\", 1200);\n        // Muestra los datos del Empleado\n        System.out.println(empleadoCarniceria instanceof Encargado); //false\n        System.out.println(empleadoCarniceria.getClass()); //class Empleado\n        System.out.println(empleadoCarniceria.getClass().getSuperclass()); //class Persona\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#empaquetado-de-clases","title":"Empaquetado de clases","text":"<p>La encapsulaci\u00f3n de la informaci\u00f3n dentro de las clases ha permitido llevar a cabo el proceso de ocultaci\u00f3n, que es fundamental para el trabajo con clases y objetos. Es posible que conforme vaya aumentando la complejidad de tus aplicaciones necesites que algunas de tus clases puedan tener acceso a parte de la implementaci\u00f3n de otras debido a las relaciones que se establezcan entre ellas a la hora de dise\u00f1ar tu modelo de datos. En estos casos se puede hablar de un nivel superior de encapsulamiento y ocultaci\u00f3n conocido como empaquetado.</p> <p>Un paquete consiste en un conjunto de clases relacionadas entre s\u00ed y agrupadas bajo un mismo nombre. Normalmente se encuentran en un mismo paquete todas aquellas clases que forman una biblioteca o que re\u00fanen alg\u00fan tipo de caracter\u00edstica en com\u00fan. Esto la organizaci\u00f3n de las clases para luego localizar f\u00e1cilmente aquellas que vayas necesitando.</p>"},{"location":"UD05/UD05_ES.html#jerarquia-de-paquetes","title":"Jerarqu\u00eda de paquetes.","text":"<p>Los paquetes en Java pueden organizarse jer\u00e1rquicamente de manera similar a lo que puedes encontrar en la estructura de carpetas en un dispositivo de almacenamiento, donde:</p> <ul> <li>Las clases ser\u00edan como los archivos.</li> <li>Cada paquete ser\u00eda como una carpeta que contiene archivos (clases).</li> <li>Cada paquete puede adem\u00e1s contener otros paquetes (como las carpetas que contienen carpetas).</li> <li>Para poder hacer referencia a una clase dentro de una estructura de paquetes, habr\u00e1 que indicar la trayectoria completa desde el paquete ra\u00edz de la jerarqu\u00eda hasta el paquete en el que se encuentra la clase, indicando por \u00faltimo el nombre de la clase (como el path absoluto de un archivo).</li> </ul> <p>La estructura de paquetes en Java permite organizar y clasificar las clases, evitando conflictos de nombres y facilitando la ubicaci\u00f3n de una clase dentro de una estructura jer\u00e1rquica.</p> <p>Por otro lado, la organizaci\u00f3n en paquetes permite tambi\u00e9n el control de acceso a miembros de las clases desde otras clases que est\u00e9n en el mismo paquete gracias a los modificadores de acceso (recuerda que uno de los modificadores que viste era precisamente el de paquete).</p> <p>Las clases que forman parte de la jerarqu\u00eda de clases de Java se encuentran organizadas en diversos paquetes.</p> <p>Todas las clases proporcionadas por Java en sus bibliotecas son miembros de distintos paquetes y se encuentran organizadas jer\u00e1rquicamente. Dentro de cada paquete habr\u00e1 un conjunto de clases con alg\u00fan tipo de relaci\u00f3n entre ellas. Se dice que todo ese conjunto de paquetes forman la API de Java. Por ejemplo las clases b\u00e1sicas del lenguaje se encuentran en el paquete <code>java.lang</code>, las clases de entrada/salida las podr\u00e1s encontrar en el paquete <code>java.io</code> y en el paquete <code>java.math</code> podr\u00e1s observar algunas clases para trabajar con n\u00fameros grandes y de gran precisi\u00f3n.</p>"},{"location":"UD05/UD05_ES.html#utilizacion-de-los-paquetes","title":"Utilizaci\u00f3n de los paquetes.","text":"<p>Es posible acceder a cualquier clase de cualquier paquete (siempre que ese paquete est\u00e9 disponible en nuestro sistema, obviamente) mediante la calificaci\u00f3n completa de la clase dentro de la estructura jer\u00e1rquica de paquete. Es decir indicando la trayectoria completa de paquetes desde el paquete ra\u00edz hasta la propia clase. Eso se puede hacer utilizando el operador punto (<code>.</code>) para especificar cada subpaquete:</p> <pre><code>paquete_raiz.subpaquete1.subpaquete2. ... .subpaquete_n.NombreClase\n</code></pre> <p>Por ejemplo: </p> <pre><code>java.lang.String\n</code></pre> <p>En este caso se est\u00e1 haciendo referencia a la clase <code>String</code> que se encuentra dentro del paquete <code>java.lang</code>. Este paquete contiene las clases elementales para poder desarrollar una aplicaci\u00f3n Java.</p> <p>Otro ejemplo podr\u00eda ser: </p> <pre><code>java.util.regex.Patern\n</code></pre> <p>En este otro caso se hace referencia a la clase <code>Patern</code> ubicada en el paquete <code>java.util.regex</code>, que contiene clases para trabajar con expresiones regulares.</p> <p>Dado que puede resultar bastante tedioso tener que escribir la trayectoria completa de una clase cada vez que se quiera utilizar, existe la posibilidad de indicar que se desea trabajar con las clases de uno o varios paquetes. De esa manera cuando se vaya a utilizar una clase que pertenezca a uno de esos paquetes no ser\u00e1 necesario indicar toda su trayectoria. Para ello se utiliza la sentencia <code>import</code> (importar):</p> <pre><code>import paquete_raiz.subpaquete1.subpaquete2. ... .subpaquete_n.NombreClase;\n</code></pre> <p>De esta manera a partir de ese momento podr\u00e1 utilizarse directamente <code>NombreClase</code> en lugar de toda su trayectoria completa.</p> <p>Los ejemplos anteriores quedar\u00edan entonces:</p> <pre><code>import java.lang.String;\nimport java.util.regex.Patern;\n</code></pre> <p>Si suponemos que vamos a utilizar varias clases de un mismo paquete, en lugar de hacer un <code>import</code> de cada una de ellas, podemos utilizar el comod\u00edn (s\u00edmbolo asterisco: <code>*</code>) para indicar que queremos importar todas las clases de ese paquete y no s\u00f3lo una determinada:</p> <pre><code>import java.lang.*;\nimport java.util.regex.*;\n</code></pre> <p>Si un paquete contiene subpaquetes, el comod\u00edn no importar\u00e1 las clases de los subpaquetes, tan solo las que haya en el paquete. La importaci\u00f3n de las clases contenidas en los subpaquetes habr\u00e1 que indicarla expl\u00edcitamente. Por ejemplo:</p> <pre><code>import java.util.*;\nimport java.util.regex.*;\n</code></pre> <p>En este caso se importar\u00e1n todas las clases del paquete <code>java.util</code> (clases <code>Date</code>, <code>Calendar</code>, <code>Timer</code>, etc.) y de su subpaquete <code>java.util.regex</code> (<code>Matcher</code> y <code>Pattern</code>), pero no las de otros subpaquetes como <code>java.util.concurrent</code> o <code>java.util.jar</code>. Por \u00faltimo tan solo indicar que en el caso del paquete <code>java.lang</code>, no es necesario realizar importaci\u00f3n. El compilador, dada la importancia de este paquete, permite el uso de sus clases sin necesidad de indicar su trayectoria (es como si todo archivo Java incluyera en su primera l\u00ednea la sentencia <code>import java.lang.*</code>).</p>"},{"location":"UD05/UD05_ES.html#inclusion-de-una-clase-en-un-paquete","title":"Inclusi\u00f3n de una clase en un paquete.","text":"<p>Al principio de cada archivo <code>.java</code> se puede indicar a qu\u00e9 paquete pertenece mediante la palabra reservada <code>package</code> seguida del nombre del paquete:</p> <p></p><pre><code>package nombre_paquete;\n</code></pre> Por ejemplo: <pre><code>package paqueteEjemplo;\nclass claseEjemplo {\n    ...\n}\n</code></pre> <p>La sentencia <code>package</code> debe ser incluida en cada archivo fuente de cada clase que quieras incluir ese paquete. Si en un archivo fuente hay definidas m\u00e1s de una clase, todas esas clases formar\u00e1n parte del paquete indicado en la sentencia <code>package</code>.</p> <p>Si al comienzo de un archivo Java no se incluyen ninguna sentencia <code>package</code>, el compilador considerar\u00e1 que las clases de ese archivo formar\u00e1n parte del paquete por omisi\u00f3n (un paquete sin nombre asociado al proyecto).</p> <p>Para evitar la ambig\u00fcedad, dentro de un mismo paquete no puede haber dos clases con el mismo nombre, aunque s\u00ed pueden existir clases con el mismo nombre si est\u00e1n en paquetes diferentes. El compilador ser\u00e1 capaz de distinguir una clase de otra gracias a que pertenecen a paquetes distintos.</p> <p>Como ya has visto en unidades anteriores, el nombre de un archivo fuente en Java se construye utilizando el nombre de la clase p\u00fablica que contiene junto con la extensi\u00f3n <code>.java</code>, pudiendo haber \u00fanicamente una clase p\u00fablica por cada archivo fuente. El nombre de la clase deb\u00eda coincidir (en may\u00fasculas y min\u00fasculas) exactamente con el nombre del archivo en el que se encontraba definida.</p> <p>As\u00ed, si por ejemplo ten\u00edas una clase <code>Punto</code> dentro de un archivo <code>Punto.java</code>, la compilaci\u00f3n dar\u00eda lugar a un archivo <code>Punto.class</code>.</p> <p>En el caso de los paquetes, la correspondencia es a nivel de directorios o carpetas. Es decir, si la clase <code>Punto</code> se encuentra dentro del paquete <code>prog.figuras</code>, el archivo <code>Punto.java</code> deber\u00eda encontrarse en la carpeta <code>prog\\figuras</code>. Para que esto funcione correctamente el compilador ha de ser capaz de localizar todos los paquetes (tanto los est\u00e1ndar de Java como los definidos por otros programadores). Es decir, que el compilador debe tener conocimiento de d\u00f3nde comienza la estructura de carpetas definida por los paquetes y en la cual se encuentran las clases. Para ello se utiliza el ClassPath cuyo funcionamiento habr\u00e1s estudiado en las primeras unidades de este m\u00f3dulo. Se trata de una variable de entorno que contiene todas las rutas en las que comienzan las estructuras de directorios (distintas jerarqu\u00edas posibles de paquetes) en las que est\u00e1n contenidas las clases.</p>"},{"location":"UD05/UD05_ES.html#proceso-de-creacion-de-un-paquete","title":"Proceso de creaci\u00f3n de un paquete.","text":"<p>Para crear un paquete en Java te recomendamos seguir los siguientes pasos:</p> <ol> <li>Poner un nombre al paquete. Suele ser habitual utilizar el dominio de Internet de la empresa que ha creado el paquete. Por ejemplo, para el caso de <code>miempresa.com</code>, podr\u00eda utilizarse un nombre de paquete <code>com.miempresa</code>.</li> <li>Crear una estructura jer\u00e1rquica de carpetas equivalente a la estructura de subpaquetes. La ruta de la ra\u00edz de esa estructura jer\u00e1rquica deber\u00e1 estar especificada en el ClassPath de Java.</li> <li>Especificar a qu\u00e9 paquete pertenecen la clase (o clases) del archivo <code>.java</code> mediante el uso de la sentencia package tal y como has visto en el apartado anterior.</li> </ol> <p>Este proceso ya lo has debido de llevar a cabo en unidades anteriores al compilar y ejecutar clases con paquetes. Estos pasos simplemente son para que te sirvan como recordatorio del procedimiento que debes seguir a ala hora de clasificar, jerarquizar y utilizar tus propias clases.</p>"},{"location":"UD05/UD05_ES.html#ejercicios-resueltos","title":"Ejercicios resueltos","text":""},{"location":"UD05/UD05_ES.html#modificadores-de-acceso","title":"Modificadores de acceso","text":"<p>Imagina que quieres escribir una clase que represente un rect\u00e1ngulo en el plano. Para ello has pensado en los siguientes atributos:</p> <ul> <li>Atributos <code>x1</code>, <code>y1</code>, que representan la coordenadas del v\u00e9rtice inferior izquierdo del rect\u00e1ngulo. Ambos de tipo <code>double</code> (n\u00fameros reales).</li> <li>Atributos <code>x2</code>, <code>y2</code>, que representan las coordenadas del v\u00e9rtice superior derecho del rect\u00e1ngulo. Tambi\u00e9n de tipo <code>double</code> (n\u00fameros reales).</li> </ul> <p>Con estos dos puntos (<code>x1</code>, <code>y1</code>) y (<code>x2</code>, <code>y2</code>) se puede definir perfectamente la ubicaci\u00f3n de un rect\u00e1ngulo en el plano.</p> <p>Escribe una clase que contenga todos esos atributos teniendo en cuenta que queremos que sea una clase visible desde cualquier parte del programa y que sus atributos sean tambi\u00e9n accesibles desde cualquier parte del c\u00f3digo.</p> <p>Respuesta: Dado que se trata de una clase que podr\u00e1 usarse desde cualquier parte del programa, utilizaremos el modificador de acceso <code>public</code> para la clase:</p> <pre><code>public class Rectangulo\n</code></pre> <p>Los cuatro atributos que necesitamos tambi\u00e9n han de ser visibles desde cualquier parte, as\u00ed que tambi\u00e9n se utilizar\u00e1 el modificador de acceso <code>public</code> para los atributos:</p> <pre><code>public double x1, y1; // V\u00e9rtice inferior izquierdo\npublic double x2, y2; // V\u00e9rtice superior derecho\n</code></pre> <p>De esta manera la clase completa quedar\u00eda:</p> <pre><code>public class Rectangulo {\n    public double x1, y1; // V\u00e9rtice inferior izquierdo\n    public double x2, y2; // V\u00e9rtice superior derecho\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#atributos-estaticos_1","title":"Atributos est\u00e1ticos","text":"<p>Ampliar el ejercicio anterior del rect\u00e1ngulo incluyendo los siguientes atributos:</p> <ul> <li>Atributo <code>numRectangulos</code>, que almacena el n\u00famero de objetos de tipo rect\u00e1ngulo creados hasta el momento.</li> <li>Atributo <code>nombre</code>, que almacena el nombre que se le quiera dar a cada rect\u00e1ngulo.</li> <li>Atributo <code>nombreFigura</code>, que almacena el nombre de la clase, es decir, \"Rect\u00e1ngulo\".</li> <li>Atributo <code>PI</code>, que contiene el nombre de la constante <code>PI</code> con una precisi\u00f3n de cuatro cifras decimales.</li> </ul> <p>No se desea que los atributos <code>nombre</code> y <code>numRectangulos</code> puedan ser visibles desde fuera de la clase. Y adem\u00e1s se desea que la clase sea accesible solamente desde su propio paquete.</p> <p>Respuesta: Los atributos <code>numRectangulos</code>, <code>nombreFigura</code> y <code>PI</code> podr\u00edan ser est\u00e1ticos pues se trata de valores m\u00e1s asociados a la propia clase que a cada uno de los objetos que se puedan ir creando. Adem\u00e1s, en el caso de <code>PI</code> y <code>nombreFigura</code>, tambi\u00e9n podr\u00eda ser un atributo <code>final</code>, pues se trata de valores \u00fanicos y constantes (3.1416 en el caso de <code>PI</code> y \"Rect\u00e1ngulo\" en el caso de <code>nombreFigura</code>).</p> <p>Dado que no se desea que se tenga accesibilidad a los atributos nombre y <code>numRectangulos</code> desde fuera de la clase podr\u00eda utilizarse el atributo <code>private</code> para cada uno de ellos.</p> <p>Por \u00faltimo hay que tener en cuenta que se desea que la clase s\u00f3lo sea accesible desde el interior del paquete al que pertenece, por tanto habr\u00e1 que utilizar el modificador por omisi\u00f3n o de paquete. Esto es, no incluir ning\u00fan modificador de acceso en la cabecera de la clase.</p> <p>Teniendo en cuenta todo lo anterior la clase podr\u00eda quedar finalmente as\u00ed:</p> <pre><code>class Rectangulo { // Sin modificador \"public\" para que s\u00f3lo sea accesible desde el paquete\n    // Atributos de clase\n    private static int numRectangulos; // N\u00famero total de rect\u00e1ngulos creados\n    public static final String NOMBREFIGURA = \"Rect\u00e1ngulo\"; // Nombre de la clase\n    public static final double PI = 3.1416; // Constante PI\n\n    // Atributos de objeto\n    private String nombre; // Nombre del rect\u00e1ngulo\n    public double x1, y1; // V\u00e9rtice inferior izquierdo\n    public double x2, y2; // V\u00e9rtice superior derecho\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#cuerpo-de-un-metodo_1","title":"Cuerpo de un m\u00e9todo","text":"<p>Vamos a seguir ampliando la clase en la que se representa un rect\u00e1ngulo en el plano (clase <code>Rectangulo</code>). Para ello has pensado en los siguientes m\u00e9todos p\u00fablicos:</p> <ul> <li>M\u00e9todos <code>getNombre</code> y <code>setNombre</code>, que permiten el acceso y modificaci\u00f3n del atributo nombre del rect\u00e1ngulo.</li> <li>M\u00e9todo <code>calcularSuperfice</code>, que calcula el \u00e1rea encerrada por el rect\u00e1ngulo.</li> <li>M\u00e9todo <code>calcularPer\u00edmetro</code>, que calcula la longitud del per\u00edmetro del rect\u00e1ngulo.</li> <li>M\u00e9todo <code>desplazar</code>, que mueve la ubicaci\u00f3n del rect\u00e1ngulo en el plano en una cantidad <code>X</code> (para el <code>ejeX</code>) y otra cantidad <code>Y</code> (para el eje <code>Y</code>). Se trata simplemente de sumar el desplazamiento <code>X</code> a las coordenadas <code>x1</code> y <code>x2</code>, y el desplazamiento <code>Y</code> a las coordenadas <code>y1</code> e <code>y2</code>. Los par\u00e1metros de entrada de este m\u00e9todo ser\u00e1n por tanto <code>X</code> e <code>Y</code>, de tipo <code>double</code>.</li> <li>M\u00e9todo <code>obtenerNumRectangulos</code>, que devuelve el n\u00famero de rect\u00e1ngulos creados hasta el momento.</li> </ul> <p>Incluye la implementaci\u00f3n de cada uno de esos m\u00e9todos en la clase <code>Rectangulo</code>.</p> <p>Respuesta: En el caso del m\u00e9todo <code>obtenerNombre()</code>, se trata simplemente de devolver el valor del atributo nombre:</p> <pre><code>public String obtenerNombre () {\n    return nombre;\n}\n</code></pre> <p>Para el implementar el m\u00e9todo <code>establecerNombre</code> tambi\u00e9n es muy sencillo. Se trata de modificar el contenido del atributo nombre por el valor proporcionado a trav\u00e9s de un par\u00e1metro de entrada: </p> <pre><code>public void establecerNombre (String nom) {\n    nombre = nom;\n}\n</code></pre> <p>Los m\u00e9todos de c\u00e1lculo de <code>superficie</code> y <code>per\u00edmetro</code> no van a recibir ning\u00fan par\u00e1metro de entrada, tan solo deben realizar c\u00e1lculos a partir de los atributos contenidos en el objeto para obtener los resultados perseguidos. Encada caso habr\u00e1 que aplicar la expresi\u00f3n matem\u00e1tica apropiada:</p> <ul> <li>En el caso de la <code>superficie</code>, habr\u00e1 que calcular la longitud de la base y la altura del rect\u00e1ngulo a partir de las coordenadas de las esquinas inferior izquierda (<code>x1</code>, <code>y1</code>) y superior derecha (<code>x2</code>, <code>y2</code>) de la figura. La base ser\u00eda la diferencia entre <code>x2</code> y <code>x1</code>, y la altura la diferencia entre <code>y2</code> e <code>y1</code>. A continuaci\u00f3n tan solo tendr\u00edas que utilizar la consabida f\u00f3rmula de \"base por altura\", es decir, una multiplicaci\u00f3n.</li> <li>En el caso del <code>per\u00edmetro</code> habr\u00e1 tambi\u00e9n que calcular la longitud de la base y de la altura del rect\u00e1ngulo y a continuaci\u00f3n sumar dos veces la longitud de la base y dos veces la longitud de la altura.</li> </ul> <p>En ambos casos el resultado final tendr\u00e1 que ser devuelto a trav\u00e9s de la sentencia <code>return</code>. Tambi\u00e9n es aconsejable en ambos casos la utilizaci\u00f3n de variables locales para almacenar los c\u00e1lculos intermedios (como la base o la altura).</p> <pre><code>public double calcularSuperficie () {\n    double area, base, altura; // Variables locales\n    // C\u00e1lculo de la base\n    base = x2-x1;\n    // C\u00e1lculo de la altura\n    altura = y2-y1;\n    // C\u00e1lculo del \u00e1rea\n    area = base * altura;\n    // Devoluci\u00f3n del valor de retorno\n    return area;\n}\n\npublic double calcularPerimetro () {\n    double perimetro, base, altura; // Variables locales\n    // C\u00e1lculo de la base\n    base = x2-x1;\n    // C\u00e1lculo de la altura\n    altura = y2-y1;\n    // C\u00e1lculo del per\u00edmetro\n    perimetro = 2*base + 2*altura;\n    // Devoluci\u00f3n del valor de retorno\n    return perimetro;\n}\n</code></pre> <p>En el caso del m\u00e9todo <code>desplazar()</code>, se trata de modificar:</p> <ul> <li>Los contenidos de los atributos <code>x1</code> y <code>x2</code> sum\u00e1ndoles el par\u00e1metro <code>X</code>,</li> <li>Los contenidos de los atributos <code>y1</code> e <code>y2</code> sum\u00e1ndoles el par\u00e1metro <code>Y</code>.</li> </ul> <pre><code>public void desplazar (double X, double Y) {\n    // Desplazamiento en el eje X\n    x1 = x1 + X;\n    x2 = x2 + X;\n    // Desplazamiento en el eje X\n    y1 = y1 + Y;\n    y2 = y2 + Y;\n}\n</code></pre> <p>En este caso no se devuelve ning\u00fan valor (tipo devuelto vac\u00edo: <code>void</code>).</p> <p>Por \u00faltimo, el m\u00e9todo <code>obtenerNumRectangulos</code> simplemente debe devolver el valor del atributo <code>numRectangulos</code>. En este caso es razonable plantearse que este m\u00e9todo podr\u00eda ser m\u00e1s bien un m\u00e9todo de clase (est\u00e1tico) m\u00e1s que un m\u00e9todo de objeto, pues en realidad es una caracter\u00edstica de la clase m\u00e1s que alg\u00fan objeto en particular. Para ello tan solo tendr\u00edas que utilizar el modificador de acceso <code>static</code>:</p> <pre><code>public static int obtenerNumRectangulos () {\n    return numRectangulos;\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#declaracion-de-un-objeto_1","title":"Declaraci\u00f3n de un objeto","text":"<p>Utilizando la clase <code>Rectangulo</code> implementada en ejercicios anteriores, indica como declarar\u00edas tres objetos (variables) de esa clase llamados <code>r1</code>, <code>r2</code>, <code>r3</code>.</p> <p>Respuesta Se trata simplemente de realizar una declaraci\u00f3n de esas tres variables:</p> <pre><code>Rectangulo r1;\nRectangulo r2:\nRectangulo r3:\n</code></pre> <p>Tambi\u00e9n podr\u00edas haber declarado los tres objetos en la misma sentencia de declaraci\u00f3n:</p> <pre><code>Rectangulo r1, r2, r3;\n</code></pre>"},{"location":"UD05/UD05_ES.html#creacion-de-un-objeto_1","title":"Creaci\u00f3n de un objeto","text":"<p>Ampliar el ejercicio anterior instanciando los objetos <code>r1</code>, <code>r2</code>, <code>r3</code> mediante el constructor por defecto.</p> <p>Respuesta Habr\u00eda que a\u00f1adir simplemente una sentencia de creaci\u00f3n o instanciaci\u00f3n (llamada al constructor mediante el operador <code>new</code>) por cada objeto que se desee crear:</p> <pre><code>Rectangulo r1, r2, r3;\nr1= new Rectangulo();\nr2= new Rectangulo();\nr3= new Rectangulo();\n</code></pre>"},{"location":"UD05/UD05_ES.html#manipulacion-de-un-objeto","title":"Manipulaci\u00f3n de un objeto","text":"<p>Utilizar el ejemplo de los rect\u00e1ngulos para crear un rect\u00e1ngulo <code>r1</code>, asignarle los valores <code>x1</code>=0, <code>y1</code>=0, <code>x2</code>=10, <code>y2</code>=10, calcular su \u00e1rea y su per\u00edmetro y mostrarlos en pantalla.</p> <p>Respuesta Se trata de declarar e instanciar el objeto <code>r1</code>, rellenar sus atributos de ubicaci\u00f3n (coordenadas de las esquinas), e invocar a los m\u00e9todos <code>calcularSuperficie()</code> y <code>calcularPerimetro()</code> utilizando el operador punto (<code>.</code>). </p> <p>Por ejemplo:</p> <pre><code>Rectangulo r1= new Rectangulo ();\nr1.x1= 0;\nr1.y1= 0;\nr1.x2= 10;\nr1.y2= 10;\narea= r1.calcularSuperficie ();\nper\u00edmetro= r1.calcularPerimetro ();\n</code></pre> <p>Por \u00faltimo faltar\u00eda mostrar en pantalla la informaci\u00f3n calculada, podemos a\u00f1adir esta y m\u00e1s pruebas en un m\u00e9todo <code>main</code> de la propia clase, o en el <code>main</code> de otra clase del mismo paquete, como prefieras.</p>"},{"location":"UD05/UD05_ES.html#utilizacion-de-constructores_1","title":"Utilizaci\u00f3n de constructores","text":"<p>Vamos a ampliar el ejemplo anterior creando una clase <code>RectanguloV2</code>, ampliando sus funcionalidades a\u00f1adi\u00e9ndole tres constructores:</p> <ol> <li>Un constructor sin par\u00e1metros (para sustituir al constructor por defecto) que haga que los valores iniciales de las esquinas del rect\u00e1ngulo sean (0,0) y (1,1);</li> <li>Un constructor con cuatro par\u00e1metros, <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code>, que rellene los valores iniciales de los atributos del rect\u00e1ngulo con los valores proporcionados a trav\u00e9s de los par\u00e1metros.</li> <li>Un constructor con dos par\u00e1metros, base y altura, que cree un rect\u00e1ngulo donde el v\u00e9rtice inferior izquierdo est\u00e9 ubicado en la posici\u00f3n (0,0) y que tenga una base y una altura tal y como indican los dos par\u00e1metros proporcionados.</li> </ol> <p>Respuesta En el caso del primer constructor lo \u00fanico que hay que hacer es \"rellenar\" los atributos <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code> con los valores 0, 0, 1, 1:</p> <pre><code>public Rectangulov2 (){\n    x1= 0.0;\n    y1= 0.0;\n    x2= 1.0;\n    y2= 1.0;\n}\n</code></pre> <p>Para el segundo constructor es suficiente con asignar a los atributos <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code> los valores de los par\u00e1metros <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code>. Tan solo hay que tener en cuenta que al tener los mismos nombres los par\u00e1metros del m\u00e9todo que los atributos de la clase, estos \u00faltimos son ocultados por los primeros y para poder tener acceso a ellos tendr\u00e1s que utilizar el operador de autorrerferencia <code>this</code>:</p> <pre><code>public Rectangulov2 (double x1, double y1, double x2, double y2){\n    this.x1= x1;\n    this.y1= y1;\n    this.x2= x2;\n    this.y2= y2;\n}\n</code></pre> <p>En el caso del tercer constructor tendr\u00e1s que inicializar el v\u00e9rtice (<code>x1</code>, <code>y1</code>) a (0,0) y el v\u00e9rtice (<code>x2</code>, <code>y2</code>) a (0 + base, 0 + altura), es decir a (base, altura):</p> <pre><code>public Rectangulov2 (double base, double altura) {\n    this.x1= 0.0;\n    this.y1= 0.0;\n    this.x2= base;\n    this.y2= altura;\n}\n</code></pre> <p>Queda propuesto como ejercicio de ampliaci\u00f3n la modificaci\u00f3n de la clase <code>Rectangulo</code>, y ampliar el m\u00e9todo <code>main</code> para usar las nuevas funcionalidades.</p>"},{"location":"UD05/UD05_ES.html#referencia-this","title":"Referencia <code>this</code>","text":"<p>A\u00f1adir un m\u00e9todo <code>obtenerNombrev2</code> de la clase <code>Rectangulov2</code> de ejercicios anteriores utilizando la referencia <code>this</code>.</p> <p>Respuesta: Si utilizamos la referencia <code>this</code> en este m\u00e9todo, entonces podremos utilizar como identificador del par\u00e1metro el mismo identificador que tiene el atributo (aunque no tiene porqu\u00e9 hacerse si no se desea):</p> <pre><code>public void establecerNombrev2 (String nombre) {\n    this.nombre = nombre;\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#constructores-de-copia_1","title":"Constructores de copia","text":"<p>A\u00f1adir un constructor de copia al ejercicio de la clase <code>Rectangulov2</code> usando referencias <code>this</code>.</p> <p>Respuesta Se trata de a\u00f1adir un nuevo constructor adem\u00e1s de los tres que ya hab\u00edamos creado:</p> <pre><code>// Constructor copia\npublic Rectangulov2 (Rectangulov2 r) {\n    this.x1= r.x1;\n    this.y1= r.y1;\n    this.x2= r.x2;\n    this.y2= r.y2;\n}\n</code></pre> <p>Para usar este constructor basta con haber creado anteriormente otro <code>Rectangulo</code> para utilizarlo como base de la copia. Por ejemplo:</p> <pre><code>Rectangulo r1, r2;\nr1= new Rectangulo (0,0,2,2);\nr2= new Rectangulo (r1);\n</code></pre>"},{"location":"UD05/UD05_ES.html#ocultacion-de-metodos_1","title":"Ocultaci\u00f3n de m\u00e9todos","text":"<p>Vamos a intentar implementar una clase <code>DNI</code> que incluya todo lo que has visto hasta ahora. Se desea crear una clase que represente un DNI espa\u00f1ol y que tenga las siguientes caracter\u00edsticas:</p> <ul> <li> <p>La clase almacenar\u00e1 el n\u00famero de <code>DNI</code> en un <code>int</code>, sin guardar la letra, pues se puede calcular a partir del n\u00famero. Este atributo ser\u00e1 privado a la clase. Formato del atributo: <code>private int numDNI</code>.</p> </li> <li> <p>Para acceder al <code>DNI</code> se dispondr\u00e1 de dos m\u00e9todos obtener (<code>get</code>), uno que proporcionar\u00e1 el n\u00famero de <code>DNI</code> (s\u00f3lo las cifras num\u00e9ricas) y otro que devolver\u00e1 el <code>NIF</code> completo (incluida la letra).</p> </li> </ul> <p>El formato del m\u00e9todo ser\u00e1:</p> <ul> <li> <p><code>java     public int obtenerDNI()</code></p> </li> <li> <p><code>java     public String obtenerNIF()</code></p> </li> <li> <p>Para modificar el <code>DNI</code> se dispondr\u00e1 de dos m\u00e9todos establecer (<code>set</code>), que permitir\u00e1n modificar el <code>DNI</code>. Uno en el que habr\u00e1 que proporcionar el <code>NIF</code> completo (n\u00famero y letra). Y otro en el que \u00fanicamente ser\u00e1 necesario proporcionar el <code>DNI</code> (las siete u ocho cifras). Si el <code>DNI</code>/<code>NIF</code> es incorrecto se deber\u00eda lanzar alg\u00fan tipo de excepci\u00f3n. El formato de los m\u00e9todos (sobrecargados) ser\u00e1:</p> </li> <li> <p><code>java     public void establecer (String nif) throws ...</code></p> </li> <li> <p><code>java     public void establecer (int dni) throws ...</code></p> </li> <li> <p>La clase dispondr\u00e1 de algunos m\u00e9todos internos privados para calcular la letra de un n\u00famero de <code>DNI</code> cualquiera, para comprobar si un <code>DNI</code> con su letra es v\u00e1lido, para extraer la letra de un <code>NIF</code>, etc. Aquellos m\u00e9todos que no utilicen ninguna variable de objeto podr\u00edan declararse como est\u00e1ticos (pertenecientes a la clase). Formato de los m\u00e9todos:</p> </li> <li> <p><code>java     private static char calcularLetraNIF (int dni)</code></p> </li> <li> <p><code>java     private boolean validarNIF (String nif)</code></p> </li> <li> <p><code>java     private static char extraerLetraNIF (String nif)</code></p> </li> <li> <p><code>java     private static int extraerNumeroNIF (String nif)</code></p> </li> </ul> <p>Para calcular la letra <code>NIF</code> correspondiente a un n\u00famero de <code>DNI</code> puedes consultar el art\u00edculo sobre el <code>NIF</code> de la Wikipedia</p> <p>Respuesta:</p> <p>Int\u00e9ntalo por tu cuenta y cuando te quedes atascado tienes la soluci\u00f3n en el apartado Clase DNI</p>"},{"location":"UD05/UD05_ES.html#ejemplo-ud05","title":"Ejemplo UD05","text":""},{"location":"UD05/UD05_ES.html#clase-rectangulo","title":"Clase <code>Rectangulo</code>","text":"<pre><code>package UD05;\n\nclass Rectangulo {\n\n    // Atributos de clase\n    private static int numRectangulos; // N\u00famero total de rectangulos creados\n    public static final String NOMBREFIGURA = \"Rect\u00e1ngulo\"; // Nombre de la clase\n    public static final double PI = 3.1416; // Constante PI            \n\n    // Atributos de objeto\n    private String nombre;// Nombre del rect\u00e1ngulo\n    public double x1, y1;// V\u00e9rtice inferior izquierdo\n    public double x2, y2;// V\u00e9rtice superior derecho\n\n    // M\u00e9todo obtenerNombre\n    public String obtenerNombre() {\n        return nombre;\n    }\n\n    // M\u00e9todo establecerNombre\n    public void establecerNombre(String nom) {\n        nombre = nom;\n    }\n\n    // M\u00e9todo CalcularSuperficie\n    public double CalcularSuperficie() {\n        double area, base, altura;\n        // C\u00e1lculo de la base\n        base = x2 - x1;\n        // C\u00e1lculo de la altura\n        altura = y2 - y1;\n        // C\u00e1lculo del \u00e1rea\n        area = base * altura;\n        // Devoluci\u00f3n del valor de retorno\n        return area;\n    }\n\n    // M\u00e9todo CalcularPerimetro\n    public double CalcularPerimetro() {\n        double perimetro, base, altura;\n        // C\u00e1lculo de la base\n        base = x2 - x1;\n        // C\u00e1lculo de la altura\n        altura = y2 - y1;\n        // C\u00e1lculo del per\u00edmetro\n        perimetro = 2 * base + 2 * altura;\n        // Devoluci\u00f3n del valor de retorno\n        return perimetro;\n    }\n\n    // M\u00e9todo desplazar\n    public void desplazar(double X, double Y) {\n        // Desplazamiento en el eje X\n        x1 = x1 + X;\n        x2 = x2 + X;\n        // Desplazamiento en el eje X\n        y1 = y1 + Y;\n        y2 = y2 + Y;\n    }\n\n    // M\u00e9todo obtenerNumRectangulos\n    public static int obtenerNumRectangulos() {\n        return numRectangulos;\n    }\n\n    public static void main(String[] args) {\n        Rectangulo r1, r2;\n        r1 = new Rectangulo();\n        r2 = new Rectangulo();\n        r1.x1 = 0;\n        r1.y1 = 0;\n        r1.x2 = 10;\n        r1.y2 = 10;\n        r1.establecerNombre(\"rectangulo1\");\n        System.out.printf(\"PRUEBA DE USO DE LA CLASE \" + Rectangulo.NOMBREFIGURA + \"\\n\");\n        System.out.printf(\"------------------------------------\\n\\n\");\n        System.out.printf(\"r1.x1: %4.2f\\nr1.y1: %4.2f\\n\", r1.x1, r1.y1);\n        System.out.printf(\"r1.x2: %4.2f\\nr1.y2: %4.2f\\n\", r1.x2, r1.y2);\n        System.out.printf(\"Perimetro: %4.2f\\nSuperficie: % 4.2f\\n\",\n                r1.CalcularPerimetro(), r1.CalcularSuperficie());\n        System.out.printf(\"Desplazamos X=3, Y=3\\n\");\n        r1.desplazar(-3, 3);\n        System.out.printf(\"r1.x1: %4.2f\\nr1.y1: %4.2f\\n\", r1.x1, r1.y1);\n        System.out.printf(\"r1.x2: %4.2f\\nr1.y2: %4.2f\\n\", r1.x2, r1.y2);\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#clase-rectangulov2","title":"Clase <code>Rectangulov2</code>","text":"<pre><code>package UD05;\n\nclass Rectangulov2 {\n\n    // Atributos de clase\n    private static int numRectangulos; // N\u00famero total de rectangulos creados\n    public static final String NOMBREFIGURA = \"Rect\u00e1ngulov2\"; // Nombre de la clase\n    public static final double PI = 3.1416; // Constante PI            \n\n    // Atributos de objeto\n    private String nombre;// Nombre del rect\u00e1ngulo\n    public double x1, y1;// V\u00e9rtice inferior izquierdo\n    public double x2, y2;// V\u00e9rtice superior derecho\n\n    // M\u00e9todo obtenerNombre\n    public String obtenerNombre() {\n        return nombre;\n    }\n\n    // M\u00e9todo establecerNombre\n    public void establecerNombre(String nom) {\n        nombre = nom;\n    }\n\n    // M\u00e9todo CalcularSuperficie\n    public double CalcularSuperficie() {\n        double area, base, altura;\n        // C\u00e1lculo de la base\n        base = x2 - x1;\n        // C\u00e1lculo de la altura\n        altura = y2 - y1;\n        // C\u00e1lculo del \u00e1rea\n        area = base * altura;\n        // Devoluci\u00f3n del valor de retorno\n        return area;\n    }\n\n    // M\u00e9todo CalcularPerimetro\n    public double CalcularPerimetro() {\n        double perimetro, base, altura;\n        // C\u00e1lculo de la base\n        base = x2 - x1;\n        // C\u00e1lculo de la altura\n        altura = y2 - y1;\n        // C\u00e1lculo del per\u00edmetro\n        perimetro = 2 * base + 2 * altura;\n        // Devoluci\u00f3n del valor de retorno\n        return perimetro;\n    }\n\n    // M\u00e9todo desplazar\n    public void desplazar(double X, double Y) {\n        // Desplazamiento en el eje X\n        x1 = x1 + X;\n        x2 = x2 + X;\n        // Desplazamiento en el eje X\n        y1 = y1 + Y;\n        y2 = y2 + Y;\n    }\n\n    // M\u00e9todo obtenerNumRectangulos\n    public static int obtenerNumRectangulos() {\n        return numRectangulos;\n    }\n\n    //Constructor por defecto\n    public Rectangulov2() {\n        x1 = 0.0;\n        y1 = 0.0;\n        x2 = 1.0;\n        y2 = 1.0;\n        numRectangulos++;\n    }\n\n    //constructor con los 4 vertices\n    public Rectangulov2(double x1, double y1, double x2, double y2) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n        numRectangulos++;\n    }\n</code></pre> <pre><code>    //constructor con base y altura\n    public Rectangulov2(double base, double altura) {\n        this.x1 = 0.0;\n        this.y1 = 0.0;\n        this.x2 = base;\n        this.y2 = altura;\n        numRectangulos++;\n    }\n\n    //referencia this\n    public void establecerNombrev2(String nombre) {\n        this.nombre = nombre;\n    }\n\n    // Constructor copia\n    public Rectangulov2(Rectangulov2 r) {\n        this.nombre=r.nombre;//supongo que tambi\u00e9n quiero copiar el nombre\n        this.x1 = r.x1;\n        this.y1 = r.y1;\n        this.x2 = r.x2;\n        this.y2 = r.y2;\n        numRectangulos++;\n    }\n\n    public static void main(String[] args) {\n        Rectangulov2 r1;\n        Rectangulov2 r2;\n        Rectangulov2 r3;\n        r1 = new Rectangulov2();\n        r2 = new Rectangulov2(4, 4, 8, 8);\n        r3 = new Rectangulov2(5, 5);\n        r1.establecerNombrev2(\"defecto\");\n        r2.establecerNombrev2(\"4 vertices\");\n        r3.establecerNombrev2(\"base y altura\");\n\n        System.out.printf(\"PRUEBA DE USO DE LA CLASE \" + Rectangulov2.NOMBREFIGURA + \"\\n\");\n        System.out.printf(\"------------------------------------\\n\\n\");\n        System.out.printf(\"r1.x1: %4.2f\\nr1.y1: %4.2f\\n\", r1.x1, r1.y1);\n        System.out.printf(\"r1.x2: %4.2f\\nr1.y2: %4.2f\\n\", r1.x2, r1.y2);\n\n        //Usamos el constructor de copia para realizar una copia del rectangulo\n        Rectangulov2 r4 = new Rectangulov2(r1);\n        System.out.println(\"r4 es una copia de r1\");\n\n        System.out.printf(\"r4.x1: %4.2f\\nr4.y1: %4.2f\\n\", r4.x1, r4.y1);\n        System.out.printf(\"r4.x2: %4.2f\\nr4.y2: %4.2f\\n\", r4.x2, r4.y2);\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#clase-dni","title":"Clase <code>DNI</code>","text":"<pre><code>public class DNI {\n\n    // Atributos est\u00e1ticos\n    // Cadena con las letras posibles del DNI ordenados para el c\u00e1lculo de DNI\n    private static final String LETRAS_DNI = \"TRWAGMYFPDXBNJZSQVHLCKE\";\n\n    // Atributos de objeto\n    private int numDNI;\n\n    // M\u00e9todos\n    public String obtenerNIF() {\n        // Variables locales\n        String cadenaNIF;\n        // NIF con letra para devolver\n        char letraNIF;\n        // Letra del n\u00famero de NIF calculado\n        // C\u00e1lculo de la letra del NIF\n        letraNIF = calcularLetraNIF(numDNI);\n        // Construcci\u00f3n de la cadena del DNI: n\u00famero + letra\n        cadenaNIF = Integer.toString(numDNI) + String.valueOf(letraNIF);\n        // Devoluci\u00f3n del resultado\n        return cadenaNIF;\n    }\n\n    public int obtenerDNI() {\n        return numDNI;\n    }\n\n    public void establecer(String nif) throws Exception {\n        if (DNI.validarNIF(nif)) { // Valor v\u00e1lido: lo almacenamos\n            this.numDNI = DNI.extraerNumeroNIF(nif);\n        } else { // Valor inv\u00e1lido: lanzamos una excepci\u00f3n\n            throw new Exception(\"NIF inv\u00e1lido: \" + nif);\n        }\n    }\n\n    public void establecer(int dni) throws Exception {\n        // Comprobaci\u00f3n de rangos\n        if (dni &gt; 999999 &amp;&amp; dni &lt; 99999999) {\n            this.numDNI = dni; // Valor v\u00e1lido: lo almacenamos\n        } else { // Valor inv\u00e1lido: lanzamos una excepci\u00f3n\n            throw new Exception(\"DNI inv\u00e1lido: \" + String.valueOf(dni));\n        }\n    }\n\n    private static char calcularLetraNIF(int dni) {\n        char letra;\n        // C\u00e1lculo de la letra NIF\n        letra = LETRAS_DNI.charAt(dni % 23);\n        // Devoluci\u00f3n de la letra NIF\n        return letra;\n    }\n\n    private static char extraerLetraNIF(String nif) {\n        char letra = nif.charAt(nif.length() - 1);\n        return letra;\n    }\n\n    private static int extraerNumeroNIF(String nif) {\n        int numero = Integer.parseInt(nif.substring(0, nif.length() - 1));\n        return numero;\n    }\n\n    private static boolean validarNIF(String nif) {\n        boolean valido = true;\n        // Suponemos el NIF v\u00e1lido mientras no se encuentre alg\u00fan fallo\n        char letra_calculada;\n        char letra_leida;\n        int dni_leido;\n        if (nif == null) { // El par\u00e1metro debe ser un objeto no vac\u00edo\n            valido = false;\n        } else if (nif.length() &lt; 8 || nif.length() &gt; 9) {\n            // La cadena debe estar entre 8(7+1) y 9(8+1) caracteres \n            valido = false;\n        } else {\n            letra_leida = DNI.extraerLetraNIF(nif);\n            // Extraemos la letra de NIF (letra) \n            dni_leido = DNI.extraerNumeroNIF(nif); // Extraemos el n\u00famero de DNI (int)\n            letra_calculada = DNI.calcularLetraNIF(dni_leido);\n            // Calculamos la letra de NIF a partir del n\u00famero extra\u00eddo\n            if (letra_leida == letra_calculada) {\n                // Comparamos la letra extra\u00edda con la calculada\n                // Todas las comprobaciones han resultado v\u00e1lidas. El NIF es v\u00e1lido.\n                valido = true;\n            } else {\n                valido = false;\n            }\n        }\n        return valido;\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#casting","title":"<code>Casting</code>","text":"<pre><code>package UD05;\n\npublic class Casting {\n\n    public static void main(String[] args) {\n        // Casting Implicito\n        Persona encargadoCarniceria = new Encargado(\"Rosa Ramos\", 1200,\n                \"Carniceria\");\n\n        // No tenemos disponibles los m\u00e9todos de la clase Encargado:\n        //EncargadaCarniceria.setSueldoBase(1200);\n        //EncargadaCarniceria.setSeccion(\"Carniceria\");\n        //Pero al imprimir se imprime con el m\u00e9todo m\u00e1s espec\u00edfico (luego lo vemos)\n        System.out.println(encargadoCarniceria);\n\n        // Casting Explicito\n        Encargado miEncargado = (Encargado) encargadoCarniceria;\n        //Tenemos disponibles los m\u00e9todos de la clase Encargado:       \n        miEncargado.setSueldoBase(1200);\n        miEncargado.setSeccion(\"Carniceria\");\n        //Al imprimir se imprime con el m\u00e9todo m\u00e1s espec\u00edfico de nuevo.\n        System.out.println(miEncargado);\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#persona","title":"<code>Persona</code>","text":"<pre><code>package UD05;\n\n// Clase Persona que solo dispone de nombre\npublic class Persona {\n\n    String nombre;\n\n    public Persona(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public void setNombre(String nom) {\n        nombre = nom;\n    }\n\n    public String getNombre() {\n        return nombre;\n    }\n\n    @Override\n    public String toString() {\n        return \"Nombre: \" + nombre;\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#empleado","title":"<code>Empleado</code>","text":"<pre><code>package UD05;\n\n// Clase Empleado que hereda de Persona y a\u00f1ade atributo sueldoBase\npublic class Empleado extends Persona {\n\n    double sueldoBase;\n\n    public Empleado(String nombre, double sueldoBase) {\n        super(nombre);\n        this.sueldoBase = sueldoBase;\n    }\n\n    public double getSueldo() {\n        return sueldoBase;\n    }\n\n    public void setSueldoBase(double sueldoBase) {\n        this.sueldoBase = sueldoBase;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \"\\nSueldo Base: \" + sueldoBase;\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#encargado","title":"<code>Encargado</code>","text":"<pre><code>package UD05;\n\n// Clase Encargado que hereda de Empleado y a\u00f1ade atributo seccion\npublic class Encargado extends Empleado {\n\n    String seccion;\n\n    public Encargado(String nombre, double sueldoBase, String seccion) {\n        super(nombre, sueldoBase);\n        this.seccion = seccion;\n    }\n\n    public String getSeccion() {\n        return seccion;\n    }\n\n    public void setSeccion(String seccion) {\n        this.seccion = seccion;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \"\\nSecci\u00f3n:\" + seccion ;\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#clasesanidadas","title":"<code>ClasesAnidadas</code>","text":"<pre><code>package UD05;\n\nclass Pc {\n\n    double precio;\n\n    public String toString() {\n        return \"El precio del PC es \" + this.precio;\n    }\n\n    class Monitor {\n\n        String marca;\n\n        public String toString() {\n            return \"El monitor es de la marca \" + this.marca;\n        }\n    }\n\n    class Cpu {\n\n        String marca;\n\n        public String toString() {\n            return \"La CPU es de la marca \" + this.marca;\n        }\n    }\n}\n\npublic class ClasesAnidadas {\n\n    public static void main(String[] args) {\n        Pc miPc = new Pc();\n        Pc.Monitor miMonitor = miPc.new Monitor();\n        Pc.Cpu miCpu = miPc.new Cpu();\n        miPc.precio = 1250.75;\n        miMonitor.marca = \"Asus\";\n        miCpu.marca = \"Acer\";\n        System.out.println(miPc); //El precio del PC es 1250.75\n        System.out.println(miMonitor); //El monitor es de la marca Asus\n        System.out.println(miCpu); //La CPU es de la marca Acer\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ES.html#pildoras-informaticas-relacionadas","title":"P\u00edldoras inform\u00e1ticas relacionadas","text":"<ul> <li>Curso Java. POO I. V\u00eddeo 27</li> <li>Curso Java. POO II. V\u00eddeo 28</li> <li>Curso Java. POO III. V\u00eddeo 29</li> <li>Curso Java POO VI. Construcci\u00f3n objetos. V\u00eddeo 32</li> <li>Curso Java POO VII. Construcci\u00f3n objetos II. V\u00eddeo 33</li> <li>Curso Java POO VIII. Construcci\u00f3n objetos III. V\u00eddeo 34</li> <li>Curso Java POO IX. Construcci\u00f3n objetos IV. V\u00eddeo 35</li> <li>Curso Java. Constantes Uso final. V\u00eddeo 36</li> <li>Curso Java . Uso static. V\u00eddeo 37</li> <li>Curso Java. M\u00e9todos static. V\u00eddeo 38</li> <li>Curso Java. Sobrecarga de constructores. V\u00eddeo 39</li> <li>Curso Java. Modificadores de acceso. Clase Object. V\u00eddeo 47</li> <li>Curso Java Excepciones V. Cl\u00e1usula throw. V\u00eddeo 146</li> </ul>"},{"location":"UD05/UD05_anexo_ES.html","title":"Anexo Wrappers y Fechas","text":""},{"location":"UD05/UD05_anexo_ES.html#anexo-wrappers-y-fechas","title":"Anexo Wrappers y Fechas","text":""},{"location":"UD05/UD05_anexo_ES.html#wrappers-envoltorios","title":"Wrappers (Envoltorios)","text":"<p>Los wrappers permiten \"envolver\" datos primitivos en objetos, tambi\u00e9n se llaman clases contenedoras. La diferencia entre un tipo primitivo y un wrapper es que este \u00faltimo es una clase y por tanto, cuando trabajamos con wrappers estamos trabajando con objetos. </p> <p>Como son objetos debemos tener cuidado en el paso como par\u00e1metro en m\u00e9todos ya que en el wrapper se realiza por referencia.</p> <p>Una de las principales ventajas del uso de wrappers son la facilidad de conversi\u00f3n entre tipos primitivos y cadenas.</p> <p>Hay una clase contenedora por cada uno de los tipos primitivos de Java. Los datos primitivos se escriben en min\u00fasculas y los wrappers se escriben con la primera letra en may\u00fasculas.</p> Tipo primitivo Wrapper asociado byte Byte short Short int Integer long Long float Float double Double char Char boolean Boolean <p>Cada clase wrapper tiene dos constructores, uno se le pasa por par\u00e1metro el dato de tipo primitivo y otro se le pasa un <code>String</code>.</p> <p>Para wrapper <code>Integer</code>:</p> <pre><code>Integer(int)\nInteger(String)\n</code></pre> <p>Ejemplo:</p> <pre><code>Integer i1 = new Integer(42);\nInteger i2 = new Integer (\"42\");\nFloat f1 = new Float(3.14f);\nFloat f2 = new Float (\"3.14f\");\n</code></pre> <p>Antiguamente, una vez asignado un valor a un objeto o wrapper <code>Integer</code>, este no pod\u00eda cambiarse. Actualmente e internamente se apoyan en variables y wrapers internos para poder variar el valor de un wrapper.</p> <p>Ejemplo:</p> <pre><code>Integer y = new Integer(567);       //Crea el objeto\ny++;                                //Lo desenvuelve, incrementa y lo vuelve a envolver \nSystem.out.println(\"Valor: \" + y);  //Imprime el valor del Objeto y\n</code></pre> <p>Los wrapper disponen de una serie de m\u00e9todos que permiten realizar funciones de conversi\u00f3n de datos. Por ejemplo, el wrapper <code>Integer</code> dispone de los siguientes m\u00e9todos:</p> M\u00e9todo Descripci\u00f3n <code>Integer(int)</code><code>Integer(String)</code> Constructores <code>byteValue()</code><code>shortValue()</code><code>intValue()</code><code>longValue()</code><code>doubleValue()</code><code>floatValue()</code> Funciones de conversi\u00f3n con datos primitivos <code>Integer decode(String)</code><code>Integer parseInt(String)</code><code>Integer parseInt(String, int)</code><code>Integer valueOf(String)</code><code>String toString()</code> Conversi\u00f3n a String <code>String toBinaryString(int)</code><code>String toHexString(int)</code><code>String toOctalString(int)</code> Conversi\u00f3n a otros sistemas de numeraci\u00f3n <code>MAX_VALUE</code>, <code>MIN_VALUE</code>, <code>TYPE</code> Constantes"},{"location":"UD05/UD05_anexo_ES.html#metodos-valueof","title":"M\u00e9todos <code>valueOf()</code>","text":"<p>El m\u00e9todo <code>valueOf()</code> permite crear objetos wrapper y se le pasa un par\u00e1metro <code>String</code> y opcionalmente otro par\u00e1metro que indica la base en la que ser\u00e1 representado el primer par\u00e1metro.</p> <p>Ejemplo:</p> <pre><code>// Convierte el 101011 (base 2) a 43 y le asigna el valor al objeto Integer i3 \nInteger i3 = Integer.valueOf(\"101011\", 2);\nSystem.out.println(i3);\n\n// Asigna 3.14 al objeto Float f3 \nFloat f3 = Float.valueOf(\"3.14f\");\nSystem.out.println(f3);\n</code></pre> <p>M\u00e9todos <code>xxxValue()</code>.</p> <p>Los m\u00e9todos <code>xxxValue()</code> permiten convertir un wrapper en un dato de tipo primitivo y no necesitan argumentos.</p> <p>Ejemplo:</p> <pre><code>Integer i4 = 120; // Crea un nuevo objeto wrapper\nbyte b = i4.byteValue(); // Convierte el valor de i4 a un primitivo byte \nshort s1 = i4.shortValue(); // Otro de los m\u00e9todos de Integer\ndouble d = i4.doubleValue(); // Otro de los m\u00e9todos xxxValue de Integer \nSystem.out.println(s1); // Muestra 120 como resultado\n\nFloat f4 = 3.14f; // Crea un nuevo objeto wrapper\nshort s2 = f4.shortValue(); // Convierte el valor de f4 en un primitivo short\nSystem.out.println(s2); // El resultado es 3 (truncado, no redondeado)\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#metodos-parsexxxx","title":"M\u00e9todos <code>parseXxxx()</code>","text":"<p>Los m\u00e9todos <code>parseXxxx()</code> permiten convertir un wrapper en un dato de tipo primitivo y le pasamos como par\u00e1metro el <code>String</code> con el valor que deseamos convertir y opcionalmente la base a la que convertiremos el valor (2, 8, 10 o 16).</p> <p>Ejemplo:</p> <pre><code>double d4 = Double.parseDouble(\"3.14\"); // Convierte un String a primitivo \nSystem.out.println(\"d4 = \" + d4);   // El resultado ser\u00e1 d4 = 3.14 \nlong l2 = Long.parseLong(\"101010\", 2);  // un String binario a primitivo\nSystem.out.println(\"l2 = \" + l2);   // El resultado es l2 = 42\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#metodos-tostring","title":"M\u00e9todos <code>toString()</code>","text":"<p>El m\u00e9todo <code>toString()</code> permite retornar un <code>String</code> con el valor primitivo que se encuentra en el objeto contenedor. Se le pasa un par\u00e1metro que es el wrapper y opcionalmente para <code>Integer</code> y <code>Long</code> un par\u00e1metro con la base a la que convertiremos el valor (2, 8, 10 o 16).</p> <p>Ejemplo:</p> <pre><code>Double d1 = new Double(\"3.14\");\nSystem.out.println(\"d1 = \" + d1.toString() ); // El resultado es d = 3.14 \nString d2 = Double.toString(3.14); // d2 = \"3.14\"\nSystem.out.println(\"d2 = \" + d2); // El resultado es d = 3.14 \nString s3 = \"hex = \" + Long.toString(254, 16); // s3 = \"hex = fe\" \nSystem.out.println(\"s3 = \" + s3); // El resultado es s3 = hex = fe\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#metodos-toxxxxxstring-binario-hexadecimal-y-octal","title":"M\u00e9todos <code>toXxxxxString()</code> (Binario, Hexadecimal y Octal)","text":"<p>Los m\u00e9todos <code>toXxxxxString()</code> permiten a las clases contenedoras <code>Integer</code> y <code>Long</code> convertir n\u00fameros en base 10 a otras bases, retornando un <code>String</code> con el valor primitivo que se encuentra en el objeto contenedor.</p> <p>Ejemplo:</p> <pre><code>String s4 = Integer.toHexString(254); // Convierte 254 a hex \nSystem.out.println(\"254 es \" + s4); // Resultado: \"254 es fe\" \nString s5 = Long.toOctalString(254); // Convierte 254 a octal\nSystem.out.println(\"254(oct) = \" + s5); // Resultado: \"254(oct) = 376\"\n</code></pre> <p>Para resumir, los m\u00e9todos esenciales para las conversiones son:</p> <ul> <li><code>primitive xxxValue()</code> \u2013 Para convertir de <code>Wrapper</code> a <code>primitive</code></li> <li><code>primitive parseXxx(String)</code> \u2013 Para convertir un <code>String</code> en <code>primitive</code></li> <li><code>Wrapper valueOf(String)</code> \u2013 Para convertir <code>String</code> en <code>Wrapper</code></li> </ul>"},{"location":"UD05/UD05_anexo_ES.html#clase-date","title":"Clase <code>Date</code>","text":"<p>La clase Date es una utilidad contenida en el paquete <code>java.util</code> y permiten trabajar con fechas y horas. La fechas y hora se almacenan en un entero de tipo <code>Long</code> que almacena los milisegundos transcurridos desde el 1 de Enero de de 1970 que se obtienen con <code>getTime()</code>. (Importamos <code>java.util.Date</code>).</p> <p>Ejemplo:</p> <pre><code>Date fecha = new Date(2021, 9, 19);\nSystem.out.println(fecha);           //Mon Sep 19 00:00:00 CEST 2021\nSystem.out.println(fecha.getTime()); //61590146400000\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#clase-gregoriancalendar","title":"Clase <code>GregorianCalendar</code>","text":"<p>Para utilizar fechas y horas se utiliza la clase <code>GregorianCalendar</code> que dispone de variable enteras como: <code>DAY_OF_WEEK</code>, <code>DAY_OF_MONTH</code>, <code>YEAR</code>, <code>MONTH</code>, <code>HOUR</code>, <code>MINUTE</code>, <code>SECOND</code>, <code>MILLISECOND</code>, <code>WEEK_OF_MONTH</code>, <code>WEEK_OF_YEAR</code>, \u2026 (Importamos Clase <code>java.util.Calendar</code> y <code>java.util.GregorianCalendar</code>)</p> <p>Ejemplo 1:</p> <pre><code>Calendar calendar = new GregorianCalendar(2021, 9, 19);\nSystem.out.println(calendar.getTime()); //Sun Sep 19 00:00:00 CEST 2021\n</code></pre> <p>Ejemplo 2:</p> <pre><code>Date d = new Date();\nGregorianCalendar c = new GregorianCalendar(); \nSystem.out.println(\"Fecha: \"+d);  //Fecha: Thu Aug 19 20:06:14 CEST 2021\nSystem.out.println(\"Info: \"+c); //Info:\n//java.util.GregorianCalendar[time=1629396374723,areFieldsSet=true\n//,areAllFieldsSet=true\n//,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Madrid\",offset=3600000\n//,dstSavings=3600000,useDaylight=true,transitions=163\n//,lastRule=java.util.SimpleTimeZone[id=Europe/Madrid,offset=3600000\n//,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2\n//,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMod2.1e=2,endMode=2\n//,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]]\n//,firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2021,MONTH=7,WEEK_OF_YEAR=33\n//,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=231,DAY_OF_WEEK=5\n//,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=6,SECOND=14\n//,MILLISECOND=723,ZONE_OFFSET=3600000,DST_OFFSET=3600000]\nc.setTime(d); \nSystem.out.print(c.get(Calendar.DAY_OF_MONTH));//19\nSystem.out.print(\"/\"); \nSystem.out.print(c.get(Calendar.MONTH)+1); //9\nSystem.out.print(\"/\"); \nSystem.out.println(c.get(Calendar.YEAR)); //2022\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#paquete-javatime","title":"Paquete <code>java.time</code>","text":"<p>El paquete <code>java.time</code> dispone de las clases <code>LocalDate</code>, <code>LocalTime</code>, <code>LocalDateTime</code>, <code>Duration</code> y <code>Period</code> para trabajar con fechas y horas.</p> <p>Estas clases no tienen constructores p\u00fablicos, y por tanto, no se puede usar <code>new</code> para crear objetos de estas clases. Necesitas usar sus m\u00e9todos <code>static</code> para instanciarlas.</p> <p>No es v\u00e1lido llamar directamente al constructor usando <code>new</code>, ya que no tienen un constructor p\u00fablico.</p> <p>Ejemplo:</p> <pre><code>LocalDate d = new LocalDate(); //NO compila\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#localdate","title":"<code>LocalDate</code>","text":"<p><code>LocalDate</code> representa una fecha determinada. Haciendo uso del m\u00e9todo <code>of()</code>, esta clase puede crear un <code>LocalDate</code> teniendo en cuenta el a\u00f1o, mes y d\u00eda. Finalmente, para capturar el <code>LocalDate</code> actual se puede usar el m\u00e9todo <code>now()</code>:</p> <p>Ejemplo:</p> <pre><code>LocalDate date = LocalDate.of(1989, 11, 11); //1989-11-11 \nSystem.out.println(date.getYear()); //1989 \nSystem.out.println(date.getMonth()); //NOVEMBER \nSystem.out.println(date.getDayOfMonth()); //11\ndate = LocalDate.now();\nSystem.out.println(date); //2021-08-19\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#localtime","title":"<code>LocalTime</code>","text":"<p><code>LocalTime</code>, representa un tiempo determinado. Haciendo uso del m\u00e9todo <code>of()</code>, esta clase puede crear un <code>LocalTime</code> teniendo en cuenta la hora, minuto, segundo y nanosegundo. Finalmente, para capturar el <code>LocalTime</code> actual se puede usar el m\u00e9todo <code>now()</code>.</p> <pre><code>LocalTime time = LocalTime.of(5, 30, 45, 35); //05:30:45:35 \nSystem.out.println(time.getHour()); //5 \nSystem.out.println(time.getMinute()); //30 \nSystem.out.println(time.getSecond()); //45 \nSystem.out.println(time.getNano()); //35\ntime = LocalTime.now();\nSystem.out.println(time); //20:13:53.118044\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#localdatetime","title":"<code>LocalDateTime</code>","text":"<p><code>LocalDateTime</code>, es una clase compuesta, la cual combina las clases anteriormente  mencionadas <code>LocalDate</code> y <code>LocalTime</code>. Podemos construir un <code>LocalDateTime</code> haciendo uso de todos los campos (a\u00f1o, mes, d\u00eda, hora, minuto, segundo, nanosegundo).</p> <p>Ejemplo:</p> <pre><code>LocalDateTime dateTime = LocalDateTime.of(1989, 11, 11, 5, 30, 45, 35);\n</code></pre> <p>Tambi\u00e9n, se puede crear un objeto <code>LocalDateTime</code> basado en los tipos <code>LocalDate</code> y <code>LocalTime</code>, haciendo uso del m\u00e9todo <code>of()</code> (<code>LocalDate</code> <code>date</code>, <code>LocalTime</code> <code>time</code>):</p> <p>Ejemplo:</p> <pre><code>LocalDate date = LocalDate.of(1989, 11, 11);\nLocalTime time = LocalTime.of(5, 30, 45, 35); \nLocalDateTime dateTime = LocalDateTime.of(date, time); \nLocalDateTime dateTime = LocalDateTime.now();\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#duration","title":"<code>Duration</code>","text":"<p><code>Duration</code>, hace referencia a la diferencia que existe entre dos objetos de tiempo. La duraci\u00f3n denota la cantidad de tiempo en horas, minutos y segundos.</p> <p>Ejemplo:</p> <pre><code>LocalTime localTime1 = LocalTime.of(12, 25);\nLocalTime localTime2 = LocalTime.of(17, 35);\nDuration duration1 = Duration.between(localTime1, localTime2);\nSystem.out.println(duration1); //PT5H10M\nSystem.out.println(duration1.toDays()); //0\n\nLocalDateTime localDateTime1 = LocalDateTime.of(2016, Month.JULY, 18, 14, 13);\nLocalDateTime localDateTime2 = LocalDateTime.of(2016, Month.JULY, 20, 12, 25);\nDuration duration2 = Duration.between(localDateTime1, localDateTime2);\nSystem.out.println(duration2); //PT46H12M\nSystem.out.println(duration2.toDays()); //1\n</code></pre> <p>Tambi\u00e9n, se puede crear <code>Duration</code> basado en los m\u00e9todos <code>ofDays(long days)</code>, <code>ofHours(long hours)</code>, <code>ofMilis(long milis)</code>, <code>ofMinutes(long minutes)</code>, <code>ofNanos(long nanos)</code>, <code>ofSeconds(long seconds)</code>.</p> <p>Ejemplo:</p> <pre><code>Duration duracion3 = Duration.ofDays(1);\nSystem.out.println(duracion3); //PT24H\nSystem.out.println(duracion3.toDays()); //1\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#period","title":"<code>Period</code>","text":"<p><code>Period</code>, hace referencia a la diferencia que existe entre dos fechas. Esta clase denota la cantidad de tiempo en a\u00f1os, meses y d\u00edas.</p> <pre><code>LocalDate localDate1 = LocalDate.of(2016, 7, 18);\nLocalDate localDate2 = LocalDate.of(2016, 7, 20);\nPeriod periodo1 = Period.between(localDate1, localDate2);\nSystem.out.println(periodo1); //P2D\n</code></pre> <p>Se puede crear <code>Period</code> basado en el m\u00e9todo <code>of(int years, int months, int days)</code>. En el siguiente ejemplo, se crea un per\u00edodo de 1 a\u00f1o 2 meses y 3 d\u00edas:</p> <pre><code>Period periodo2 = Period.of(1, 2, 3); \nSystem.out.println(periodo2); //P1Y2M3D\n</code></pre> <p>Se puede crear <code>Period</code> basado en los m\u00e9todos <code>ofDays(int days)</code>, <code>ofMonths(int months)</code>, <code>ofWeeks(int weeks)</code>, <code>ofYears(int years)</code>.</p> <p>Ejemplo:</p> <pre><code>Period periodo3 = Period.ofYears(1); \nSystem.out.println(periodo3); //P1Y\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#chronounit","title":"<code>ChronoUnit</code>","text":"<p>Permite devolver el tiempo transcurrido entre dos fechas en diferentes formatos (<code>DAYS</code>, <code>MONTHS</code>, <code>YEARS</code>, <code>HOURS</code>, <code>MINUTES</code>, <code>SECONDS</code>, ...). Debemos importar la clase <code>java.time.temporal.ChronoUnit</code>;</p> <p>Ejemplo:</p> <pre><code>LocalDate fechaInicio = LocalDate.of(2016, 7, 18);\nLocalDate fechaFin = LocalDate.of(2016, 7, 20);\n// Calculamos el tiempo transcurrido entre las dos fechas\n// con la clase ChronoUnit y la unidad temporal en la que\n// queremos que nos lo devuelva, en este caso DAYS.\nlong tiempo = ChronoUnit.DAYS.between(fechaInicio, fechaFin);\nSystem.out.println(tiempo); //2\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#introducir-fecha-como-cadena","title":"Introducir fecha como Cadena","text":"<p>Podemos introducir la fecha como una cadena con el formato que deseemos y posteriormente convertir a fecha con la sentencia <code>parse</code>. Debemos importar las clases <code>time</code> y <code>time.format</code>.</p> <p>Ejemplo:</p> <pre><code>DateTimeFormatter formato = DateTimeFormatter.ofPattern(\"d/MM/u\"); \nString fechaCadena = \"16/08/2016\";\nLocalDate mifecha = LocalDate.parse(fechaCadena, formato);\nSystem.out.println(formato.format(mifecha)); //16/08/2016\n</code></pre> <p>Ojo! a partir de Java 8 <code>y</code> es para el a\u00f1o de la era (BC AD), y para el a\u00f1o debemos usar <code>u</code></p> <p>M\u00e1s detalles sobre los formatos: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html</p>"},{"location":"UD05/UD05_anexo_ES.html#manipulacion","title":"Manipulaci\u00f3n","text":"<ol> <li>Manipulando <code>LocalDate</code></li> </ol> <p>Haciendo uso de los m\u00e9todos <code>withYear(int year)</code>, <code>withMonth(int month)</code>, <code>withDayOfMonth(int dayOfMonth)</code>, <code>with(TemporalField field, long newValue)</code> se puede modificar el <code>LocalDate</code>.</p> <p>Ejemplo:</p> <pre><code>LocalDate date = LocalDate.of(2016, 7, 25); \nLocalDate date1 = date.withYear(2017); \nLocalDate date2 = date.withMonth(8); \nLocalDate date3 = date.withDayOfMonth(27); \nSystem.out.println(date);  //2016-07-25 \nSystem.out.println(date1); //2017-07-25 \nSystem.out.println(date2); //2016-08-25 \nSystem.out.println(date3); //2016-07-27 \n</code></pre> <ol> <li>Manipulando <code>LocalTime</code></li> </ol> <p>Haciendo uso de los m\u00e9todos <code>withHour(int hour)</code>, <code>withMinute(int minute)</code>, <code>withSecond(int second)</code>, <code>withNano(int nanoOfSecond)</code> se puede modificar el <code>LocalTime</code>.</p> <p>Ejemplo:</p> <pre><code>LocalTime time = LocalTime.of(14, 30, 35); \nLocalTime time1 = time.withHour(20); \nLocalTime time2 = time.withMinute(25); \nLocalTime time3 = time.withSecond(23);\nLocalTime time4 = time.withNano(24); \nSystem.out.println(time);  //14:30:35\nSystem.out.println(time1); //20:30:35\nSystem.out.println(time2); //14:25:35\nSystem.out.println(time3); //14:30:23\nSystem.out.println(time4); //14:30:35.000000024\n</code></pre> <ol> <li>Manipulando <code>LocalDateTime</code></li> </ol> <p><code>LocalDateTime</code> provee los mismo m\u00e9todos mencionados en las clases <code>LocalDate</code> y <code>LocalTime</code>.</p> <p>Ejemplo:</p> <pre><code>LocalDateTime dateTime = LocalDateTime.of(2016, 7, 25, 22, 11, 30); \nLocalDateTime dateTime1 = dateTime.withYear(2017);\nLocalDateTime dateTime2 = dateTime.withMonth(8); \nLocalDateTime dateTime3 = dateTime.withDayOfMonth(27); \nLocalDateTime dateTime4 = dateTime.withHour(20); \nLocalDateTime dateTime5 = dateTime.withMinute(25); \nLocalDateTime dateTime6 = dateTime.withSecond(23); \nLocalDateTime dateTime7 = dateTime.withNano(24); \nSystem.out.println(dateTime);  //2016-07-25T22:11:30\nSystem.out.println(dateTime1); //2017-07-25T22:11:30\nSystem.out.println(dateTime2); //2016-08-25T22:11:30\nSystem.out.println(dateTime3); //2016-07-27T22:11:30\nSystem.out.println(dateTime4); //2016-07-25T20:11:30\nSystem.out.println(dateTime5); //2016-07-25T22:25:30\nSystem.out.println(dateTime6); //2016-07-25T22:11:23\nSystem.out.println(dateTime7); //2016-07-25T22:11:30.000000024\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#operaciones","title":"Operaciones","text":""},{"location":"UD05/UD05_anexo_ES.html#operaciones-con-localdate","title":"Operaciones con <code>LocalDate</code>","text":"<p>Realizar operaciones como suma o resta de d\u00edas, meses, a\u00f1os, etc es muy f\u00e1cil con la nueva <code>Date</code> API. Los siguientes m\u00e9todos <code>plus(long amountToAdd, TemporalUnit unit)</code>, <code>minus(long amountToSubtract, TemporalUnit unit)</code> proveen una manera general de realizar estas operaciones. (Debemos importar la clase <code>java.time.temporal.ChronoUnit</code> para poder utilizar las unidades: <code>ChronoUnit.YEARS</code>, <code>ChronoUnit.MONTHS</code>, <code>ChronoUnit.DAYS</code>).</p> <p>Ejemplo:</p> <pre><code>LocalDate date = LocalDate.of(2016, 7, 18);\nLocalDate datePlusOneDay = date.plus(1, ChronoUnit.DAYS); \nLocalDate dateMinusOneDay = date.minus(1, ChronoUnit.DAYS); \nSystem.out.println(date);            // 2016-07-18\nSystem.out.println(datePlusOneDay);  // 2016-07-19\nSystem.out.println(dateMinusOneDay); // 2016-07-17\n</code></pre> <p>Tambi\u00e9n se puede hacer c\u00e1lculos basados en un <code>Period</code>. En el siguiente ejemplo, se crea un <code>Period</code> de 1 d\u00eda para poder realizar los c\u00e1lculos.</p> <p>Ejemplo:</p> <pre><code>LocalDate date = LocalDate.of(2016, 7, 18);\nLocalDate datePlusOneDay = date.plus(Period.ofDays(1)); \nLocalDate dateMinusOneDay = date.minus(Period.ofDays(1)); \nSystem.out.println(date);            // 2016-07-18\nSystem.out.println(datePlusOneDay);  // 2016-07-19\nSystem.out.println(dateMinusOneDay); // 2016-07-17\n</code></pre> <p>Finalmente, haciendo uso de m\u00e9todos expl\u00edcitos como <code>plusDays(long daysToAdd)</code> y <code>minusDays(long daysToSubtract)</code> se puede indicar el valor a incrementar o reducir.</p> <p>Ejemplo:</p> <pre><code>LocalDate date = LocalDate.of(2016, 7, 18); \nLocalDate datePlusOneDay = date.plusDays(1); \nLocalDate dateMinusOneDay = date.minusDays(1);\nSystem.out.println(date);            // 2016-07-18\nSystem.out.println(datePlusOneDay);  // 2016-07-19\nSystem.out.println(dateMinusOneDay); // 2016-07-17\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#operaciones-con-localtime","title":"Operaciones con <code>LocalTime</code>","text":"<p>La nueva <code>Date</code> API perimite realizar operaciones como suma y resta de horas, minutos, segundos, etc. Al igual que <code>LocalDate</code>, los siguientes m\u00e9todos <code>plus(long amountToAdd, TemporalUnit unit)</code>, <code>minus(long amountToSubtract, TemporalUnit unit)</code> proveen una manera general de realizar estas operaciones.</p> <p>(Debemos importar la clase <code>java.time.temporal.ChronoUnit</code> para poder utilizar las unidades: <code>ChronoUnit.HOURS</code>, <code>ChronoUnit.MINUTES</code>, <code>ChronoUnit.SECONDS</code>, <code>ChronoUnit.NANOS</code>).</p> <p>Ejemplo:</p> <pre><code>LocalTime time = LocalTime.of(15, 30);\nLocalTime timePlusOneHour = time.plus(1, ChronoUnit.HOURS); \nLocalTime timeMinusOneHour = time.minus(1, ChronoUnit.HOURS); \nSystem.out.println(time);               // 15:30\nSystem.out.println(timePlusOneHour);    // 16:30\nSystem.out.println(timeMinusOneHour);   // 14:30\n</code></pre> <p>Tambi\u00e9n se puede hacer c\u00e1lculos basados en un <code>Duration</code>. En el siguiente ejemplo, se crea un <code>Duration</code> de 1 hora para poder realizar los c\u00e1lculos.</p> <pre><code>LocalTime time = LocalTime.of(15, 30);\nLocalTime timePlusOneHour = time.plus(Duration.ofHours(1)); \nLocalTime timeMinusOneHour = time.minus(Duration.ofHours(1));\nSystem.out.println(time);               // 15:30\nSystem.out.println(timePlusOneHour);    // 16:30\nSystem.out.println(timeMinusOneHour);   // 14:30\n</code></pre> <p>Finalmente, haciendo uso de m\u00e9todos expl\u00edcitos como <code>plusHours(long hoursToAdd)</code> y <code>minusHours(long hoursToSubtract)</code> se puede indicar el valor a incrementar o reducir.</p> <p>Ejemplo:</p> <pre><code>LocalTime time = LocalTime.of(15, 30); \nLocalTime timePlusOneHour = time.plusHours(1);\nLocalTime timeMinusOneHour = time.minusHours(1);\nSystem.out.println(time);               // 15:30\nSystem.out.println(timePlusOneHour);    // 16:30\nSystem.out.println(timeMinusOneHour);   // 14:30\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#operaciones-con-localdatetime","title":"Operaciones con <code>LocalDateTime</code>","text":"<p><code>LocalDateTime</code>, al ser una clase compuesta por <code>LocalDate</code> y <code>LocalTime</code> ofrece los mismos m\u00e9todos para realizar operaciones.</p> <p>(Debemos importar la clase <code>java.time.temporal.ChronoUnit</code> para poder utilizar las unidades: <code>ChronoUnit.YEARS</code>, <code>ChronoUnit.MONTHS</code>, <code>ChronoUnit.DAYS</code>, <code>ChronoUnit.HOURS</code>, <code>ChronoUnit.MINUTES</code>, <code>ChronoUnit.SECONDS</code>, <code>ChronoUnit.NANOS</code>).</p> <p>Ejemplo:</p> <pre><code>LocalDateTime dateTime = LocalDateTime.of(2016, 7, 28, 14, 30); \nLocalDateTime dateTime1 = dateTime.plus(1, ChronoUnit.DAYS).plus(1, ChronoUnit.HOURS); LocalDateTime dateTime2 = dateTime.minus(1, ChronoUnit.DAYS).minus(1, ChronoUnit.HOURS);\nSystem.out.println(dateTime);  // 2016-07-28T14:30\nSystem.out.println(dateTime1); // 2016-07-29T15:30\nSystem.out.println(dateTime2); // 2016-07-27T13:30\n</code></pre> <p>En el siguiente ejemplo, se hace uso de <code>Period</code> y <code>Duration</code>:</p> <pre><code>LocalDateTime dateTime = LocalDateTime.of(2016, 7, 28, 14, 30); \nLocalDateTime dateTime1 = dateTime.plus(Period.ofDays(1)).plus(Duration.ofHours(1));\nLocalDateTime dateTime2 = dateTime.minus(Period.ofDays(1)).minus(Duration.ofHours(1));\nSystem.out.println(dateTime);  // 2016-07-28T14:30\nSystem.out.println(dateTime1); // 2016-07-29T15:30\nSystem.out.println(dateTime2); // 2016-07-27T13:30\n</code></pre> <p>Finalmente, haciendo uso de los m\u00e9todos <code>plusX(long xToAdd)</code> o <code>minusX(long xToSubtract)</code>:</p> <pre><code>LocalDateTime dateTime = LocalDateTime.of(2016, 7, 28, 14, 30); \nLocalDateTime dateTime1 = dateTime.plusDays(1).plusHours(1); \nLocalDateTime dateTime2 = dateTime.minusDays(1).minusHours(1);\nSystem.out.println(dateTime);  // 2016-07-28T14:30\nSystem.out.println(dateTime1); // 2016-07-29T15:30\nSystem.out.println(dateTime2); // 2016-07-27T13:30\n</code></pre> <p>Adem\u00e1s, m\u00e9todos como <code>isBefore</code>, <code>isAfter</code>, <code>isEqual</code> est\u00e1n disponibles para comparar las siguientes clases <code>LocalDate</code>, <code>LocalTime</code> y <code>LocalDateTime</code>.</p> <p>Ejemplo:</p> <pre><code>LocalDate date1 = LocalDate.of(2016, 7, 28);\nLocalDate date2 = LocalDate.of(2016, 7, 29);\nboolean isBefore = date1.isBefore(date2); //true \nboolean isAfter = date2.isAfter(date1); //true \nboolean isEqual = date1.isEqual(date2); //false \n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#formatos","title":"Formatos","text":"<p>Cuando se trabaja con fechas, en ocasiones se requiere de un formato personalizado.  Podemos usar el m\u00e9todo <code>ofPattern(String pattern)</code>, para definir un formato en particular.</p> <p>Para utilizar <code>DateTimeFormatter.ofPattern</code> debemos importar la clase con   <code>import java.time.format.DateTimeFormatter;</code></p> <p>Ejemplo:</p> <pre><code>LocalDate mifecha = LocalDate.of(2016, 7, 25);\nString fechaTexto=mifecha.format(DateTimeFormatter.ofPattern(\"eeee',' dd 'de' MMMM 'del' u\"));\nSystem.out.println(\"La fecha es: \"+fechaTexto); // La fecha es: lunes, 25 de julio del 2016\n</code></pre> <p>El patr\u00f3n del formato se realiza en funci\u00f3n a la siguiente tabla de s\u00edmbolos:</p> S\u00edmbolo Descripci\u00f3n Salida y A\u00f1o 2004; 04 D D\u00eda del A\u00f1o 189 M Mes del A\u00f1o 7; 07; Jul; July; J d D\u00eda del Mes 10 w Semana del A\u00f1o 27 E D\u00eda de la Semana Tue; Tuesday; T F Semana del Mes 3 a AM/PM PM K Hora AM/PM (0-11) 0 H Hora del d\u00eda (0-23) 0 m Minutos de la hora 30 s Segundos del minuto 55 n Nanosegundos del Segundo 987654321 '' Texto 'D\u00eda de la semana'"},{"location":"UD05/UD05_anexo_ES.html#dia-de-la-semana","title":"D\u00eda de la Semana","text":"<p>La funci\u00f3n <code>getDayOfWeek()</code> devuelve un elemento del tipo <code>DayOfWeek</code> que corresponde el d\u00eda de la semana de una fecha. Debemos importar la clase <code>java.time.DayOfWeek</code>.</p> <p>Por ejemplo, el lunes ser\u00e1 <code>DayOfWeek.MONDAY</code>.</p> <p>Ejemplo:</p> <pre><code>LocalDate lafecha = LocalDate.of(2016, 7, 25);\nif (lafecha.getDayOfWeek().equals(DayOfWeek.SATURDAY)) {\n    System.out.println(\"La fecha es S\u00e1bado\");\n} else {\n    System.out.println(\"La fecha NO es S\u00e1bado\");\n}\n//La fecha NO es S\u00e1bado\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#ejemplo-anexo-ud05","title":"Ejemplo Anexo UD05","text":""},{"location":"UD05/UD05_anexo_ES.html#anexo1wrappers","title":"<code>Anexo1Wrappers</code>","text":"<pre><code>package es.martinezpenya.ejemplos.UD05;\n\npublic class Anexo1Wrappers {\n\n    public static void main(String[] args) {\n\n        // WRAPPERS\n        //Integer i1 = new Integer(42); // Obsoleto (deprecated)\n        Integer i1 = Integer.valueOf(42);\n        //Integer i2 = new Integer(\"42\");// Obsoleto (deprecated)\n        Integer i2 = Integer.valueOf(\"42\");\n        //Float f1 = new Float(3.14f);// Obsoleto (deprecated)\n        Float f1 = Float.valueOf(3.14f);\n        //Float f2 = new Float(\"3.14f\");// Obsoleto (deprecated)\n        Float f2 = Float.valueOf(\"3.14f\");\n\n        Integer y = Integer.valueOf(567);      //Crea el objeto\n        y++;                   //Lo desenvuelve, incrementa y lo vuelve a envolver \n        System.out.println(\"Valor: \" + y); //Imprime el valor del Objeto y     \n\n        // VALUEOF\n        // Convierte el 101011 (base 2) a 43 y le asigna el valor al objeto Integer i1 \n        Integer i3 = Integer.valueOf(\"101011\", 2);\n        System.out.println(i3);\n\n        // Asigna 3.14 al objeto Float f3 \n        Float f3 = Float.valueOf(\"3.14f\");\n        System.out.println(f3);\n\n        // XXXVALUE\n        Integer i4 = 120; // Crea un nuevo objeto wrapper\n        byte b = i4.byteValue(); // Convierte el valor de i2 a un primitivo byte \n        short s1 = i4.shortValue(); // Otro de los m\u00e9todos de Integer\n        double d = i4.doubleValue(); // Otro de los m\u00e9todos xxxValue de Integer \n        System.out.println(s1); // Muestra 120 como resultado\n\n        Float f4 = 3.14f; // Crea un nuevo objeto wrapper\n        short s2 = f4.shortValue(); // Convierte el valor de f2 en un primitivo short\n        System.out.println(s2); // El resultado es 3 (truncado, no redondeado)\n\n        // PARSEXXXX\n        double d4 = Double.parseDouble(\"3.14\"); // Convierte un String a primitivo \n        System.out.println(\"d4 = \" + d4);   // El resultado ser\u00e1 d4 = 3.14 \n        long l2 = Long.parseLong(\"101010\", 2);  // un String binario a primitivo\n        System.out.println(\"l2 = \" + l2);   // El resultado es L2 42\n\n        // TOSTRING\n        Double d1 = Double.valueOf(\"3.14\");\n        System.out.println(\"d1 = \" + d1.toString()); // El resultado es d = 3.14 \n        String d2 = Double.toString(3.14); // d2 = \"3.14\"\n        System.out.println(\"d2 = \" + d2); // El resultado es d = 3.14 \n        String s3 = \"hex = \" + Long.toString(254, 16); // s = \"hex = fe\" \n        System.out.println(\"s3 = \" + s3); // El resultado es d = 3.14\n\n        // TOXXXSTRING\n        String s4 = Integer.toHexString(254); // Convierte 254 a hex \n        System.out.println(\"254 es \" + s4); // Resultado: \"254 es fe\" \n        String s5 = Long.toOctalString(254); // Convierte 254 a octal\n        System.out.println(\"254(oct) = \" + s5); // Resultado: \"254(oct) = 376\"\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_anexo_ES.html#anexo2date","title":"<code>Anexo2Date</code>","text":"<pre><code>package UD05;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.time.*;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\n\npublic class Anexo2Date {\n\n    public static void main(String[] args) {\n\n        //Clase Date (java.util.Date)\n        Date fecha = new Date(2021, 8, 19);\n        System.out.println(fecha);           //Mon Sep 19 00:00:00 CEST 3921\n        System.out.println(fecha.getTime()); //61590146400000\n\n        //Clase GregorianCalendar (java.util.Calendar y java.util.GregorianCalendar)\n        Calendar calendar = new GregorianCalendar(2021, 8, 19);\n        System.out.println(calendar.getTime()); //Sun Sep 19 00:00:00 CEST 2021\n\n        Date d = new Date();\n        GregorianCalendar c = new GregorianCalendar();\n        System.out.println(\"Fecha: \" + d);  //Fecha: Thu Aug 19 20:06:14 CEST 2021\n        System.out.println(\"Info: \" + c); //Info: java.util.GregorianCalendar[time=1629396374723,\n        //areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo\n        //[id=\"Europe/Madrid\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=163,\n        //lastRule=java.util.SimpleTimeZone[id=Europe/Madrid,offset=3600000,dstSavings=3600000,\n        //useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,\n        //startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,\n        //endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,\n        //YEAR=2021,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=231,\n        //DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=6,SECOND=14,\n        //MILLISECOND=723,ZONE_OFFSET=3600000,DST_OFFSET=3600000]\n        c.setTime(d);\n        System.out.print(c.get(Calendar.DAY_OF_MONTH));\n        System.out.print(\"/\");\n        System.out.print(c.get(Calendar.MONTH) + 1);\n        System.out.print(\"/\");\n        System.out.println(c.get(Calendar.YEAR) + 1); //19/8/2022\n\n        //LocalDate, LocalTime, LocalDateTime, Duration y Period (java.time.*)\n        //LocalDate d = new LocalDate(); //NO compila\n        LocalDate date = LocalDate.of(1989, 11, 11); //1989-11-11 \n        System.out.println(date.getYear()); //1989 \n        System.out.println(date.getMonth()); //NOVEMBER \n        System.out.println(date.getDayOfMonth()); //11\n        date = LocalDate.now();\n        System.out.println(date); //2021-08-19\n\n        LocalTime time = LocalTime.of(5, 30, 45, 35); //05:30:45:35 \n        System.out.println(time.getHour()); //5 \n        System.out.println(time.getMinute()); //30 \n        System.out.println(time.getSecond()); //45 \n        System.out.println(time.getNano()); //35\n        time = LocalTime.now();\n        System.out.println(time); //20:13:53.118044   \n\n        LocalDateTime dateTime = LocalDateTime.of(1989, 11, 11, 5, 30, 45, 35);\n\n        LocalDate date2 = LocalDate.of(1989, 11, 11);\n        LocalTime time2 = LocalTime.of(5, 30, 45, 35);\n        LocalDateTime dateTime1 = LocalDateTime.of(date, time);\n        LocalDateTime dateTime2 = LocalDateTime.now();\n\n        LocalTime localTime1 = LocalTime.of(12, 25);\n        LocalTime localTime2 = LocalTime.of(17, 35);\n        Duration duration1 = Duration.between(localTime1, localTime2);\n        System.out.println(duration1); //PT5H10M\n        System.out.println(duration1.toDays()); //0\n\n        LocalDateTime localDateTime1 = LocalDateTime.of(2016, Month.JULY, 18, 14, 13);\n        LocalDateTime localDateTime2 = LocalDateTime.of(2016, Month.JULY, 20, 12, 25);\n        Duration duration2 = Duration.between(localDateTime1, localDateTime2);\n        System.out.println(duration2); //PT46H12M\n        System.out.println(duration2.toDays()); //1\n\n        Duration duracion3 = Duration.ofDays(1);\n        System.out.println(duracion3); //PT24H\n        System.out.println(duracion3.toDays()); //1\n\n        LocalDate localDate1 = LocalDate.of(2016, 7, 18);\n        LocalDate localDate2 = LocalDate.of(2016, 7, 20);\n        Period periodo1 = Period.between(localDate1, localDate2);\n        System.out.println(periodo1); //P2D\n</code></pre> <pre><code>        Period periodo2 = Period.of(1, 2, 3);\n        System.out.println(periodo2); //P1Y2M3D\n\n        Period periodo3 = Period.ofYears(1);\n        System.out.println(periodo3); //P1Y\n\n        //CHRONOUNIT (java.time.temporal.ChronoUnit)\n        LocalDate fechaInicio = LocalDate.of(2016, 7, 18);\n        LocalDate fechaFin = LocalDate.of(2016, 7, 20);\n        // Calculamos el tiempo transcurrido entre las dos fechas\n        // con la clase ChronoUnit y la unidad temporal en la que\n        // queremos que nos lo devuelva, en este caso DAYS.\n        long tiempo = ChronoUnit.DAYS.between(fechaInicio, fechaFin);\n        System.out.println(tiempo); //2\n\n        //Introducir fecha por teclado (java.time.format.DateTimeFormatter)\n        DateTimeFormatter formato = DateTimeFormatter.ofPattern(\"d/MM/yyyy\");\n        String fechaCadena = \"16/08/2016\";\n        LocalDate mifecha = LocalDate.parse(fechaCadena, formato);\n        System.out.println(formato.format(mifecha)); //16/08/2016\n\n        //Manipulaci\u00f3n\n        LocalDate fec = LocalDate.of(2016, 7, 25);\n        LocalDate fec1 = fec.withYear(2017);\n        LocalDate fec2 = fec.withMonth(8);\n        LocalDate fec3 = fec.withDayOfMonth(27);\n        System.out.println(date);  //2016-07-25 \n        System.out.println(fec1); //2017-07-25 \n        System.out.println(fec2); //2016-08-25 \n        System.out.println(fec3); //2016-07-27 \n\n        LocalTime tim = LocalTime.of(14, 30, 35);\n        LocalTime tim1 = tim.withHour(20);\n        LocalTime tim2 = tim.withMinute(25);\n        LocalTime tim3 = tim.withSecond(23);\n        LocalTime tim4 = tim.withNano(24);\n        System.out.println(tim);  //14:30:35\n        System.out.println(tim1); //20:30:35\n        System.out.println(tim2); //14:25:35\n        System.out.println(tim3); //14:30:23\n        System.out.println(tim4); //14:30:35.000000024        \n\n        LocalDateTime dateTim = LocalDateTime.of(2016, 7, 25, 22, 11, 30);\n        LocalDateTime dateTim1 = dateTim.withYear(2017);\n        LocalDateTime dateTim2 = dateTim.withMonth(8);\n        LocalDateTime dateTim3 = dateTim.withDayOfMonth(27);\n        LocalDateTime dateTim4 = dateTim.withHour(20);\n        LocalDateTime dateTim5 = dateTim.withMinute(25);\n        LocalDateTime dateTim6 = dateTim.withSecond(23);\n        LocalDateTime dateTim7 = dateTim.withNano(24);\n        System.out.println(dateTim);  //2016-07-25T22:11:30\n        System.out.println(dateTim1); //2017-07-25T22:11:30\n        System.out.println(dateTim2); //2016-08-25T22:11:30\n        System.out.println(dateTim3); //2016-07-27T22:11:30\n        System.out.println(dateTim4); //2016-07-25T20:11:30\n        System.out.println(dateTim5); //2016-07-25T22:25:30\n        System.out.println(dateTim6); //2016-07-25T22:11:23\n        System.out.println(dateTim7); //2016-07-25T22:11:30.000000024\n\n        //OPERACIONES\n        LocalDate date3 = LocalDate.of(2016, 7, 18);\n        LocalDate date3PlusOneDay = date3.plus(1, ChronoUnit.DAYS);\n        LocalDate date3MinusOneDay = date3.minus(1, ChronoUnit.DAYS);\n        System.out.println(date3);        // 2016-07-18\n        System.out.println(date3PlusOneDay);  // 2016-07-19\n        System.out.println(date3MinusOneDay); // 2016-07-17\n\n        LocalDate date4 = LocalDate.of(2016, 7, 18);\n        LocalDate date4PlusOneDay = date4.plus(Period.ofDays(1));\n        LocalDate date4MinusOneDay = date4.minus(Period.ofDays(1));\n        System.out.println(date4);        // 2016-07-18\n        System.out.println(date4PlusOneDay);  // 2016-07-19\n        System.out.println(date4MinusOneDay); // 2016-07-17\n\n        LocalDate date5 = LocalDate.of(2016, 7, 18);\n        LocalDate date5PlusOneDay = date5.plusDays(1);\n        LocalDate date5MinusOneDay = date5.minusDays(1);\n        System.out.println(date5);        // 2016-07-18\n        System.out.println(date5PlusOneDay);  // 2016-07-19\n        System.out.println(date5MinusOneDay); // 2016-07-17   \n\n        LocalTime time3 = LocalTime.of(15, 30);\n        LocalTime time3PlusOneHour = time3.plus(1, ChronoUnit.HOURS);\n        LocalTime time3MinusOneHour = time3.minus(1, ChronoUnit.HOURS);\n        System.out.println(time3);      // 15:30\n        System.out.println(time3PlusOneHour);   // 16:30\n        System.out.println(time3MinusOneHour);  // 14:30\n</code></pre> <pre><code>        LocalTime time4 = LocalTime.of(15, 30);\n        LocalTime time4PlusOneHour = time4.plus(Duration.ofHours(1));\n        LocalTime time4MinusOneHour = time4.minus(Duration.ofHours(1));\n        System.out.println(time4);      // 15:30\n        System.out.println(time4PlusOneHour);   // 16:30\n        System.out.println(time4MinusOneHour);  // 14:30\n\n        LocalTime time5 = LocalTime.of(15, 30);\n        LocalTime time5PlusOneHour = time5.plusHours(1);\n        LocalTime time5MinusOneHour = time5.minusHours(1);\n        System.out.println(time5);      // 15:30\n        System.out.println(time5PlusOneHour);   // 16:30\n        System.out.println(time5MinusOneHour);  // 14:30\n\n        LocalDateTime dateTime3 = LocalDateTime.of(2016, 7, 28, 14, 30);\n        LocalDateTime dateTime4 = dateTime3.plus(1, ChronoUnit.DAYS).plus(1, ChronoUnit.HOURS);\n        LocalDateTime dateTime5 = dateTime3.minus(1, ChronoUnit.DAYS).minus(1, ChronoUnit.HOURS);\n        System.out.println(dateTime3); // 2016-07-28T14:30\n        System.out.println(dateTime4); // 2016-07-29T15:30\n        System.out.println(dateTime5); // 2016-07-27T13:30\n\n        LocalDateTime dateTime6 = LocalDateTime.of(2016, 7, 28, 14, 30);\n        LocalDateTime dateTime7 = dateTime6.plus(Period.ofDays(1)).plus(Duration.ofHours(1));\n        LocalDateTime dateTime8 = dateTime6.minus(Period.ofDays(1)).minus(Duration.ofHours(1));\n        System.out.println(dateTime6); // 2016-07-28T14:30\n        System.out.println(dateTime7); // 2016-07-29T15:30\n        System.out.println(dateTime8); // 2016-07-27T13:30\n\n        LocalDateTime dateTime9 = LocalDateTime.of(2016, 7, 28, 14, 30);\n        LocalDateTime dateTime10 = dateTime9.plusDays(1).plusHours(1);\n        LocalDateTime dateTime11 = dateTime9.minusDays(1).minusHours(1);\n        System.out.println(dateTime9);  // 2016-07-28T14:30\n        System.out.println(dateTime10); // 2016-07-29T15:30\n        System.out.println(dateTime11); // 2016-07-27T13:30\n\n        LocalDate dat1 = LocalDate.of(2016, 7, 28);\n        LocalDate dat2 = LocalDate.of(2016, 7, 29);\n        boolean isBefore = dat1.isBefore(dat2); //true \n        boolean isAfter = date2.isAfter(dat1); //true \n        boolean isEqual = dat1.isEqual(dat2); //false \n\n        //Formatos (java.time.format.DateTimeFormatter)\n        LocalDate mifecha2 = LocalDate.of(2016, 7, 25);\n        String fechaTexto = mifecha2.format(DateTimeFormatter.\n                                            ofPattern(\"eeee',' dd 'de' MMMM 'del' yyyy\"));\n        System.out.println(\"La fecha es: \" + \n                           fechaTexto); // La fecha es: lunes, 25 de julio del 2016\n\n        //DAYOFWEEK\n        LocalDate lafecha = LocalDate.of(2016, 7, 25);\n        if (lafecha.getDayOfWeek().equals(DayOfWeek.SATURDAY)) {\n            System.out.println(\"La fecha es S\u00e1bado\");\n        } else {\n            System.out.println(\"La fecha NO es S\u00e1bado\");\n        }\n        //La fecha NO es S\u00e1bado\n    }\n}\n</code></pre>"},{"location":"UD05/UD05_ejercicios_ES.html","title":"Ejercicios","text":""},{"location":"UD05/UD05_ejercicios_ES.html#ejercicios-de-la-ud05","title":"Ejercicios de la UD05","text":""},{"location":"UD05/UD05_ejercicios_ES.html#ejercicios","title":"Ejercicios","text":""},{"location":"UD05/UD05_ejercicios_ES.html#paquete-ud05_1gestionempleados","title":"Paquete: <code>UD05._1.gestionEmpleados</code>","text":"<p>Una empresa quiere hacer una gesti\u00f3n informatizada b\u00e1sica de sus empleados. Para ello, de cada empleado le interesa:</p> <ul> <li>Nombre (String)</li> <li>DNI (String)</li> <li>A\u00f1o de ingreso (n\u00famero entero)</li> <li>Sueldo bruto anual (n\u00famero real)</li> </ul> <ol> <li>Dise\u00f1ar una clase Java <code>Empleado</code>, que contenga los atributos (privados) que caracterizan a un empleado e implemente los m\u00e9todos adecuados para:</li> </ol> <ul> <li> <p>Crear objetos de la clase: Constructor que reciba todos los datos del empleado a crear.</p> </li> <li> <p>Consultar el valor de cada uno de sus atributos. (Consultores o getters)</p> </li> <li> <p><code>public int antiguedad()</code>. Devuelve el n\u00famero de a\u00f1os transcurridos desde el ingreso del empleado en la empresa. Si el a\u00f1o de ingreso fuera posterior al de la fecha actual, devolver\u00e1 0. Para obtener el a\u00f1o actual puedes usar:</p> <ul> <li><code>java    int anyoActual = Calendar.getInstance().get(Calendar.YEAR);</code></li> </ul> </li> <li> <p><code>public void incrementarSueldo(double porcentaje)</code>. Incrementa el sueldo del empleado en un porcentaje dado (expresado como una cantidad real entre 0 y 100).</p> </li> <li> <p><code>public String toString()</code>. Devuelve un <code>String</code> con los datos del empleado, de la siguiente forma:  </p> <pre><code>Nombre: Juan Gonz\u00e1lez\nDni: 545646556K\nA\u00f1o de ingreso: 1998\nSueldo bruto anual: 20000 \u20ac\n</code></pre> </li> <li> <p><code>public boolean equals(Object o)</code>. M\u00e9todo para comprobar si dos empleados son iguales. Dos empleados se consideran iguales si tienen el mismo DNI.</p> </li> <li> <p><code>public int compareTo(Empleado o)</code>. Se considera menor o mayor el empleado que tiene menor o mayor DNI (el mismo criterio que al comparar dos strings).</p> </li> <li> <p>M\u00e9todo est\u00e1tico <code>public static double calcularIRPF(double salario)</code>. Determina el % de  IRPF que corresponde a un salario (mensual) determinado, seg\u00fan la siguiente tabla:      | Desde salario (incluido) | Hasta salario (no incluido) | % IRPF |      | :----------------------- | --------------------------- | -----: |      | 0                      | 800                       | 3    |      | 800                    | 1000                      | 10   |      | 1000                   | 1500                      | 15   |      | 1500                   | 2100                      | 20   |      | 2100                   | infinito | 30   |</p> </li> </ul> <ol> <li>Dise\u00f1ar una clase Java <code>TestEmpleado</code> que permita probar la clase <code>Empleado</code> y sus m\u00e9todos. Para ello se desarrollar\u00e1 el m\u00e9todo <code>main</code> en el que:</li> </ol> <ul> <li>Se crear\u00e1n dos empleados utilizando los datos que introduzca el usuario.</li> <li>Se incrementar\u00e1 el sueldo un 20 % al empleado que menos cobre.</li> <li>Se incrementar\u00e1 el sueldo un 10% al empleando m\u00e1s antiguo.</li> <li>Muestra el IRPF que corresponder\u00eda a cada empleado. </li> <li>Para comprobar que las operaciones se realizan correctamente, muestra los datos de los empleados tras cada operaci\u00f3n.</li> </ul> <ol> <li>Dise\u00f1ar una clase <code>Empresa</code>, que permita almacenar el nombre de la empresa y la informaci\u00f3n de los empleados de la misma (m\u00e1ximo 10 empleados) en un array. Para ello, se utilizar\u00e1n tres atributos: <code>nombre</code>, <code>plantilla</code> (array de empleados) y <code>numEmpleados</code> (n\u00famero de empleados que tiene la empresa). En esta clase, se deben implementar los m\u00e9todos:</li> </ol> <ul> <li> <p><code>public Empresa (String nombre)</code>. Constructor de la clase. Crea la empresa con el nombre indicado y sin empleados.</p> </li> <li> <p><code>public void contratar(Empleado e) throws PlantillaCompletaException</code>. A\u00f1ade el empleado indicado a la plantilla de la empresa, siempre que quepa en el array. Si no cabe, se lanzar\u00e1 la excepci\u00f3n <code>PlantillaCompletaException</code>.</p> </li> <li> <p><code>public void despedir(Empleado e) throws ElementoNoEncontradoException</code>. Elimina el empleado indicado de la plantilla. Si no existe en la empresa, se lanza <code>ElementoNoEncontradoException</code>.</p> </li> <li> <p><code>public void subirTrienio (double porcentaje)</code> Subir el sueldo, en el porcentaje indicado, a todos los empleados cuya antig\u00fcedad sea exactamente tres a\u00f1os.</p> </li> <li> <p><code>public String toString()</code>. Devuelve un <code>String</code> con el nombre de la empresa y la informaci\u00f3n de todos los empleados. La informaci\u00f3n de los distintos empleados debe estar separada por saltos de l\u00ednea.</p> </li> </ul> <ol> <li>Dise\u00f1ar una clase Java <code>TestEmpresa</code> que permita probar la clase <code>Empresa</code> y sus m\u00e9todos. Para ello, desarrolla el m\u00e9todo <code>main</code> y en \u00e9l \u2026:</li> </ol> <ul> <li>Crea una empresa, de nombre \"DAMCarlet\".</li> <li>Contrata a varios empleados (con el nombre, DNI, etc. que quieras).</li> <li>Usa el m\u00e9todo <code>subirTrienio</code> para subir un 10% el salario de los empleados que cumplen un trienio en el a\u00f1o actual.</li> <li>Despide a alguno de los empleados.</li> <li>Trata de despedir a alg\u00fan empleado que no exista en la empresa.</li> <li>Muestra los datos de la empresa siempre que sea necesario para comprobar que las operaciones se realizan de forma correcta.</li> </ul>"},{"location":"UD05/UD05_ejercicios_ES.html#paquete-ud05_2gestionhospital","title":"Paquete: <code>UD05._2.gestionHospital</code>","text":"<p>Se desea realizar una aplicaci\u00f3n para gestionar el ingreso y el alta de pacientes de un hospital. Una de las clases que participar\u00e1 en la aplicaci\u00f3n ser\u00e1 la clase <code>Paciente</code>, que se detalla a continuaci\u00f3n :</p> <ol> <li>La clase <code>Paciente</code> permite representar un paciente mediante los atributos: <code>nombre</code> (cadena), <code>edad</code> (entero), <code>estado</code> (entero entre 1 -m\u00e1s grave- y 5 -menos grave-, 6 si est\u00e1 curado), y con las siguientes operaciones:</li> </ol> <ul> <li> <p><code>public Paciente (String n, int e)</code>. Constructor de un objeto <code>Paciente</code> de nombre <code>n</code>, de <code>e</code> a\u00f1os y cuyo estado es un valor aleatorio entre 1 y 5.</p> </li> <li> <p><code>public int getEdad()</code>. Consultor que devuelve edad.</p> </li> <li> <p><code>public int getEstado()</code>. Consultor que devuelve estado.</p> </li> <li> <p><code>public void mejorar()</code>. Modificador que incrementa en uno el estado del paciente (mejora al paciente)</p> </li> <li> <p><code>public void empeorar()</code>. Modificador que decrementa en uno el estado del paciente (empeora al paciente)</p> </li> <li> <p><code>public String toString()</code>. Transforma el paciente en un <code>String</code>. Por ejemplo,</p> <pre><code>Pepe P\u00e9rez 46 5\n</code></pre> </li> <li> <p><code>public int compareTo(Paciente o)</code>. Permite comparar dos pacientes. Se considera menor el paciente m\u00e1s leve. A igual gravedad, se considera menor el paciente m\u00e1s joven. Ejemplo:</p> <ul> <li>Teniendo a <code>David 40 3</code>, <code>Pepe 25 3</code> y <code>Juan 35 5</code>:</li> </ul> <pre><code>David.compareTo(Juan) = 2\nJuan.compareTo(Pepe) = -2\nDavid.compareTo(Pepe) = 15\n</code></pre> </li> </ul> <ol> <li>Dise\u00f1ar una clase Java <code>TestPaciente</code> que permita probar la clase <code>Paciente</code> y sus m\u00e9todos. Para ello se desarrollar\u00e1 el m\u00e9todo <code>main</code> en el que:</li> </ol> <ul> <li>Se crear\u00e1n dos pacientes: \"Antonio\" de 20 a\u00f1os y \"Miguel\" de 30 a\u00f1os.</li> <li>Imprimir el estado inicial de los dos pacientes.</li> <li>Mostrar los datos del que se considere menor (seg\u00fan el criterio de <code>compareTo</code> de la clase <code>Paciente</code>).</li> <li>Aplicar \"mejoras\" al paciente m\u00e1s grave hasta que los dos pacientes tengan el mismo estado.</li> <li>Imprimir el estado final de los dos pacientes.</li> </ul> <ol> <li>La clase Hospital contiene la informaci\u00f3n de las camas de un hospital, as\u00ed como de los pacientes que las ocupan. Un Hospital tiene un n\u00famero m\u00e1ximo de camas <code>MAXC</code> = 200 y para representarlas se utilizar\u00e1 un array (llamado <code>listaCamas</code>) de objetos de tipo Paciente junto con un atributo (<code>numLibres</code>) que indique el n\u00famero de camas libres del hospital en un momento dado. El n\u00famero de cada cama coincide con su posici\u00f3n en el array de pacientes (la posici\u00f3n 0 no se utiliza), de manera que <code>listaCamas[i]</code> es el Paciente que ocupa la cama <code>i</code> o es <code>null</code> si la cama est\u00e1 libre. Las operaciones de esta clase son:</li> </ol> <ul> <li> <p><code>public Hospital()</code>. Constructor de un hospital. Cuando se crea un hospital, todas las camas est\u00e1n libres.</p> </li> <li> <p><code>public int getNumLibres()</code>. Consultor del n\u00famero de camas libres.</p> </li> <li> <p><code>public boolean hayLibres()</code>. Devuelve true si en el hospital hay camas libres y devuelve false en caso contrario.</p> </li> <li> <p><code>public int primeraLibre()</code>. Devuelve el n\u00famero de la primera cama libre del array <code>listaCamas</code> si hay camas libres o devuelve un 0 si no las hay.</p> </li> <li> <p><code>public void ingresarPaciente(String n, int e) throws HospitalLlenoException</code> Si hay camas libres, la primera de ellas (la de n\u00famero menor) pasa a estar ocupada por el paciente de nombre <code>n</code> y edad <code>e</code>. Si no hay camas libres, lanza una excepci\u00f3n.</p> </li> <li> <p><code>private void darAltaPaciente(int i)</code>. La cama <code>i</code> del hospital pasa a estar libre. (Afectar\u00e1 al n\u00famero de camas libres)</p> </li> <li> <p><code>public void darAltas()</code>. Se mejora el estado (m\u00e9todo <code>mejorar()</code> de <code>Paciente</code>) de cada uno de los pacientes del hospital y a aquellos pacientes sanos (cuyo estado es 6) se les da el alta m\u00e9dica (invocando al m\u00e9todo <code>darAltaPaciente</code>).</p> </li> <li> <p><code>public String toString()</code>. Devuelve un <code>String</code> con la informaci\u00f3n de las camas del hospital. Por ejemplo,</p> <pre><code>1 Mar\u00eda Medina 30 4\n2 Pepe P\u00e9rez 46 5\n3 libre\n4 Juan L\u00f3pez 50 1\n5 libre\n...\n199 Andr\u00e9s S\u00e1nchez 29 3\n</code></pre> </li> </ul> <ol> <li>En la clase <code>GestorHospital</code> se probar\u00e1 el comportamiento de las clases anteriores. El programa deber\u00e1:</li> </ol> <ul> <li>Crear un hospital.</li> <li>Ingresar a cinco pacientes con los datos simulados introducidos directamente en el programa.</li> <li>Realizar el proceso de <code>darAltas</code> mientras que el n\u00famero de habitaciones libres del hospital no llegue a una cantidad (por ejemplo 198).</li> <li>Mostrar los datos del hospital cuando se considere oportuno para comprobar la correcci\u00f3n de las operaciones que se hacen.</li> </ul>"},{"location":"UD05/UD05_ejercicios_ES.html#paquete-ud05_3contrarreloj","title":"Paquete: <code>UD05._3.contrarreloj</code>","text":"<p>Se quiere realizar una aplicaci\u00f3n para registrar las posiciones y tiempos de llegada en una carrera ciclista contrarreloj. </p> <ol> <li>La clase <code>Corredor</code> representa a un participante en la carrera. Sus atributos son el dorsal (entero), el nombre (String) y el tiempo en segundos (double) que le ha costado completar el recorrido. Los m\u00e9todos con los que cuenta son:</li> </ol> <ul> <li> <p><code>public Corredor(int d, String n)</code>. Constructor a partir del dorsal y el nombre. Por defecto el tiempo tardado es 0</p> </li> <li> <p><code>public double getTiempo()</code>. Devuelve el tiempo tardado por el corredor</p> </li> <li> <p><code>public int getDorsal()</code>. Devuelve el dorsal del corredor</p> </li> <li> <p><code>public String getNombre()</code>. Devuelve el nombre del corredor</p> </li> <li> <p><code>public void setTiempo(double t) throws IllegalArgumentException</code>. Establece el tiempo tardado por el corredor. Lanzar\u00e1 la excepci\u00f3n si el tiempo indicado es negativo.</p> </li> <li> <p><code>public void setTiempo(double t1, double t2) throws IllegalArgumentException</code>. Establece el tiempo tardado por el corredor. </p> <p><code>t1</code> indica la hora de comienzo y <code>t2</code> la hora de finalizaci\u00f3n (expresadas en segundos). La diferencia en segundos entre los dos datos servir\u00e1 para establecer el tiempo tardado por el <code>Corredor</code>.</p> <p>Lanzar\u00e1 la excepci\u00f3n si el tiempo resultante es negativo</p> </li> <li> <p><code>public String toString()</code>. Devuelve un String con los datos del corredor, de la forma:</p> <pre><code>(234) - Juan Ramirez - 2597 segundos\n</code></pre> </li> <li> <p><code>public boolean equals(Object o)</code>. Devuelve true si los corredores tienen el mismo dorsal y false en caso contrario</p> </li> <li> <p><code>public int compareTo (Corredor o)</code>. Un corredor es menor que otro si tiene menor dorsal. </p> </li> <li> <p><code>public static int generarDorsal()</code>. Devuelve un n\u00famero de dorsal generado secuencialmente. Para ello la clase har\u00e1 uso de un atributo <code>static int siguienteDorsal</code> que incrementar\u00e1 cada vez que se genere un nuevo dorsal.</p> </li> </ul> <ol> <li>Dise\u00f1ar una clase Java <code>TestCorredor</code> que permita probar la clase Corredor y sus m\u00e9todos. Para ello se desarrollar\u00e1 el m\u00e9todo <code>main</code> en el que:</li> </ol> <ul> <li>Se crear\u00e1n dos corredores: El nombre lo indicar\u00e1 el usuario mientras que el dorsal se generar\u00e1 utilizando el m\u00e9todo <code>generarDorsal()</code> de la clase.</li> <li>Se establecer\u00e1 el tiempo de llegada del primer corredor a 300 segundos y el del segundo a 400. </li> <li>Se mostrar\u00e1n los datos de ambos corredores (<code>toString</code>)</li> </ul> <ol> <li>La clase <code>ListaCorredores</code> permite representar a un conjunto de corredores. En la lista, como m\u00e1ximo habr\u00e1 200 corredores, aunque puede haber menos de ese n\u00famero. Se utilizar\u00e1 un array, llamado lista, de 200 elementos junto con una propiedad <code>numCorredores</code> que permita saber cuantos corredores hay realmente. M\u00e9todos:</li> </ol> <ul> <li> <p><code>public ListaCorredores()</code>. Constructor. Crea la lista de corredores, incicialmente vac\u00eda.</p> </li> <li> <p><code>public void anyadir(Corredor c) throws ElementoDuplicadoException</code>. A\u00f1ade un corredor al final de la lista de corredores (pero lo m\u00e1s al principio posible del array), siempre y cuando el corredor no est\u00e9 ya en la lista, en cuyo caso se lanzar\u00e1 <code>ElementoDuplicadoException</code></p> </li> <li> <p><code>public void insertarOrdenado(Corredor c)</code>. Inserta un corredor en la posici\u00f3n adecuada de la lista de manera que esta se mantenga ordenada crecientemente por el tiempo de llegada. Para poder realizar la inserci\u00f3n debe averiguarse la posici\u00f3n que debe ocupar el nuevo elemento y, antes de a\u00f1adirlo al array, desplazar el elemento que ocupa esa posici\u00f3n y todos los posteriores, una posici\u00f3n a la derecha.</p> </li> <li> <p><code>public Corredor quitar(int dorsal) throws ElementoNoEncontradoException</code>. Quita de la lista al corredor cuyo dorsal se indica. El array debe mantenerse compacto, es decir, todos los elementos posteriores al eliminado deben desplazarse una posici\u00f3n a la izquierda. El m\u00e9todo devuelve el Corredor quitado de la lista. Si no se encuentra se lanza <code>ElementoNoEncontradoException</code>. </p> </li> <li> <p><code>public String toString()</code> Devuelve un <code>String</code> con la informaci\u00f3n de la lista de corredores. Los minutos apareceran formateados con 2 decimales. Por ejemplo:</p> <pre><code>Posici\u00f3n: 0\n Dorsal: 234\n Nombre: Juan Ramirez\n Tiempo: 25.97 minutos\n\nPosici\u00f3n: 1\n Dorsal: 26\n Nombre: Jos\u00e9 Gonz\u00e1lez\n Tiempo: 29.70 minutos\n</code></pre> </li> </ul> <p>(Clase <code>Contrarreloj</code>) Realizar un programa que simule una contrarreloj. Para llevar el control de una carrera contrarreloj se mantienen dos listas de corredores (dos objetos de tipo <code>ListaCorredores</code>):</p> <ul> <li>(<code>hanSalido</code>) Una con los que han salido, que tiene a los corredores por orden de salida. El atributo tiempo de estos corredores ser\u00e1 0. Para que los corredores se mantengan por orden de salida, se a\u00f1adiran a la lista utilizando el m\u00e9todo a\u00f1adir.</li> <li>(<code>hanLlegado</code>) Otra con los corredores que hay llegado a la meta. A medida que los corredores llegan a la meta se les extrae de la primera lista, se les asigna un tiempo y se les inserta ordenadamente en esta segunda lista.</li> </ul> <p>En el m\u00e9todo <code>main</code> realizar un programa que muestre un men\u00fa con las siguientes opciones:</p> <ol> <li><code>Salida</code>: Para registrar que una corredor ha comenzado la contrarreloj y sale de la l\u00ednea de salida. Solicita al usuario el nombre de un corredor y su dorsal, y lo a\u00f1ade a la lista de corredores que han salido.</li> <li><code>Llegada</code>: Para registrar que un corredor ha llegado a la meta. Solicita al usuario el dorsal de un corredor y el tiempo de llegada (en segundos). Quita al corredor de la lista de corredores que <code>hanSalido</code>, le asigna el tiempo que ha tardado y lo inserta (ordenadamente) en la lista de corredores que <code>hanLlegado</code></li> <li><code>Clasificaci\u00f3n</code>: Muestra la lista de corredores que <code>hanLlegado</code>. Dado que esta lista est\u00e1 ordenada por tiempo, mostrarla por pantalla nos da la clasificaci\u00f3n.</li> <li><code>Salir</code>: Sale del programa</li> </ol>"},{"location":"UD05/UD05_ejercicios_ES.html#paquete-ud05_4reservaslibreria","title":"Paquete: <code>UD05._4.reservasLibreria</code>","text":"<p>Una librer\u00eda quiere proporcionar a sus clientes el siguiente servicio:</p> <p>Cuando un cliente pide un libro y la librer\u00eda no lo tiene, el cliente puede hacer una reserva de manera que cuando lo reciban en la librer\u00eda le avisen por tel\u00e9fono. </p> <p>De cada reserva se almacena:</p> <ul> <li><code>Nif</code> del cliente (<code>String</code>)</li> <li><code>Nombre</code> del cliente (<code>String</code>)</li> <li><code>Tel\u00e9fono</code> del cliente (<code>String</code>)</li> <li><code>C\u00f3digo</code> del libro reservado. (<code>entero</code>)</li> <li>Numero de <code>ejemplares</code> (<code>entero</code>)</li> </ul> <ol> <li>Dise\u00f1ar la clase <code>Reserva</code>, de manera que contemple la informaci\u00f3n descrita e implementar:    - <code>public Reserva(String nif, String nombre, String tel, int codigo, int ejemplares)</code>. Constructor que recibe todos los datos de la reserva.    - <code>public Reserva(String nif, String nombre, String tel, int codigo)</code>. Constructor que recibe los datos del cliente y el c\u00f3digo del libro. Establece el n\u00famero de ejemplares a uno.     - Consultores de todos los atributos.    - <code>public void setEjemplares(int ejemplares)</code>. Modificador del n\u00famero de ejemplares. Establece el n\u00famero de ejemplares al valor indicado como par\u00e1metro.     - <code>public String toString()</code> que devuelva un <code>String</code> con los datos de la reserva    - <code>public boolean equals(Object o)</code>. Dos reservas son iguales si son del mismo cliente y reservan el mismo libro.    - <code>public int compareTo(Object o)</code>. Es menor la reserva cuyo c\u00f3digo de libro es menor. El par\u00e1metro es de tipo <code>Object</code> as\u00ed que revisa si debes hacer alguna \"adaptaci\u00f3n\".</li> <li>Dise\u00f1ar una clase Java <code>TestReservas</code> que permita probar la clase <code>Reserva</code> y sus m\u00e9todos. Para ello se desarrollar\u00e1 el m\u00e9todo <code>main</code> en el que:    - Se creen dos reservas con los datos que introduce el usuario. Las reservas no pueden ser iguales (equals). Si la segunda reserva es igual a la primera se pedir\u00e1 de nuevo los datos de la segunda al usuario.    - Se incremente en uno el n\u00famero de ejemplares de ambas reservas.    - Se muestre la menor y a continuaci\u00f3n la mayor.    - Mostrar el listado de reservas cada vez que consideres oportuno.</li> <li>Dise\u00f1ar una clase <code>ListaReservas</code> que implemente una lista de reservas. Como m\u00e1ximo puede haber 100 reservas en la lista. Se utilizar\u00e1 un array de Reservas que ocuparemos a partir de la posici\u00f3n 0 y un atributo que indique el n\u00famero de reservas. Las reservas existentes ocupar\u00e1n las primeras posiciones del array (sin espacios en blanco). Implementar los siguientes m\u00e9todos:    - <code>public void reservar (String nif, String nombre, String telefono, int libro, int ejemplares) throws ListaLlenaException, ElementoDuplicadoException</code>: Crea una reserva y la a\u00f1ade a la lista. Lanza <code>ElementoDuplicadoException</code> si la reserva ya estaba en la lista. Lanza <code>ListaLlenaException</code> si la lista de reservas est\u00e1 llena.    - <code>public void cancelar (String nif, int libro) throws ElementoNoEncontradoException</code>. Dado un nif de cliente y un c\u00f3digo de libro, anular la reserva correspondiente. Lanzar <code>ElementoNoEncontradoException</code> si la reserva no existe.    - <code>public String toString()</code>: Devuelve un <code>String</code> con los datos de todas las reservas de la lista.    - <code>public int numEjemplaresReservadosLibro (int codigo)</code>: Devuelve el n\u00famero de ejemplares que hay reservados en total de un libro determinado.    - <code>public void reservasLibro (int codigo)</code>: Dado un c\u00f3digo de libro, muestra el nombre y el tel\u00e9fono de todos los clientes que han reservado el libro.</li> <li>Realizar un programa <code>GestionReservas</code> que, utilizando un men\u00fa, permita:    - Realizar reserva. Permite al usuario realizar una reserva.    - Anular reserva: Se anula la reserva que indique el usuario (Nif de cliente y c\u00f3digo de libro).    - Pedido: El usuario introduce un c\u00f3digo de libro y el programa muestra el n\u00ba de reservas que se han hecho del libro. Esta opci\u00f3n de men\u00fa le resultar\u00e1 \u00fatil al usuario para poder hacer el pedido de un libro determinado.    - Recepci\u00f3n: Cuando el usuario recibe un libro quiere llamar por tel\u00e9fono a los clientes que lo reservaron. Solicitar al usuario un c\u00f3digo de libro y mostrar los datos (nombre y tel\u00e9fono) de los clientes que lo tienen reservado.</li> </ol>"},{"location":"UD05/UD05_ejercicios_ES.html#paquete-ud05_5gestorcorreoelectronico","title":"Paquete: <code>UD05._5.gestorCorreoElectronico</code>","text":"<p>Queremos realizar la parte de un programa de correo electr\u00f3nico que gestiona la organizaci\u00f3n de los mensajes en distintas carpetas. Para ello desarrollaremos:</p> <ol> <li>La clase <code>Mensaje</code>. De un mensaje conocemos:</li> </ol> <ul> <li><code>Codigo (int)</code> N\u00famero que permite identificar a los mensajes.</li> <li><code>Emisor (String)</code>: email del emisor.</li> <li><code>Destinatario (String)</code>: email del destinatario.</li> <li><code>Asunto (String)</code></li> <li><code>Texto (String)</code></li> </ul> <p>Desarrollar los siguientes m\u00e9todos:</p> <ul> <li>Constructor que reciba todos los datos, excepto el c\u00f3digo, que se generar\u00e1 autom\u00e1ticamente (n\u00ba consecutivo. Ayuda: utiliza una variable de clase (<code>static</code>))</li> <li>Consultores de todos los atributos.</li> <li><code>public boolean equals(Object o)</code>. Dos mensajes son iguales si tienen el mismo c\u00f3digo.</li> <li><code>public static boolean validarEMail(String email)</code>: M\u00e9todo est\u00e1tico que devuelve true o false indicando si la direcci\u00f3n de correo indicada es v\u00e1lida o no. Una direcci\u00f3n es v\u00e1lida si tiene la forma <code>direccion@subdominio.dominio</code></li> <li><code>public String toString()</code></li> </ul> <ol> <li>Con la clase <code>TestCorreo</code> probaremos las clases y m\u00e9todos desarrollados.</li> </ol> <ul> <li>Crea varios mensajes con los datos que introduzca el usuario y mu\u00e9stralos por pantalla.</li> <li>Prueba el m\u00e9todo <code>validarEMail</code> de la clase Mensaje con las direcciones siguientes (solo la primera es correcta):<ul> <li><code>tuCorreo@gmail.com</code></li> <li><code>tuCorreogmail.com</code></li> <li><code>tuCorreo@gmail</code></li> <li><code>tuCorreo.com@gmail</code> </li> </ul> </li> </ul> <ol> <li>La clase <code>Carpeta</code>, cada carpeta tiene un nombre y una lista de Mensajes. Para ello usaremos un array con capacidad para 100 mensajes y un atributo que indique el n\u00famero de mensajes que contiene la carpeta. Adem\u00e1s se implementar\u00e1n los siguientes m\u00e9todos:</li> </ol> <ul> <li><code>public Carpeta(String nombre)</code>: Constructor. Dado un nombre, crea la carpeta sin mensajes.</li> <li><code>public void anyadir(Mensaje m)</code>: A\u00f1ade a la carpeta el mensaje indicado.</li> <li><code>public void borrar(Mensaje m) throws ElementoNoEncontradoException</code>: Borra de la carpeta el mensaje indicado. Lanza la excepci\u00f3n si el mensaje no existe.</li> <li><code>public Mensaje buscar(int codigo) throws ElementoNoEncontradoException</code>: Busca el mensaje cuyo c\u00f3digo se indica. Si lo encuentra devuelve el mensaje, en caso contrario lanza la excepci\u00f3n.</li> <li><code>public String toString()</code> que devuelva un <code>String</code> con el nombre de la carpeta y sus mensajes</li> <li><code>public static void moverMensaje(Carpeta origen, Carpeta destino, int codigo) throws ElementoNoEncontradoException</code>: M\u00e9todo est\u00e1tico. Recibe dos Carpetas de correo y un c\u00f3digo de mensaje y mueve el mensaje indicado de una carpeta a otra. Para ello buscar\u00e1 el mensaje en la carpeta origen. Si existe lo eliminar\u00e1 y lo a\u00f1adir\u00e1 a la carpeta de destino. Si el mensaje indicado no est\u00e1 en la carpeta de origen lanza <code>ElementoNoEncontradoException</code>.</li> </ul> <ol> <li>Con la clase <code>TestCarpetas</code> probaremos las clases y m\u00e9todos desarrollados:</li> </ol> <ul> <li>Crea dos carpetas de correo de nombre <code>Mensajes recibidos</code> y <code>Mensajes eliminados</code> respectivamente.</li> <li>Crea varios mensajes y a\u00f1\u00e1delos a <code>Mensajes recibidos</code>.</li> <li>Mueve el mensaje de c\u00f3digo 1 desde la <code>Mensajes recibidos</code> a <code>Mensajes elimiminados</code>.</li> <li>Muestra el contenido de las carpetas antes y despu\u00e9s de cada operaci\u00f3n (a\u00f1adir, mover,...)</li> </ul>"},{"location":"UD05/UD05_ejercicios_ES.html#paquete-ud05_6juegodecartas","title":"Paquete: <code>UD05._6.juegoDeCartas</code>","text":"<p>Se est\u00e1 desarrollando una aplicaci\u00f3n que usa una baraja de cartas. Para ello, se implementar\u00e1n en Java las clases necesarias. </p> <ol> <li>Una de ellas es la clase <code>Carta</code> que permite representar una carta de la baraja espa\u00f1ola. La informaci\u00f3n requerida para identificar una <code>Carta</code> es:</li> </ol> <ul> <li>su <code>palo</code> (oros, copas, espadas o bastos) y</li> <li>su <code>valor</code> (un entero entre 1 y 12).</li> </ul> <p>Para dicha clase, se pide:</p> <ul> <li>Definir 4 constantes, atributos de clase (est\u00e1ticos) p\u00fablicos enteros, para representar cada uno de los palos de la baraja (<code>OROS</code> ser\u00e1 el valor 0, <code>COPAS</code> el 1, <code>ESPADAS</code> el 2 y <code>BASTOS</code> el 3). </li> <li>Definir los atributos (privados): <code>palo</code> y <code>valor</code>.</li> <li>Escribir dos constructores: uno para construir una carta de forma aleatoria (sin par\u00e1metros) y otro para construir una carta de acuerdo a dos datos: su palo y su valor (si los datos son incorrectos se lanzar\u00e1 <code>IllegalArgumentException</code>)</li> <li>Escribir los m\u00e9todos <code>consultores</code> y <code>modificadores</code> de los valores de los atributos.</li> <li>Escribir un m\u00e9todo <code>compareTo</code> para comprobar si la carta actual es menor que otra carta dada. El criterio de ordenaci\u00f3n es por palos (el menor es oros, despu\u00e9s copas, a continuaci\u00f3n espadas y, finalmente, bastos) y dentro de cada palo por valor (1, 2, ..., 12).</li> <li>Escribir un m\u00e9todo <code>equals</code> para comprobar la igualdad de dos cartas. Dos cartas son iguales si tienen el mismo palo y valor.</li> <li>Escribir un m\u00e9todo <code>sigPalo</code> para devolver una nueva carta con el mismo valor que el de la carta actual pero del palo siguiente, seg\u00fan la ordenaci\u00f3n anterior y sabiendo que el siguiente al palo bastos es oros.</li> <li>Escribir un m\u00e9todo <code>toString</code> para transformar en <code>String</code> la carta actual, con el siguiente formato: \"valor de palo\"; por ejemplo, \"4 de oros\" o \"1 de bastos\" (sobrescritura del m\u00e9todo <code>toString</code> de <code>Object</code>).</li> </ul> <ol> <li>Implementar una clase <code>JuegoCartas</code> con los m\u00e9todos siguientes:</li> </ol> <ul> <li> <p>Un m\u00e9todo de clase (est\u00e1tico) <code>public static int ganadora( Carta c1, Carta c2, int triunfo)</code> que dados dos objetos <code>Carta</code> y un n\u00famero entero representando el palo de triunfo (o palo ganador), determine cu\u00e1l es la carta ganadora. El m\u00e9todo debe devolver 0 si las dos cartas son iguales. En caso contrario, devolver\u00e1 -1 cuando la primera carta es la ganadora y 1 si la segunda carta es la ganadora.</p> <p>Para determinar la carta ganadora se aplicar\u00e1n las siguientes reglas:</p> <ul> <li>Si las dos cartas son del mismo palo, la carta ganadora es el as (valor 1) y, en el resto de casos, la carta ganadora es la de valor m\u00e1s alto (por ejemplo, \"1 de oros\" gana a \"7 de oros\", \"5 de copas\" gana a \"2 de copas\", \"11 de bastos\" gana a \"7 de bastos\").</li> <li>Si las dos cartas son de palos diferentes:</li> <li>Si el palo de alguna carta es el palo de triunfo, dicha carta es la ganadora.</li> <li>En otro caso, la primera carta siempre gana a la segunda.</li> </ul> </li> <li> <p>Un m\u00e9todo <code>main</code> en el que se debe:</p> <ul> <li>Crear una <code>Carta</code> aleatoriamente y mostrar sus datos por pantalla.</li> <li>Generar aleatoriamente un entero en el rango [0..3] representando el palo de triunfo, y mostrar por pantalla a qu\u00e9 palo corresponde.</li> <li>Crear una <code>Carta</code> a partir de un palo y un valor dados (solicitados al usuario desde teclado), y mostrar sus datos por pantalla.</li> <li>Mostrar por pantalla la carta ganadora (invocando al m\u00e9todo del apartado anterior con el objeto <code>Carta</code> del usuario.</li> </ul> </li> </ul>"},{"location":"UD05/UD05_ejercicios_ES.html#actividades","title":"Actividades","text":"<ol> <li> <p>(WrapperDouble) Introducir por teclado un valor de tipo <code>double</code> , convertirlo en Wrapper e imprimirlo.</p> </li> <li> <p>(StringAEntero) Introducir por teclado un valor num\u00e9rico en un <code>String</code> y convertirlo en entero e imprimirlo.</p> </li> <li> <p>(StringAWrapper) Introducir por teclado un valor num\u00e9rico entero en un <code>String</code> y convertirlo en un <code>Wrapper</code> e imprimirlo.</p> </li> <li> <p>(OperacionesBinarias) Introducir por teclado dos valores num\u00e9ricos enteros y la operaci\u00f3n que queremos realizar (<code>suma</code>, <code>resta</code> o <code>multiplicaci\u00f3n</code>). Realizar la operaci\u00f3n y mostrar el resultado en <code>Binario</code>, <code>Hexadecimal</code> y <code>Octal</code>.</p> </li> </ol> <p>Ejemplo de ejecuci\u00f3n:</p> <pre><code>Introduce el primer valor num\u00e9rico: 14\nIntroduce el segundo valor num\u00e9rico: 4\nIntroduce la operaci\u00f3n (suma, resta, multiplicacion): resta\nEL RESULTADO:\n en binario: 1010\n en octal: 12\n en hexadecimal: a\n</code></pre> <ol> <li> <p>(SegundosDesde1970) Mostrar los segundos transcurridos desde el <code>1 de Enero de 1970 a las 0:00:00</code> hasta <code>hoy</code>.</p> </li> <li> <p>(FormatosFechaHora) Mostrar la <code>fecha</code> y <code>hora</code> de hoy con los siguientes formatos (para todos los ejemplos se supone  que hoy es 26 de agosto de 2021 a las 17 horas 16 minutos y 8 segundos,  tu deberas mostrar la fecha y hora de tu sistema en el momento de  ejecuci\u00f3n):</p> </li> </ol> <p>a) <code>August 26, 2021, 5:16 pm</code>    b) <code>08.26.21</code>    c) <code>26, 8, 2021</code>    d) <code>20210826</code>    e) <code>05-16-08, 26-08-21</code>    f) <code>Thu Aug 26 17:16:08</code>    g) <code>17:16:08</code></p> <ol> <li>(ValidarFecha) Introducir un d\u00eda, un mes y un a\u00f1o y verificar si es una fecha correcta.</li> </ol> <pre><code>Introduce un dia para la fecha: 29\nIntroduce un mes para la fecha: 2\nIntroduce un a\u00f1o para la fecha: 2022\nLA FECHA ES INCORRECTA\n\nIntroduce un dia para la fecha: 29\nIntroduce un mes para la fecha: 2\nIntroduce un a\u00f1o para la fecha: 2020\nLA FECHA ES CORRECTA\n</code></pre> <ol> <li>(DiasEntreFechas) Introducir dos fechas e indicar los d\u00edas transcurridos entre las dos fechas.</li> </ol> <pre><code>Introduce la fecha inicial con formato dd/mm/yyyy: 01/02/2021\nIntroduce la fecha final con formato dd/mm/yyyy: 15/03/2022\nLa fecha inicial es: 1/2/2021\nLa fecha final es: 15/3/2022\nEntre la fecha inicial y la final hay un periodo de: P1Y1M14D\ndias: 14\nmeses: 1\na\u00f1os: 1\n</code></pre> <ol> <li> <p>(PagosPlazos) Introducir una fecha y devolver las fecha de los pagos a 30, 60 y 90 d\u00edas.</p> </li> <li> <p>(CompararFechas) Introducir tres fechas e indicar la mayor y a menor.</p> </li> <li> <p>(FechaActualComparacion) Introducir el d\u00eda, mes, a\u00f1o. Crear una fecha a partir de los datos  introducidos y comprobar e indicar si se trata de la fecha actual, si es una fecha pasada o una fecha futura.</p> </li> <li> <p>(EdadEmpleado) Introducir una fecha de nacimiento de un empelado e indicar cu\u00e1ntos a\u00f1os tiene el empleado.</p> </li> <li> <p>(ProductoCaducado) Introducir la fecha de caducidad de un producto e indicar si el  producto est\u00e1 o no caducado. El valor por defecto ser\u00e1 la fecha actual y solo se podr\u00e1n introducir fechas del a\u00f1o en curso.</p> </li> <li> <p>(FormatoFechaCeros) Mostrar una fecha con formato dd/mm/aaaa utilizando 0 delante de los d\u00edas o meses de 1 d\u00edgito.</p> </li> <li> <p>(FormatoFechaExtendido) Mostrar una fecha con formato <code>DiaSemana</code>, <code>DiaMes</code> de <code>Mes</code> del <code>A\u00f1o</code> a las <code>horas:minutos:segundos</code>. Por ejemplo: Miercoles, 9 de Diciembre del 2015 a las 18:45:32</p> </li> <li> <p>(SumarFechaFutura) Suma 10 a\u00f1os, 4 meses y 5 d\u00edas a la fecha actual.</p> <pre><code>Hoy es: dijous, 03 de mar\u00e7 del 2022\nDentro de 10 a\u00f1os, 4 meses y 5 dias ser\u00e1: dijous, 08 de juliol del 2032\n</code></pre> </li> <li> <p>(RestarFechaPasada) Resta 5 a\u00f1os, 11 meses y 18 d\u00edas a la fecha actual.</p> </li> <li> <p>(PagoHorasExtra) Introducir el n\u00famero de horas trabajadas por un empleado y la fecha en  las que las trabajo. Si el d\u00eda fue s\u00e1bado o domingo el precio hora  trabajada es 20\u20ac en caso contrario 15\u20ac. Calcula la cantidad de dinero  que habr\u00e1 que pagar al empleado por las horas trabajadas.</p> </li> <li> <p>(CalculoNomina) Introducir la fecha inicial y final de una n\u00f3mina y calcular lo que  debe cobrar el empleado sabiendo que cada d\u00eda trabajado recibe 55 \u20ac y  tiene una retenci\u00f3n del 12% sobre el sueldo.</p> </li> <li> <p>(ClaseAlumno) Crear una clase <code>Alumno</code> con los atributos <code>codigo</code>, <code>nombre</code>, <code>apellidos</code>, <code>fecha_nacimiento</code>, <code>calificacion</code>. La fecha de nacimiento deber\u00e1 introducirse como una fecha. Crear constructor, m\u00e9todos <code>setter</code> y <code>getter</code> y <code>toString</code>. Crear una instancia con los siguientes valores <code>1</code>, <code>'Luis'</code>, <code>'Mas Ros'</code>, <code>05/10/1990</code>, <code>7.5</code>. Mostrar los datos del alumno adem\u00e1s de su edad.</p> <pre><code>Alumno{codigo=1, nombre=Luis, apellidos=Mas Ros, fecha=1990-10-05, calificacion=7.5, edad= 31}\n</code></pre> </li> <li> <p>(PlazoEntrega) Introducir la fecha de entrega de un documento y nos diga si est\u00e1  dentro o fuera de plazo teniendo en cuenta que la fecha de entrega  l\u00edmite es la fecha actual.</p> </li> <li> <p>(RetencionesTrabajadores) Introducir en un array <code>nombre</code>, <code>apellidos</code> y <code>sueldo</code> de varios trabajadores y la <code>fecha de alta</code> en la empresa. Las fechas deber\u00e1n introducirse como fechas. Recorrer el array y mostrar para cada trabajador la retenci\u00f3n que debe aplicarse  sobre el sueldo teniendo en cuenta que los trabajadores incorporados  antes de 1980 tienen una retenci\u00f3n del 20%, los trabajadores con fecha  entre 1980 y 2000 una retenci\u00f3n del 15% y los trabajadores con fecha  posterior al 2000 la retenci\u00f3n que aplicaremos ser\u00e1 el 5% del sueldo.</p> </li> <li> <p>(MayorEdad) Realiza un m\u00e9todo est\u00e1tico que dada la <code>fecha de nacimiento</code> de una persona indique si es mayor de edad.</p> </li> <li> <p>(ClaseConversor) Realiza una clase <code>Conversor</code> que tenga las siguientes caracter\u00edsticas: Toma como par\u00e1metro en el constructor un valor entero. Tiene un m\u00e9todo <code>getNumero</code> que dependiendo del par\u00e1metro devolver\u00e1 el mismo n\u00famero (String) en el siguiente sistema de numeraci\u00f3n: <code>B Binario</code>, <code>H Hexadecimal</code>, <code>O Octal</code>. Realiza un m\u00e9todo <code>main</code> en la clase para probar todo lo anterior.</p> </li> <li> <p>(ConversorFechas) Realiza una clase <code>ConversorFechas</code> que tenga los siguientes m\u00e9todos:</p> <ul> <li><code>String normalToAmericano(String fecha)</code>. Este m\u00e9todo convierte una fecha en formato normal <code>dd/mm/yyyy</code> a formato americano `mm/dd/yyyy``</li> <li><code>`String americanoToNormal(String fecha)</code>. Este m\u00e9todo realiza el paso contrario, convierte fechas en formato americano a formato normal.</li> </ul> </li> </ol>"}]}